<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://web.dev/</id>
  <title>Images on web.dev</title>
  <updated>2021-08-11T17:14:17Z</updated>
  <author>
    <name>Google Developers</name>
  </author>
  <link href="https://web.dev/tags/images/feed.xml" rel="self"/>
  <link href="https://web.dev/"/>
  <category term="Images on web.dev"/>
  <icon>https://web.dev/images/social.png</icon>
  <logo>https://web.dev/images/shared/rss-banner.png</logo>
  <subtitle>Our latest news, updates, and stories about Images.</subtitle>
  
  
  <entry>
    <title>The performance effects of too much lazy-loading</title>
    <link href="https://web.dev/lcp-lazy-loading/"/>
    <updated>2021-07-15T00:00:00Z</updated>
    <id>https://web.dev/lcp-lazy-loading/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Lazy-loading is a technique to defer downloading a resource until it&#39;s needed, which conserves data
and reduces network contention for critical assets. It became a web standard in
&lt;a href=&quot;https://web.dev/browser-level-image-lazy-loading/&quot;&gt;2019&lt;/a&gt; and today &lt;code&gt;loading=&amp;quot;lazy&amp;quot;&lt;/code&gt; for images is
&lt;a href=&quot;https://caniuse.com/loading-lazy-attr&quot; rel=&quot;noopener&quot;&gt;supported&lt;/a&gt; by most major browsers. That sounds great,
but is there such a thing as too much lazy loading?&lt;/p&gt;
&lt;p&gt;This post summarizes how we analyzed publicly available web transparency data and ad hoc A/B testing
to understand the adoption and performance characteristics of native image lazy-loading. What we
found is that lazy-loading can be an amazingly effective tool for reducing unneeded image bytes, but
overuse can negatively affect performance. Concretely, our analysis shows that more eagerly
loading images within the initial viewport—while liberally lazy-loading the rest—can give us the
best of both worlds: fewer bytes loaded and improved &lt;a href=&quot;https://web.dev/vitals/#core-web-vitals&quot;&gt;Core Web Vitals&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;adoption&quot;&gt;Adoption &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lcp-lazy-loading/#adoption&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;According to the most recent data in &lt;a href=&quot;https://httparchive.org/&quot; rel=&quot;noopener&quot;&gt;HTTP Archive&lt;/a&gt;,
native image lazy-loading is used by &lt;a href=&quot;https://httparchive.org/reports/state-of-images?start=2020_01_01&amp;amp;end=2021_06_01#imgLazy&quot; rel=&quot;noopener&quot;&gt;17%&lt;/a&gt;
of websites and adoption is growing rapidly. This much of a foothold in the ecosystem is remarkable
for a relatively new API.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Pie chart showing WordPress making up 84.1% of lazy-loading adoption, other CMSs 2.3%, and non-CMSs 13.5%.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;491&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/9RDh3CEC9vb1jCjVAIIi.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Breakdown of the types of websites that make use of native image lazy-loading.
    &lt;em&gt;(&lt;a href=&quot;https://gist.github.com/rviscomi/44d80c1a0f4dec9cbafb37347c770278#file-lazy-loading-wp-cms-sql&quot;&gt;Source&lt;/a&gt;)&lt;/em&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/rviscomi/44d80c1a0f4dec9cbafb37347c770278#file-lazy-loading-wp-cms-sql&quot; rel=&quot;noopener&quot;&gt;Querying&lt;/a&gt;
the raw data in the HTTP Archive project gives us a clearer understanding of what kinds of websites
are driving adoption: 84% of sites that use native image lazy-loading use WordPress, 2% use another
CMS, and the remaining 14% don&#39;t use a known CMS. These results make clear how
&lt;a href=&quot;https://make.wordpress.org/core/2020/07/14/lazy-loading-images-in-5-5/&quot; rel=&quot;noopener&quot;&gt;WordPress is leading the charge&lt;/a&gt;
in adoption.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Timeseries chart of lazy-loading adoption with WordPress being the predominant player compared to other CMSs and non-CMSs, with similar proportions to the previous chart. Total adoption is shown to have rapidly increased from 1% to 17% from July 2020 to June 2021.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;507&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/XgHvIF8JyybNZCNwXL35.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Breakdown of the types of websites that make use of native image lazy-loading.
    &lt;em&gt;(&lt;a href=&quot;https://gist.github.com/rviscomi/44d80c1a0f4dec9cbafb37347c770278#file-lazy-loading-wp-cms-timeseries-sql&quot;&gt;Source&lt;/a&gt;)&lt;/em&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The
&lt;a href=&quot;https://gist.github.com/rviscomi/44d80c1a0f4dec9cbafb37347c770278#file-lazy-loading-wp-cms-timeseries-sql&quot; rel=&quot;noopener&quot;&gt;rate of adoption&lt;/a&gt;
is also worth noting. One year ago in July 2020, WordPress sites that use lazy-loading made up tens
of thousands websites in the corpus of about 6 million (1% of total). Lazy-loading adoption in
WordPress alone has since grown to over 1 million websites (14% of total).&lt;/p&gt;
&lt;h2 id=&quot;correlational-performance&quot;&gt;Correlational performance &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lcp-lazy-loading/#correlational-performance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/rviscomi/44d80c1a0f4dec9cbafb37347c770278#file-lazy-loading-crux-lcp-sql&quot; rel=&quot;noopener&quot;&gt;Digging deeper&lt;/a&gt;
into HTTP Archive, we can compare how pages with and without native image lazy loading perform with
the &lt;a href=&quot;https://web.dev/lcp/&quot;&gt;Largest Contentful Paint&lt;/a&gt; (LCP) metric. The LCP data comes from real-user
experiences from the &lt;a href=&quot;https://developers.google.com/web/tools/chrome-user-experience-report&quot; rel=&quot;noopener&quot;&gt;Chrome User Experience Report&lt;/a&gt; (CrUX) as opposed to synthetic testing in the lab. The chart
below uses a box-and-whisker plot to visualize the distributions of each pages&#39; 75th percentile LCP:
the lines represent the 10th and 90th percentiles and the boxes represent the 25th and 75th
percentiles.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Box and whisker chart showing the 10, 25, 75, and 90th percentiles for pages that do and do not use native image lazy-loading. Comparatively, the LCP distribution of pages that do not use it is faster than those that do.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;488&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/W8gsHQn1IjlRuAgnSizY.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Distribution of all pages&#39; 75th percentile LCP experience, broken down by whether they use native image lazy-loading.
    &lt;em&gt;(&lt;a href=&quot;https://gist.github.com/rviscomi/44d80c1a0f4dec9cbafb37347c770278#file-lazy-loading-crux-lcp-sql&quot;&gt;Source&lt;/a&gt;)&lt;/em&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The median page without lazy-loading has a 75th percentile LCP of 2,922 ms, compared to 3,546 ms for
the median page with lazy-loading. Overall, websites that use lazy-loading tend to have worse LCP
performance.&lt;/p&gt;
&lt;p&gt;It&#39;s important to point out that these are &lt;em&gt;correlational&lt;/em&gt; results and they don&#39;t necessarily point
to lazy-loading as being the &lt;em&gt;cause&lt;/em&gt; of the slower performance. Hypothetically, if WordPress sites
tend to be a bit slower, and given how much they make up the lazy-loading cohort, that could explain
the difference. So let&#39;s try to eliminate that variability by looking only at WordPress sites.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Box and whisker chart showing the 10, 25, 75, and 90th percentiles for WordPress pages that do and do not use native image lazy-loading. Comparatively, the LCP distribution of pages that do not use it is faster than those that do, similar to the previous chart.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;488&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/STd8eW8CSiNp5B1bX0R6Dww2eH32/k1YlIULhqpx3CJV2OPYc.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Distribution of WordPress pages&#39; 75th percentile LCP experience, broken down by whether they use native image lazy-loading.
    &lt;em&gt;(&lt;a href=&quot;https://gist.github.com/rviscomi/44d80c1a0f4dec9cbafb37347c770278#file-lazy-loading-crux-lcp-wordpress-sql&quot;&gt;Source&lt;/a&gt;)&lt;/em&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Unfortunately, the same pattern emerges when we drill down into WordPress pages; those that use
lazy-loading tend to have slower LCP performance. The median WordPress page without lazy-loading has
a 75th percentile LCP of 3,495 ms, compared to 3,768 ms for the median page with lazy-loading.&lt;/p&gt;
&lt;p&gt;This still doesn&#39;t prove that lazy-loading &lt;em&gt;causes&lt;/em&gt; pages to get slower, but using it does coincide
with having slower performance. To try to answer the causality question, we set up a lab-based A/B
test.&lt;/p&gt;
&lt;h2 id=&quot;causal-performance&quot;&gt;Causal performance &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lcp-lazy-loading/#causal-performance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The goal for the A/B test was to prove or disprove the hypothesis that native image lazy-loading, as
implemented in WordPress core, resulted in slower LCP performance and fewer image bytes. The
methodology we used was to test a demo WordPress website with the &lt;a href=&quot;https://wordpress.org/themes/twentytwentyone/&quot; rel=&quot;noopener&quot;&gt;twentytwentyone&lt;/a&gt;
theme. We tested
both archive and single page types, which are like the home and article pages, on desktop and
emulated mobile devices using &lt;a href=&quot;https://webpagetest.org/&quot; rel=&quot;noopener&quot;&gt;WebPageTest&lt;/a&gt;. We tested each combination of
pages with and without lazy-loading enabled and ran each test nine times to get the median LCP value
and number of image bytes.&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Series&lt;/th&gt;
        &lt;th&gt;default&lt;/th&gt;
        &lt;th&gt;disabled&lt;/th&gt;
        &lt;th&gt;Difference from default&lt;/th&gt;
      &lt;/tr&gt;
      &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcQM_859caf47f070026732f4da3f70b8afe3-l:fix,210625_BiDcPT_2b89f12170b7180acf06cb35d3125d6a-l:disabled,210625_AiDc28_df202856ac4f0da4748c7a84a7a455a8-l:default&quot;&gt;twentytwentyone-archive-desktop&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;2,029&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,759&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #8fd1b1;&quot;&gt;-13%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcV5_003a2ee20d6ee7323fca102afe3ef511-l:fix,210625_BiDcET_810fe76322f8a6003c38f0bc901e4025-l:disabled,210625_BiDc99_44b0562e9077eb01e1e18dceec69bca9-l:default&quot;&gt;twentytwentyone-archive-mobile&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,657&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,403&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #7ecaa5;&quot;&gt;-15%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_AiDcR8_47e248c3211951b7af3bc9a87f205cc7-l:fix,210625_AiDcXB_3d9db18bf36397fcdc5d3db207d0d9e7-l:disabled,210625_AiDc2G_ee59429fac9a388b2184758078610b61-l:default&quot;&gt;twentytwentyone-single-desktop&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,655&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,726&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #fae3e1;&quot;&gt;4%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcR1_c349d38d4c7151772f2678fa7767ff42-l:fix,210625_AiDcD9_502bb504fc87aebafc5f8c9aaa70faa5-l:disabled,210625_BiDcPS_de2a3e5a526e470287d850d1dbc96fb7-l:default&quot;&gt;twentytwentyone-single-mobile&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,352&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,384&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #fdf0ef;&quot;&gt;2%&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;caption&gt;Change in LCP (ms) by disabling native image lazy-loading on sample WordPress pages.&lt;/caption&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;The results above compare the median LCP in milliseconds for tests on archive and single pages for
desktop and mobile. When we disabled lazy-loading on archive pages, we observed LCP improving by a
significant margin. On single pages, however, the difference was more neutral.&lt;/p&gt;
&lt;p&gt;It&#39;s worth noting that the effect of disabling lazy-loading actually appears to make the single
pages slightly faster. However, the difference in LCP is less than one standard deviation for both
desktop and mobile tests, so we attribute this to variance and consider the change neutral overall.
By comparison, the difference for archive pages is more like two to three standard deviations.&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Series&lt;/th&gt;
        &lt;th&gt;default&lt;/th&gt;
        &lt;th&gt;disabled&lt;/th&gt;
        &lt;th&gt;Difference from default&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcQM_859caf47f070026732f4da3f70b8afe3-l:fix,210625_BiDcPT_2b89f12170b7180acf06cb35d3125d6a-l:disabled,210625_AiDc28_df202856ac4f0da4748c7a84a7a455a8-l:default&quot;&gt;twentytwentyone-archive-desktop&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;577&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1173&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #e67c73;&quot;&gt;103%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcV5_003a2ee20d6ee7323fca102afe3ef511-l:fix,210625_BiDcET_810fe76322f8a6003c38f0bc901e4025-l:disabled,210625_BiDc99_44b0562e9077eb01e1e18dceec69bca9-l:default&quot;&gt;twentytwentyone-archive-mobile&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;172&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;378&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #e67c73;&quot;&gt;120%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_AiDcR8_47e248c3211951b7af3bc9a87f205cc7-l:fix,210625_AiDcXB_3d9db18bf36397fcdc5d3db207d0d9e7-l:disabled,210625_AiDc2G_ee59429fac9a388b2184758078610b61-l:default&quot;&gt;twentytwentyone-single-desktop&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;301&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;850&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #e67c73;&quot;&gt;183%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcR1_c349d38d4c7151772f2678fa7767ff42-l:fix,210625_AiDcD9_502bb504fc87aebafc5f8c9aaa70faa5-l:disabled,210625_BiDcPS_de2a3e5a526e470287d850d1dbc96fb7-l:default&quot;&gt;twentytwentyone-single-mobile&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;114&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;378&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #e67c73;&quot;&gt;233%&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;caption&gt;Change in the number of image bytes (KB) by disabling native image lazy-loading on sample WordPress pages.&lt;/caption&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;The results above compare the median number of image bytes (in KB) for each test. As expected,
lazy-loading has a very clear positive effect on reducing the number of image bytes. If a real user
were to scroll the entire page down, all images would load anyway as they cross into the viewport,
but these results show the improved performance of the initial page load.&lt;/p&gt;
&lt;p&gt;To summarize the results of the A/B test, the lazy-loading technique used by WordPress very clearly
helps reduce image bytes but at the cost of a delayed LCP.&lt;/p&gt;
&lt;h2 id=&quot;testing-a-fix&quot;&gt;Testing a fix &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lcp-lazy-loading/#testing-a-fix&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we get into how the fix was implemented, let&#39;s look at how lazy-loading works in WordPress
today. The most important aspect of the current implementation is that it lazy-loads images above
the fold (within the viewport). The CMS blog post
&lt;a href=&quot;https://web.dev/browser-level-lazy-loading-for-cmss/#avoid-lazy-loading-above-the-fold-elements&quot;&gt;acknowledges&lt;/a&gt;
this as a pattern to avoid, but experimental data at the time indicated that the effect on LCP was
minimal and worth simplifying the implementation in WordPress core.&lt;/p&gt;
&lt;p&gt;Given this new data, we created an experimental fix that avoids lazy-loading images that are above
the fold and we tested it under the same conditions as the first A/B test.&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Series&lt;/th&gt;
        &lt;th&gt;default&lt;/th&gt;
        &lt;th&gt;disabled&lt;/th&gt;
        &lt;th&gt;fix&lt;/th&gt;
        &lt;th&gt;Difference from default&lt;/th&gt;
        &lt;th&gt;Difference from disabled&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcQM_859caf47f070026732f4da3f70b8afe3-l:fix,210625_BiDcPT_2b89f12170b7180acf06cb35d3125d6a-l:disabled,210625_AiDc28_df202856ac4f0da4748c7a84a7a455a8-l:default&quot;&gt;twentytwentyone-archive-desktop&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;2,029&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,759&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,749&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #8bd0ae;&quot;&gt;-14%&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #fafdfb;&quot;&gt;-1%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcV5_003a2ee20d6ee7323fca102afe3ef511-l:fix,210625_BiDcET_810fe76322f8a6003c38f0bc901e4025-l:disabled,210625_BiDc99_44b0562e9077eb01e1e18dceec69bca9-l:default&quot;&gt;twentytwentyone-archive-mobile&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,657&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,403&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,352&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #64c093;&quot;&gt;-18%&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #e0f2e9;&quot;&gt;-4%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_AiDcR8_47e248c3211951b7af3bc9a87f205cc7-l:fix,210625_AiDcXB_3d9db18bf36397fcdc5d3db207d0d9e7-l:disabled,210625_AiDc2G_ee59429fac9a388b2184758078610b61-l:default&quot;&gt;twentytwentyone-single-desktop&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,655&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,726&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,676&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #fef7f7;&quot;&gt;1%&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #e6f5ee;&quot;&gt;-3%&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcR1_c349d38d4c7151772f2678fa7767ff42-l:fix,210625_AiDcD9_502bb504fc87aebafc5f8c9aaa70faa5-l:disabled,210625_BiDcPS_de2a3e5a526e470287d850d1dbc96fb7-l:default&quot;&gt;twentytwentyone-single-mobile&lt;/a&gt;&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,352&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,384&lt;/td&gt;
        &lt;td style=&quot;text-align: right;&quot;&gt;1,342&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #f8fcfa;&quot;&gt;-1%&lt;/td&gt;
        &lt;td style=&quot;text-align: right; background-color: #e6f5ee;&quot;&gt;-3%&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;caption&gt;Change in LCP (ms) by the proposed fix for native image lazy-loading on sample WordPress pages.&lt;/caption&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;These results are much more promising. Lazy-loading only the images below the fold results in a
complete reversal of the LCP regression and possibly even a slight &lt;em&gt;improvement&lt;/em&gt; over disabling LCP
entirely. How could it be faster than not lazy-loading at all? One explanation is that by not
loading below-the-fold images, there&#39;s less network contention with the LCP image, which enables it
to load more quickly.&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Series&lt;/th&gt;
      &lt;th&gt;default&lt;/th&gt;
      &lt;th&gt;disabled&lt;/th&gt;
      &lt;th&gt;fix&lt;/th&gt;
      &lt;th&gt;Difference from default&lt;/th&gt;
      &lt;th&gt;Difference from disabled&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcQM_859caf47f070026732f4da3f70b8afe3-l:fix,210625_BiDcPT_2b89f12170b7180acf06cb35d3125d6a-l:disabled,210625_AiDc28_df202856ac4f0da4748c7a84a7a455a8-l:default&quot;&gt;twentytwentyone-archive-desktop&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;577&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;1173&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;577&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;0%&lt;/td&gt;
      &lt;td style=&quot;text-align: right; background-color: #a9dcc3;&quot;&gt;-51%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcV5_003a2ee20d6ee7323fca102afe3ef511-l:fix,210625_BiDcET_810fe76322f8a6003c38f0bc901e4025-l:disabled,210625_BiDc99_44b0562e9077eb01e1e18dceec69bca9-l:default&quot;&gt;twentytwentyone-archive-mobile&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;172&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;378&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;172&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;0%&lt;/td&gt;
      &lt;td style=&quot;text-align: right; background-color: #a3d9bf;&quot;&gt;-54%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_AiDcR8_47e248c3211951b7af3bc9a87f205cc7-l:fix,210625_AiDcXB_3d9db18bf36397fcdc5d3db207d0d9e7-l:disabled,210625_AiDc2G_ee59429fac9a388b2184758078610b61-l:default&quot;&gt;twentytwentyone-single-desktop&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;301&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;850&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;301&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;0%&lt;/td&gt;
      &lt;td style=&quot;text-align: right; background-color: #92d3b3;&quot;&gt;-65%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.webpagetest.org/video/compare.php?medianMetric=chromeUserTiming.LargestContentfulPaint&amp;highlightLCP=1&amp;thumbSize=200&amp;ival=100&amp;end=visual&amp;tests=210625_BiDcR1_c349d38d4c7151772f2678fa7767ff42-l:fix,210625_AiDcD9_502bb504fc87aebafc5f8c9aaa70faa5-l:disabled,210625_BiDcPS_de2a3e5a526e470287d850d1dbc96fb7-l:default&quot;&gt;twentytwentyone-single-mobile&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;114&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;378&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;114&lt;/td&gt;
      &lt;td style=&quot;text-align: right;&quot;&gt;0%&lt;/td&gt;
      &lt;td style=&quot;text-align: right; background-color: #89cfad;&quot;&gt;-70%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;caption&gt;Change in the number of image bytes (KB) by the proposed fix for native image lazy-loading on sample WordPress pages.&lt;/caption&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In terms of image bytes, the fix has absolutely no change as compared to the default behavior. This
is great because that was one of the strengths of the current approach.&lt;/p&gt;
&lt;p&gt;There are some caveats with this fix. WordPress determines which images to lazy-load on the
server-side, which means that it doesn&#39;t know anything about the user&#39;s viewport size or whether
images will initially load within it. So the fix uses heuristics about the images&#39; relative location
in the markup to guess whether it will be in the viewport. Specifically, if the image is the first
featured image on the page or the first image in the main content, it&#39;s assumed to be above the fold
(or close to it), and it will not be lazy-loaded. Page-level conditions like the number of words in
the heading or the amount of paragraph text early in the main content may affect whether the image
is within the viewport. There are also user-level conditions that may affect the accuracy of the
heuristics, especially the viewport size and the usage of anchor links that change the scroll
position of the page. For those reasons, it&#39;s important to acknowledge that the fix is only
calibrated to provide good performance in the general case and fine-tuning may be needed to make
these results applicable to all real-world scenarios.&lt;/p&gt;
&lt;h2 id=&quot;rolling-it-out&quot;&gt;Rolling it out &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lcp-lazy-loading/#rolling-it-out&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we&#39;ve identified a better way to lazy-load images, all of the image savings and faster LCP
performance, how can we get sites to start using it? The highest priority change is to submit a
patch to WordPress core to implement the experimental fix. We&#39;ll also be updating the guidance in
the &lt;a href=&quot;https://web.dev/browser-level-lazy-loading-for-cmss/&quot;&gt;Browser-level lazy-loading for CMSs&lt;/a&gt; blog
post to clarify the negative effects of above-the-fold lazy-loading and how CMSs can use heuristics
to avoid it.&lt;/p&gt;
&lt;p&gt;Since these best practices are applicable to all web developers, it may also be worth flagging
lazy-loading antipatterns in tools like Lighthouse. Refer to the &lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/issues/12785&quot; rel=&quot;noopener&quot;&gt;feature
request&lt;/a&gt; on GitHub if you&#39;re interested to
follow along with progress on that audit. Until then, one thing developers could do to find
instances of LCP elements being lazy-loaded is to add more detailed logging to their field data.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;webVitals&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLCP&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;lcp&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; latestEntry &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; lcp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lcp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;latestEntry&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;element&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;loading&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lazy&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Warning: LCP element was lazy loaded&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; latestEntry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The JavaScript snippet above will evaluate the most recent LCP element and log a warning if it was
lazy-loaded.&lt;/p&gt;
&lt;p&gt;This also highlights a sharp edge of the lazy-loading technique and the potential for API
improvements at the platform level. For example, there&#39;s an open issue in Chromium to
&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=996963&quot; rel=&quot;noopener&quot;&gt;experiment&lt;/a&gt; with natively loading the
first few images eagerly, similar to the fix, despite the &lt;code&gt;loading&lt;/code&gt; attribute.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lcp-lazy-loading/#wrapping-it-up&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If your site uses native image lazy-loading, check how it&#39;s implemented and run A/B tests to better
understand its performance costs. It may benefit from more eagerly loading images above the fold. If
you have a WordPress site, there will hopefully be a patch landing in WordPress core soon. And if
you&#39;re using another CMS, make sure they&#39;re aware of the potential performance issues described
here.&lt;/p&gt;
&lt;p&gt;Trying out relatively new web platform APIs can come with both risks and rewards—they&#39;re called
cutting edge features for a reason. While we&#39;re starting to get a sense of the thorniness of native
image lazy-loading, we&#39;re also seeing the upsides of how to use it to achieve better performance.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Photo by &lt;a href=&quot;https://unsplash.com/@frankielopez?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot;&gt;Frankie Lopez&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/prickly-pear?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
</content>
    <author>
      <name>Rick Viscomi</name>
    </author><author>
      <name>Felix Arntz</name>
    </author>
  </entry>
  
  <entry>
    <title>Introducing libSquoosh</title>
    <link href="https://web.dev/introducing-libsquoosh/"/>
    <updated>2021-06-08T00:00:00Z</updated>
    <id>https://web.dev/introducing-libsquoosh/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;&lt;strong&gt;We are happy to introduce &lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/tree/dev/libsquoosh&quot; rel=&quot;noopener&quot;&gt;libSquoosh&lt;/a&gt;, an experimental Node library on top of which the Squoosh CLI is built, giving you all the capabilities for the Squoosh CLI with a JavaScript-idiomatic interface.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Squoosh.app is a PWA that compresses images for you in the browser. It supports many old and new image formats and processes them client-side in the browser through WebAssembly. This means your pictures stay safely on your own computer rather than being sent to a server somewhere, and that Squoosh works even when offline.&lt;/p&gt;
&lt;p&gt;At Chrome DevSummit 2020 &lt;a href=&quot;https://web.dev/squoosh-v2/&quot;&gt;we announced Squoosh v2&lt;/a&gt;, together with the Squoosh CLI to bring all the codecs of Squoosh to the command-line using Node and WebAssembly. This allows you to compress entire folders with one command and make use of the &lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/tree/dev/cli#auto-optimizer&quot; rel=&quot;noopener&quot;&gt;CLI&#39;s&lt;/a&gt; to let it choose the codec parameters for you.&lt;/p&gt;
&lt;p&gt;The CLI enables a lot of automation and so it&#39;s only natural that developers began asking for a more idiomatic interface than programmatically invoking the Squoosh CLI via the shell. &lt;a href=&quot;https://github.com/atjn&quot; rel=&quot;noopener&quot;&gt;Anton (@atjn on GitHub)&lt;/a&gt; stepped up to the task and separated the Squoosh CLI code into two parts: The command line interface code and the underlying core functionality.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ImagePool &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@squoosh/lib&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// libSquoosh uses a worker-pool under the hood&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// to parallelize all image processing.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; imagePool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ImagePool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Accepts both file paths and Buffers/TypedArrays.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; image &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; imagePool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ingestImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./squoosh.jpeg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Optional.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// await image.preprocess({&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//   resize: {&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//     enabled: true,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//     width: 128,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//   },&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// });&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// All codecs are initialized with default values&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// that can be individually overwritten.&lt;/span&gt;&lt;br /&gt;  mozjpeg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    quality&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  avif&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    cqLevel&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  jxl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; extension&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; binary &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;encodedWith&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mozjpeg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;output.&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;extension&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; binary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ... same for other encoders ...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; imagePool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Our goal is to make image compression more accessible to tooling authors. We hope to see integration into Webpack, Rollup and other build tools to make sure your images are appropriately optimized for the web.&lt;/p&gt;
&lt;p&gt;I&#39;d like to express a huge &amp;quot;thank you&amp;quot; to Anton for the time he has committed to Squoosh!&lt;/p&gt;
&lt;p&gt;It&#39;s still early for the Squoosh CLI and libSquoosh and we have many more ideas and plans that we&#39;d like to implement. In the meanwhile, try libSquoosh! However, be mindful that this is an early, experimental release and that there is a good chance you will run into some bugs. If you find some or have questions, please open an &lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/issues/new/choose&quot; rel=&quot;noopener&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are interested in contributing to Squoosh—for example contributing to the extremely sparse documentation around libSquoosh or help with any of the other parts of the app—we are starting a mentorship program to help you get started. If you want to know more, check out our &lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/issues/1020&quot; rel=&quot;noopener&quot;&gt;tracking issue&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Surma</name>
    </author>
  </entry>
  
  <entry>
    <title>Announcing Squoosh v2</title>
    <link href="https://web.dev/squoosh-v2/"/>
    <updated>2020-12-09T00:00:00Z</updated>
    <id>https://web.dev/squoosh-v2/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;&lt;a href=&quot;https://squoosh.app/&quot; rel=&quot;noopener&quot;&gt;Squoosh&lt;/a&gt; is an image compression app our team built and &lt;a href=&quot;https://youtu.be/ipNW6lJHVEs&quot; rel=&quot;noopener&quot;&gt;debuted at Chrome
Dev Summit 2018&lt;/a&gt;. We built it to make it easy to experiment with
different image codecs, and to showcase the capabilities of the modern web.&lt;/p&gt;
&lt;p&gt;Today, we are releasing a major update to the app with more codecs support, a new design, and a
new way to use Squoosh on your command line called Squoosh CLI.&lt;/p&gt;
&lt;h2 id=&quot;new-codecs-support&quot;&gt;New codecs support &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/squoosh-v2/#new-codecs-support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We now support OxiPNG, MozJPEG, WebP, and AVIF, in addition to codecs natively supported in your
browser.  A new codec was made possible again with the use of WebAssembly. By compiling a codec
encoder and decoder as WebAssembly module users can access and experiment with newer codecs even
if their preferred browser does not support them.&lt;/p&gt;
&lt;h2 id=&quot;launching-a-command-line-squoosh!&quot;&gt;Launching a command line Squoosh! &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/squoosh-v2/#launching-a-command-line-squoosh!&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ever since the original launch in 2018, common user request was to interact with Squoosh
programmatically without UI. We felt a bit conflicted about this path since our app was a UI on
top of command-line-based codec tools. However we do understand the desire to interact with the
whole package of codecs instead of multiple tools. Squoosh CLI does just that.&lt;/p&gt;
&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;FUqn8eOxCP4&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;You can install the beta version of the Squoosh CLI by running &lt;code&gt;npm -i @squoosh/cli&lt;/code&gt; or run it
directly using &lt;code&gt;npx @squoosh/cli [parameters]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Squoosh CLI is written in Node and makes use of the exact same WebAssembly modules the PWA
uses. Through extensive use of workers, all images are decoded, processed and encoded in parallel.
We also use Rollup to bundle everything into one JavaScript file to make sure installation via
&lt;code&gt;npx&lt;/code&gt; is quick and seamless. The CLI also offers auto compression, where it tries to reduce the
quality of an image as much as possible without degrading the visual fidelity
(using the &lt;a href=&quot;https://github.com/google/butteraugli&quot; rel=&quot;noopener&quot;&gt;Butteraugli metric&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;With the Squoosh CLI you can compress the images in your web app to multiple formats and use the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element&lt;/a&gt;
to let the browser choose the best version. We also plan to build
plugins for Webpack, Rollup, and other build tools to make image compression
an automatic part of your build process.&lt;/p&gt;
&lt;h2 id=&quot;build-process-change-from-webpack-to-rollup&quot;&gt;Build process change from Webpack to Rollup &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/squoosh-v2/#build-process-change-from-webpack-to-rollup&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The same team that built Squoosh has spent a significant amount of time looking at build tooling
this year for &lt;a href=&quot;https://bundlers.tooling.report/&quot; rel=&quot;noopener&quot;&gt;Tooling Report&lt;/a&gt;, and decided to switch our build
process from Webpack to Rollup.&lt;/p&gt;
&lt;p&gt;The project was initially started with Webpack because we wanted to try it as a team, and at the
time in 2018 Webpack was the only tool that gave us enough control to set up the project the way
we wanted. Over time, we&#39;ve found Rollup&#39;s easy plugin system and simplicity with ESM made it a
natural choice for this project.&lt;/p&gt;
&lt;h2 id=&quot;updated-ui-design&quot;&gt;Updated UI design &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/squoosh-v2/#updated-ui-design&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&#39;ve also updated the UI design of the app featuring &lt;code&gt;blobs&lt;/code&gt; as a visual element.  It is a little
pun on how we treat data in our code. Squoosh passes image data around as a blob, so it felt
natural to include some blobs in the design (get it?).&lt;/p&gt;
&lt;p&gt;Color usage was honed in as well, so that color was more than an accent but additionally a vector
to distinguish and reinforce which image is in context for the options. All in all, the homepage
is a bit more vibrant and the tool itself is a bit more clear and concise.&lt;/p&gt;
&lt;h2 id=&quot;what&#39;s-next&quot;&gt;What&#39;s next ? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/squoosh-v2/#what&#39;s-next&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We plan to keep working on Squoosh. As the new image format gets released, we want our users to
have a place where they can play with the codec without heavy lifting. We also hope to expand use
of Squoosh CLI and integrate more into the build process of a web application.&lt;/p&gt;
&lt;p&gt;Squoosh has always been open source but we&#39;ve never had focus on growing the community. In 2021,
we plan to expand our contributor base and have a better onboarding process to the project.&lt;/p&gt;
&lt;p&gt;Do you have any ideas for Squoosh? Please let us know on our
&lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/issues&quot; rel=&quot;noopener&quot;&gt;issue tracker&lt;/a&gt;.
The team is headed to extended winter vacation but we promise to get
back to you in the new year.&lt;/p&gt;
</content>
    <author>
      <name>Mariko Kosaka</name>
    </author>
  </entry>
  
  <entry>
    <title>What is mixed content?</title>
    <link href="https://web.dev/what-is-mixed-content/"/>
    <updated>2019-09-07T00:00:00Z</updated>
    <id>https://web.dev/what-is-mixed-content/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;&lt;strong&gt;Mixed content&lt;/strong&gt; occurs when initial HTML is loaded over a secure
&lt;a href=&quot;https://web.dev/why-https-matters/&quot;&gt;HTTPS&lt;/a&gt; connection, but other resources (such as images,
videos, stylesheets, scripts) are loaded over an insecure HTTP connection.
This is called mixed content
because both HTTP and HTTPS content are being loaded to display the same page,
and the initial request was secure over HTTPS.&lt;/p&gt;
&lt;p&gt;Requesting subresources using the insecure HTTP protocol weakens the security of the entire page,
as these requests are vulnerable to &lt;a href=&quot;https://www.ietf.org/rfc/rfc7835.html#section-2.1.1&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;on-path attacks&lt;/strong&gt;&lt;/a&gt;,
where an attacker eavesdrops on a network connection and views or modifies the communication between two parties.
Using these resources, attackers can track users and replace content on a website,
and in the case of active mixed content, take complete control over the page, not just the insecure resources.&lt;/p&gt;
&lt;p&gt;Although many browsers report mixed content warnings to the user,
by the time this happens, it is too late:
the insecure requests have already been performed and the security of the page is compromised.&lt;/p&gt;
&lt;p&gt;This is why browsers are increasingly blocking mixed content.
If you have mixed content on your site,
then fixing it will ensure the content continues to load as browsers become more strict.&lt;/p&gt;
&lt;h2 id=&quot;the-two-types-of-mixed-content&quot;&gt;The two types of mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#the-two-types-of-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The two types of mixed content are: active and passive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Passive mixed content&lt;/strong&gt; refers to content that doesn&#39;t interact with the rest of the page,
and thus a man-in-the-middle attack is restricted to what they can do if they intercept or change that content.
Passive mixed content is defined as images, video, and audio content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active mixed content&lt;/strong&gt; interacts with the page as a whole and allows an attacker to do almost anything with the page.
Active mixed content includes scripts, stylesheets, iframes,
and other code that the browser can download and execute.&lt;/p&gt;
&lt;h3 id=&quot;passive-mixed-content&quot;&gt;Passive mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#passive-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Passive mixed content is seen as less problematic yet still poses a security threat to your site and your users.
For example, an attacker can intercept HTTP requests for images on your site and swap or replace these images;
the attacker can swap the &lt;em&gt;save&lt;/em&gt; and &lt;em&gt;delete&lt;/em&gt; button images,
causing your users to delete content without intending to;
replace your product diagrams with lewd or pornographic content,
defacing your site; or replace your product pictures with ads for a different site or product.&lt;/p&gt;
&lt;p&gt;Even if the attacker doesn&#39;t alter the content of your site,
an attacker can track users via mixed content requests.
The attacker can tell which pages a user visits and which products they view based on images or other resources that the browser loads.&lt;/p&gt;
&lt;p&gt;If passive mixed content is present most browsers will indicate in the URL bar that the page is not secure,
even when the page itself was loaded over HTTPS.
You can observe this behavior with this &lt;a href=&quot;https://passive-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;demo&lt;/a&gt;
that contains examples of passive mixed content.&lt;/p&gt;
&lt;p&gt;Until recently passive mixed content was loaded in all browsers,
as to block it would have broken many websites.
This is now beginning to change and so it is vital to update any instances of mixed content on your site.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.chromium.org/2019/10/no-more-mixed-messages-about-https.html&quot; rel=&quot;noopener&quot;&gt;Chrome is currently rolling out&lt;/a&gt;
automatic upgrading of passive mixed content where possible.
Automatic upgrading means that if the asset is available over HTTPS, but has been hardcoded as HTTP,
the browser will load the HTTPS version. If no secure version can be found the asset will not load.&lt;/p&gt;
&lt;p&gt;Whenever it detects mixed content or auto-upgrades passive mixed content,
Chrome logs detailed messages to the &lt;strong&gt;Issues&lt;/strong&gt; tab in DevTools
to guide you on how to fix the specific issue.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The Issues tab in Chrome DevTools shows detailed information about the specific mixed content issue and how to fix it&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;310&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;active-mixed-content&quot;&gt;Active mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#active-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Active mixed content poses a greater threat than passive mixed content.
An attacker can intercept and rewrite active content,
thereby taking full control of your page or even your entire website.
This allows the attacker to change anything about the page,
including displaying entirely different content,
stealing user passwords or other login credentials,
stealing user session cookies,
or redirecting the user to a different site entirely.&lt;/p&gt;
&lt;p&gt;Due to the severity of this threat,
most browsers already block this type of content by default to protect users,
but functionality varies between browser vendors and versions.&lt;/p&gt;
&lt;p&gt;This other &lt;a href=&quot;https://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;demo&lt;/a&gt; contains examples of active mixed content.
&lt;a href=&quot;http://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;Load the example over HTTP&lt;/a&gt;
to see the content that&#39;s blocked when you &lt;a href=&quot;https://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;load the example over
HTTPS&lt;/a&gt;. Blocked content will also
be detailed in the &lt;strong&gt;Issues&lt;/strong&gt; tab.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The Issues tab in Chrome DevTools shows detailed information about the specific mixed content issue and how to fix it&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;361&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Browsers also highlight blocked content in their DevTools. Blocked content
issues are detailed in the &lt;strong&gt;Issues&lt;/strong&gt; tab in Chromium-based browsers. Firefox
and Safari log messages in the console.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;the-mixed-content-specification&quot;&gt;The mixed content specification &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#the-mixed-content-specification&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Browsers follow the &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/&quot; rel=&quot;noopener&quot;&gt;mixed content specification&lt;/a&gt;,
which defines the &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/#optionally-blockable-mixed-content&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;optionally blockable content&lt;/strong&gt;&lt;/a&gt;
and &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/#category-blockable&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;blockable content&lt;/strong&gt;&lt;/a&gt; categories.&lt;/p&gt;
&lt;p&gt;From the spec,
a resource qualifies as optionally blockable content
&amp;quot;when the risk of allowing its usage as mixed content is outweighed by the risk of breaking significant portions of the web&amp;quot;;
this is a subset of the passive mixed content category described above.&lt;/p&gt;
&lt;p&gt;All content that is not &lt;strong&gt;optionally blockable&lt;/strong&gt; is considered &lt;strong&gt;blockable&lt;/strong&gt;,
and should be blocked by the browser.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;There is a &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/level2.html&quot; rel=&quot;noopener&quot;&gt;Level 2 of the Mixed Content specification&lt;/a&gt; in progress,
which will add automatic upgrading to the spec.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In recent years, &lt;a href=&quot;https://transparencyreport.google.com/https/overview&quot; rel=&quot;noopener&quot;&gt;HTTPS usage has risen dramatically&lt;/a&gt;,
and has become the clear default on the web.
This makes it more feasible now for browsers to consider blocking all mixed content,
even those subresource types defined in the &lt;a href=&quot;https://w3c.github.io/webappsec/specs/mixedcontent/&quot; rel=&quot;noopener&quot;&gt;mixed content specification&lt;/a&gt; as &lt;strong&gt;optionally blockable&lt;/strong&gt;.
This is why we now see Chrome taking a stricter approach to these subresources.&lt;/p&gt;
&lt;h3 id=&quot;older-browsers&quot;&gt;Older browsers &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#older-browsers&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is important to remember that not every visitor to your website uses the most up-to-date browsers.
Different versions from different browser vendors each treat mixed content differently.
At worst, older browsers and versions don&#39;t block any mixed content at all,
which is very unsafe for the user.&lt;/p&gt;
&lt;p&gt;By fixing your mixed content problems you ensure that your content is visible in new browsers.
You also help protect users from dangerous content that isn&#39;t blocked by older browsers.&lt;/p&gt;
</content>
    <author>
      <name>Jo-el van Bergen</name>
    </author><author>
      <name>Rachel Andrew</name>
    </author>
  </entry>
  
  <entry>
    <title>Fixing mixed content</title>
    <link href="https://web.dev/fixing-mixed-content/"/>
    <updated>2019-09-07T00:00:00Z</updated>
    <id>https://web.dev/fixing-mixed-content/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Supporting HTTPS for your website is an important step to protecting your site and your users from attack,
but mixed content can render that protection useless.
Increasingly insecure mixed content will be blocked by browsers, as explained in &lt;a href=&quot;https://web.dev/what-is-mixed-content&quot;&gt;What is mixed content?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this guide we will demonstrate techniques and tools for fixing existing mixed content issues
and preventing new ones from happening.&lt;/p&gt;
&lt;h2 id=&quot;finding-mixed-content-by-visiting-your-site&quot;&gt;Finding mixed content by visiting your site &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#finding-mixed-content-by-visiting-your-site&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When visiting an HTTPS page in Google Chrome,
the browser alerts you to mixed content as errors and warnings in the JavaScript console.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://web.dev/what-is-mixed-content&quot;&gt;What is mixed content?&lt;/a&gt;,
you can find a number of examples and see how the problems are reported in Chrome DevTools.&lt;/p&gt;
&lt;p&gt;The example of &lt;a href=&quot;https://passive-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;passive mixed content&lt;/a&gt; will give the following warnings.
If the browser is able to find the content at an &lt;code&gt;https&lt;/code&gt; URL it automatically upgrades it, then shows a message.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Chrome DevTools showing the warnings displayed when mixed content is detected and upgraded&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;294&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;Active mixed content&lt;/a&gt; is blocked and displays a warning.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Chrome DevTools showing the warnings displayed when active mixed content is blocked&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;304&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;If you find warnings like these for &lt;code&gt;http://&lt;/code&gt; URLs on your site,
you need to fix them in your site&#39;s source.
It&#39;s helpful to make a list of these URLs, along with the page you found them on, for use when you fix them.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Mixed content errors and warnings are only shown for the page you are currently viewing,
and the JavaScript console is cleared every time you navigate to a new  page.
This means you will have to view every page of your site individually to find these errors.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;finding-mixed-content-in-your-site&quot;&gt;Finding mixed content in your site &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#finding-mixed-content-in-your-site&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can search for mixed content directly in your source code.
Search for &lt;code&gt;http://&lt;/code&gt; in your source and look for tags that include HTTP URL attributes.
Note that having &lt;code&gt;http://&lt;/code&gt; in the &lt;code&gt;href&lt;/code&gt; attribute of anchor tags (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;)
is often not a mixed content issue, with some notable exceptions discussed later.&lt;/p&gt;
&lt;p&gt;If your site is published using a content management system,
it is possible that links to insecure URLs are inserted when pages are published.
For example, images may be included with a full URL rather than a relative path.
You will need to find and fix these within the CMS content.&lt;/p&gt;
&lt;h3 id=&quot;fixing-mixed-content&quot;&gt;Fixing mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#fixing-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you&#39;ve found mixed content in your site&#39;s source,
you can follow these steps to fix it.&lt;/p&gt;
&lt;p&gt;If you get a console message that a resource request has been automatically upgraded from HTTP to HTTPS,
you can safely change the &lt;code&gt;http://&lt;/code&gt; URL for the resource in your code to &lt;code&gt;https://&lt;/code&gt;.
You can also check to see if a resource is available securely by changing &lt;code&gt;http://&lt;/code&gt; to &lt;code&gt;https://&lt;/code&gt; in the browser URL bar
and attempting to open the URL in a browser tab.&lt;/p&gt;
&lt;p&gt;If the resource is not available via &lt;code&gt;https://&lt;/code&gt;, you should consider one of the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Include the resource from a different host, if one is available.&lt;/li&gt;
&lt;li&gt;Download and host the content on your site directly, if you are legally allowed to do so.&lt;/li&gt;
&lt;li&gt;Exclude the resource from your site altogether.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having fixed the problem,
view the page where you found the error originally and verify that the error no longer appears.&lt;/p&gt;
&lt;h3 id=&quot;beware-of-non-standard-tag-usage&quot;&gt;Beware of non-standard tag usage &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#beware-of-non-standard-tag-usage&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Beware of non-standard tag usage on your site.
For instance, anchor (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) tag URLs don&#39;t result in mixed content errors,
as they cause the browser to navigate to a new page.
This means they usually don&#39;t need to be fixed.
However some image gallery scripts override the functionality of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;
tag and load the HTTP resource specified by the &lt;code&gt;href&lt;/code&gt; attribute into a lightbox display on the page,
causing a mixed content problem.&lt;/p&gt;
&lt;h2 id=&quot;handle-mixed-content-at-scale&quot;&gt;Handle mixed content at scale &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#handle-mixed-content-at-scale&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The manual steps above work well for smaller websites;
but for large websites or sites with many separate development teams,
it can be tough to keep track of all the content being loaded.
To help with this task, you can use content security policy
to instruct the browser to notify you about mixed content and ensure that your pages never unexpectedly load insecure resources.&lt;/p&gt;
&lt;h3 id=&quot;content-security-policy&quot;&gt;Content security policy &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#content-security-policy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/security/csp/&quot; rel=&quot;noopener&quot;&gt;Content security policy&lt;/a&gt; (CSP)
is a multi-purpose browser feature that you can use to manage mixed content at scale.
The CSP reporting mechanism can be used to track mixed content on your site,
and provide enforcement policies to protect users by upgrading or blocking mixed content.&lt;/p&gt;
&lt;p&gt;You can enable these features for a page by including the
&lt;code&gt;Content-Security-Policy&lt;/code&gt; or &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt; header in the response sent from your server.
Additionally you can set &lt;code&gt;Content-Security-Policy&lt;/code&gt;
(though &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt;) using a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your page.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Modern browsers enforce all content security policies that they receive.
Multiple CSP header values received by the browser in the response header or
&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; elements are combined and enforced as a single policy;
reporting policies are likewise combined.
Policies are combined by taking the intersection of the policies;
that is to say, each policy after the first can only further restrict the allowed content, not broaden it.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;finding-mixed-content-with-content-security-policy&quot;&gt;Finding mixed content with content security policy &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#finding-mixed-content-with-content-security-policy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use content security policy to collect reports of mixed content on your site.
To enable this feature, set the &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt; directive by adding it as a response header for your site.&lt;/p&gt;
&lt;p&gt;Response header:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Content-Security-Policy-Report-Only: default-src https: &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;; report-uri https://example.com/reportingEndpoint&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-uri&quot; rel=&quot;noopener&quot;&gt;report-uri&lt;/a&gt; response header is being deprecated in favor of
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to&quot; rel=&quot;noopener&quot;&gt;report-to&lt;/a&gt;.
Browser support for &lt;code&gt;report-to&lt;/code&gt; is currently limited to Chrome and Edge.
You can provide both headers, in which case &lt;code&gt;report-uri&lt;/code&gt; will be ignored if the browser supports &lt;code&gt;report-to&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Whenever a user visits a page on your site,
their browser sends JSON-formatted reports regarding anything that violates the content security policy to
&lt;code&gt;https://example.com/reportingEndpoint&lt;/code&gt;.
In this case, anytime a subresource is loaded over HTTP, a report is sent.
These reports include the page URL where the policy violation occurred and the subresource URL that violated the policy.
If you configure your reporting endpoint to log these reports,
you can track the mixed content on your site without visiting each page yourself.&lt;/p&gt;
&lt;p&gt;The two caveats to this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users have to visit your page in a browser that understands the CSP header. This is true for most modern browsers.&lt;/li&gt;
&lt;li&gt;You only get reports for pages visited by your users.
So if you have pages that don&#39;t get much traffic,
it might be some time before you get reports for your entire site.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://developers.google.com/web/fundamentals/security/csp/&quot; rel=&quot;noopener&quot;&gt;Content security policy&lt;/a&gt;
guide has more information and an example endpoint.&lt;/p&gt;
&lt;h3 id=&quot;alternatives-to-reporting-with-csp&quot;&gt;Alternatives to reporting with CSP &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#alternatives-to-reporting-with-csp&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your site is hosted for you by a platform such as Blogger,
you may not have access to modify headers and add a CSP.
Instead, a viable alternative could be to use a website crawler to find issues across your site for you, such as
&lt;a href=&quot;https://httpschecker.net/how-it-works#httpsChecker&quot; rel=&quot;noopener&quot;&gt;HTTPSChecker&lt;/a&gt;
or
&lt;a href=&quot;https://github.com/bramus/mixed-content-scan&quot; rel=&quot;noopener&quot;&gt;Mixed Content Scan&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;upgrading-insecure-requests&quot;&gt;Upgrading insecure requests &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#upgrading-insecure-requests&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Browsers are beginning to upgrade and block insecure requests.
You can use CSP directives to force automatic upgrading or blocking of these assets.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.w3.org/TR/upgrade-insecure-requests/&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;upgrade-insecure-requests&lt;/code&gt;&lt;/a&gt;
CSP directive instructs the browser to upgrade insecure URLs before making network requests.&lt;/p&gt;
&lt;p&gt;As an example, if a page contains an image tag with an HTTP URL such as
&lt;code&gt;&amp;lt;img src=&amp;quot;http://example.com/image.jpg&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The browser instead makes a secure request for
&lt;code&gt;https://example.com/image.jpg&lt;/code&gt;, thus saving the user from mixed content.&lt;/p&gt;
&lt;p&gt;You can enable this behavior either by sending a &lt;code&gt;Content-Security-Policy&lt;/code&gt; header with this directive:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-markup&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;Content-Security-Policy: upgrade-insecure-requests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Or by embedding that same directive inline in the document&#39;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
section using a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Content-Security-Policy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;upgrade-insecure-requests&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;As with browser automatic upgrading, if the resource is not available over HTTPS,
the upgraded request fails and the resource is not loaded.
This maintains the security of your page. The &lt;code&gt;upgrade-insecure-requests&lt;/code&gt; directive will go further than automatic browser upgrading,
attempting to upgrade requests that the browser currently does not.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;upgrade-insecure-requests&lt;/code&gt; directive cascades into &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; documents,
ensuring the entire page is protected.&lt;/p&gt;
&lt;h3 id=&quot;blocking-all-mixed-content&quot;&gt;Blocking all mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#blocking-all-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An alternative option for protecting users is the
&lt;a href=&quot;https://www.w3.org/TR/mixed-content/#strict-checking&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;block-all-mixed-content&lt;/code&gt;&lt;/a&gt; CSP directive.
This directive instructs the browser to never load mixed content;
all mixed content resource requests are blocked,
including both active and passive mixed content.
This option also cascades into &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; documents, ensuring the entire page is mixed content free.&lt;/p&gt;
&lt;p&gt;A page can opt itself into this behavior either by sending a
&lt;code&gt;Content-Security-Policy&lt;/code&gt; header with this directive:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-markup&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;Content-Security-Policy: block-all-mixed-content&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Or by embedding that same directive inline in the document&#39;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
section using a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Content-Security-Policy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;block-all-mixed-content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;If you set both &lt;code&gt;upgrade-insecure-requests&lt;/code&gt; and &lt;code&gt;block-all-mixed-content&lt;/code&gt;
&lt;code&gt;upgrade-insecure-requests&lt;/code&gt; will be evaluated and used first.
The browser will not go on to block requests.
Therefore you should use one or the other.&lt;/p&gt;
&lt;/div&gt;
</content>
    <author>
      <name>Jo-el van Bergen</name>
    </author><author>
      <name>Rachel Andrew</name>
    </author>
  </entry>
  
  <entry>
    <title>Choose the right image format</title>
    <link href="https://web.dev/choose-the-right-image-format/"/>
    <updated>2018-08-30T00:00:00Z</updated>
    <id>https://web.dev/choose-the-right-image-format/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;The very first question you should ask yourself is whether an image is,
in fact, required to achieve the effect you are after.
Good design is simple and will also always yield the best performance.
If you can eliminate an image resource,
which often requires a large number of bytes relative to HTML, CSS, JavaScript and other assets on the page,
then that is always the best optimization strategy.
That said, a well-placed image can also communicate more information than a thousand words,
so it is up to you to find that balance.&lt;/p&gt;
&lt;p&gt;Next, you should consider if there is an alternative technology that could deliver the desired results,
but in a more efficient manner:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSS effects&lt;/strong&gt; (such as shadows or gradients) and CSS animations
can be used to produce resolution-independent assets that always look sharp at every resolution and zoom level,
often at a fraction of the bytes required by an image file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web fonts&lt;/strong&gt; enable use of beautiful typefaces
while preserving the ability to select, search,
and resize text—a significant improvement in usability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you ever find yourself encoding text in an image asset, stop and reconsider.
Great typography is critical to good design, branding, and readability,
but text-in-images delivers a poor user experience:
the text is not selectable, not searchable, not zoomable,
not accessible, and not friendly for high-DPI devices.
The use of web fonts requires its &lt;a href=&quot;https://www.igvita.com/2014/01/31/optimizing-web-font-rendering-performance/&quot; rel=&quot;noopener&quot;&gt;own set of optimizations&lt;/a&gt;,
but it addresses all of these concerns and is always a better choice for displaying text.&lt;/p&gt;
&lt;h2 id=&quot;choose-the-right-image-format&quot;&gt;Choose the right image format &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/choose-the-right-image-format/#choose-the-right-image-format&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are sure an image is the correct option, you should carefully select the right kind of image for the job.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Zoomed-in vector and raster images&quot; decoding=&quot;async&quot; height=&quot;313&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 585px) 585px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/dJuB2DQcbhtwD5VdPVlR.png?auto=format&amp;w=1170 1170w&quot; width=&quot;585&quot; /&gt;
  &lt;figcaption&gt;Zoomed-in vector image (L) raster image (R)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Vector_graphics&quot; rel=&quot;noopener&quot;&gt;Vector graphics&lt;/a&gt;
use lines, points, and polygons to represent an image.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Raster_graphics&quot; rel=&quot;noopener&quot;&gt;Raster graphics&lt;/a&gt;
represent an image by encoding the individual values of each pixel within a rectangular grid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each format has its own set of pros and cons.
Vector formats are ideally suited for images that consist of simple geometric shapes such as logos, text, or icons.
They deliver sharp results at every resolution and zoom setting,
which makes them an ideal format for high-resolution screens and assets that need to be displayed at varying sizes.&lt;/p&gt;
&lt;p&gt;However, vector formats fall short when the scene is complicated (for example, a photo):
the amount of SVG markup to describe all the shapes can be prohibitively high
and the output may still not look &amp;quot;photorealistic&amp;quot;.
When that&#39;s the case, that&#39;s when you should be using a raster image format
such as PNG, JPEG, or WebP.&lt;/p&gt;
&lt;p&gt;Raster images do not have the same nice properties of being resolution or zoom independent
—when you scale up a raster image you&#39;ll see jagged and blurry graphics.
As a result, you may need to save multiple versions of a raster image at various resolutions
to deliver the optimal experience to your users.&lt;/p&gt;
&lt;h2 id=&quot;implications-of-high-resolution-screens&quot;&gt;Implications of high-resolution screens &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/choose-the-right-image-format/#implications-of-high-resolution-screens&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are two different kinds of pixels: CSS pixels and device pixels.
A single CSS pixel may correspond directly to a single device pixel, or may be backed by multiple device pixels.
What&#39;s the point? Well, the more device pixels there are, the finer the detail of the displayed content on the screen.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Three images showing the difference between CSS pixels and device pixels.&quot; decoding=&quot;async&quot; height=&quot;205&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 470px) 470px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/oQV7qJ9fUMkYsKlUMrL4.png?auto=format&amp;w=940 940w&quot; width=&quot;470&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;The difference between CSS pixels and device pixels.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;High DPI (HiDPI) screens produce beautiful results, but there is one obvious tradeoff:
image assets require more detail in order to take advantage of the higher device pixel counts.
The good news is, vector images are ideally suited for this task,
as they can be rendered at any resolution with sharp results—
you might incur a higher processing cost to render the finer detail,
but the underlying asset is the same and is resolution independent.&lt;/p&gt;
&lt;p&gt;On the other hand, raster images pose a much larger challenge because they encode image data on a per-pixel basis.
Hence, the larger the number of pixels, the larger the filesize of a raster image.
As an example, let&#39;s consider the difference between a photo asset displayed at 100x100 (CSS) pixels:&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Screen resolution&lt;/th&gt;
    &lt;th&gt;Total pixels&lt;/th&gt;
    &lt;th&gt;Uncompressed filesize (4 bytes per pixel)&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;resolution&quot;&gt;1x&lt;/td&gt;
  &lt;td data-th=&quot;total pixels&quot;&gt;100 x 100 = 10,000&lt;/td&gt;
  &lt;td data-th=&quot;filesize&quot;&gt;40,000 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;resolution&quot;&gt;2x&lt;/td&gt;
  &lt;td data-th=&quot;total pixels&quot;&gt;100 x 100 x 4 = 40,000&lt;/td&gt;
  &lt;td data-th=&quot;filesize&quot;&gt;160,000 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;resolution&quot;&gt;3x&lt;/td&gt;
  &lt;td data-th=&quot;total pixels&quot;&gt;100 x 100 x 9 = 90,000&lt;/td&gt;
  &lt;td data-th=&quot;filesize&quot;&gt;360,000 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;When we double the resolution of the physical screen,
the total number of pixels increases by a factor of four:
double the number of horizontal pixels, times double the number of vertical pixels.
Hence, a &amp;quot;2x&amp;quot; screen not just doubles, but quadruples the number of required pixels!&lt;/p&gt;
&lt;p&gt;So, what does this mean in practice?
High-resolution screens enable you to deliver beautiful images, which can be a great product feature.
However, high-resolution screens also require high-resolution images, therefore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prefer vector images whenever possible as they are resolution-independent and always deliver sharp results.&lt;/li&gt;
&lt;li&gt;If a raster image is required, serve &lt;a href=&quot;https://web.dev/serve-responsive-images/&quot;&gt;responsive images&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;features-of-different-raster-image-formats&quot;&gt;Features of different raster image formats &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/choose-the-right-image-format/#features-of-different-raster-image-formats&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to different lossy and lossless compression algorithms,
different image formats support different features such as animation and transparency (alpha) channels.
As a result, the choice of the &amp;quot;right format&amp;quot; for a particular image is a combination of desired visual results and functional requirements.&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Format&lt;/th&gt;
    &lt;th&gt;Transparency&lt;/th&gt;
    &lt;th&gt;Animation&lt;/th&gt;
    &lt;th&gt;Browser&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;format&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Portable_Network_Graphics&quot;&gt;PNG&lt;/a&gt;&lt;/td&gt;
  &lt;td data-th=&quot;transparency&quot;&gt;Yes&lt;/td&gt;
  &lt;td data-th=&quot;animation&quot;&gt;No&lt;/td&gt;
  &lt;td data-th=&quot;browser&quot;&gt;All&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;format&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/JPEG&quot;&gt;JPEG&lt;/a&gt;&lt;/td&gt;
  &lt;td data-th=&quot;transparency&quot;&gt;No&lt;/td&gt;
  &lt;td data-th=&quot;animation&quot;&gt;No&lt;/td&gt;
  &lt;td data-th=&quot;browser&quot;&gt;All&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;format&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/WebP&quot;&gt;WebP&lt;/a&gt;&lt;/td&gt;
  &lt;td data-th=&quot;transparency&quot;&gt;Yes&lt;/td&gt;
  &lt;td data-th=&quot;animation&quot;&gt;Yes&lt;/td&gt;
  &lt;td data-th=&quot;browser&quot;&gt;All modern browsers. See &lt;a href=&quot;https://caniuse.com/#feat=webp&quot;&gt;Can I use?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;There are two universally supported raster image formats: PNG and JPEG.
In addition to these formats, modern browsers support the newer format WebP,
which offers better overall compression and more features. So, which format should you use?&lt;/p&gt;
&lt;p&gt;The WebP format will generally provide better compression than older formats,
and should be used where possible.
You can use WebP along with another image format as a fallback.
See &lt;a href=&quot;https://web.dev/serve-images-webp/&quot;&gt;Use WebP images&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;In terms of older image formats, consider the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Do you need animation? Use &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;What about GIF? GIF limits the color palette to at most 256 colors,
and creates significantly larger file sizes than &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements. See
&lt;a href=&quot;https://web.dev/replace-gifs-with-videos/&quot;&gt;Replace animated GIFs with video&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do you need to preserve fine detail with highest resolution? Use PNG.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;PNG does not apply any lossy compression algorithms beyond the choice of the size of the color palette.
As a result, it will produce the highest quality image,
but at a cost of significantly higher filesize than other formats. Use judiciously.&lt;/li&gt;
&lt;li&gt;If the image asset contains imagery composed of geometric shapes, consider converting it to a vector (SVG) format!&lt;/li&gt;
&lt;li&gt;If the image asset contains text, stop and reconsider. Text in images is not selectable, searchable, or &amp;quot;zoomable&amp;quot;.
If you need to convey a custom look (for branding or other reasons), use a web font instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Are you optimizing a photo, screenshot, or a similar image asset? Use JPEG.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;JPEG uses a combination of lossy and lossless optimization to reduce filesize of the image asset. Try several JPEG quality levels to find the best quality versus filesize tradeoff for your asset.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, note that if you are using a WebView to render content in your platform-specific application,
then you have full control of the client and can use WebP exclusively!
Facebook and many others use WebP to deliver all of their images within their applications—
the savings are definitely worth it.&lt;/p&gt;
</content>
    <author>
      <name>Ilya Grigorik</name>
    </author>
  </entry>
  
  <entry>
    <title>Choose the correct level of compression</title>
    <link href="https://web.dev/compress-images/"/>
    <updated>2018-08-30T00:00:00Z</updated>
    <id>https://web.dev/compress-images/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Images often account for most of the downloaded bytes on a web page
and also often occupy a significant amount of visual space.
As a result,
optimizing images can often yield some of the largest byte savings and performance improvements for your website:
the fewer bytes the browser has to download,
the less competition there is for the client&#39;s bandwidth
and the faster the browser can download and render useful content on the screen.&lt;/p&gt;
&lt;p&gt;Image optimization is both an art and science:
an art because there is no one definitive answer for how best to compress an individual image,
and a science because there are many well developed techniques
and algorithms that can significantly reduce the size of an image.
Finding the optimal settings for your image requires careful analysis along many dimensions:
format capabilities, content of encoded data, quality, pixel dimensions, and more.&lt;/p&gt;
&lt;h2 id=&quot;optimizing-vector-images&quot;&gt;Optimizing vector images &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compress-images/#optimizing-vector-images&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All modern browsers support Scalable Vector Graphics (SVG),
which is an XML-based image format for two-dimensional graphics.
You can embed the SVG markup directly on the page
or as an external resource.
Most vector-based drawing software can create SVG files or you can
write them by hand directly in your favorite text editor.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;baseProfile&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tiny&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Layer_1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;xlink&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/1999/xlink&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 612 792&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xml:&lt;/span&gt;space&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;preserve&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;XMLID_1_&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;red&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;black&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;40&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The above example renders the below simple circle shape with a black outline and red background
and was exported from Adobe Illustrator.&lt;/p&gt;

&lt;!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --&gt;
&lt;p&gt;&lt;svg version=&quot;1.2&quot; baseProfile=&quot;tiny&quot; id=&quot;Layer_1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 612 120&quot; xml:space=&quot;preserve&quot;&gt;
&lt;g id=&quot;XMLID_1_&quot;&gt;
&lt;g&gt;
&lt;circle fill=&quot;red&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; stroke-miterlimit=&quot;10&quot; cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;40&quot;&gt;&lt;/circle&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;As you can tell, it contains a lot of metadata,
such as layer information, comments, and XML namespaces that are often unnecessary to render the asset in the browser.
As a result, it is always a good idea to minify your SVG files by running through a tool like &lt;a href=&quot;https://github.com/svg/svgo&quot; rel=&quot;noopener&quot;&gt;SVGO&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Case in point, SVGO reduces the size of the above SVG file generated by Illustrator by 58%,
taking it from 470 to 199 bytes.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;baseProfile&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tiny&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 612 792&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;red&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;40&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Because SVG is an XML-based format,
you can also apply GZIP compression to reduce its transfer size—make sure your server is configured to compress SVG assets!&lt;/p&gt;
&lt;p&gt;A raster image is simply a two-dimensional grid of individual &amp;quot;pixels&amp;quot;—for example,
a 100x100 pixel image is a sequence of 10,000 pixels.
In turn, each pixel stores the &amp;quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/RGBA_color_space&quot; rel=&quot;noopener&quot;&gt;RGBA&lt;/a&gt;&amp;quot; values:
(R) red channel, (G) green channel, (B) blue channel, and (A) alpha (transparency) channel.&lt;/p&gt;
&lt;p&gt;Internally, the browser allocates 256 values (shades) for each channel,
which translates to 8 bits per channel (2 ^ 8 = 256),
and 4 bytes per pixel (4 channels x 8 bits = 32 bits = 4 bytes).
As a result, if we know the dimensions of the grid we can easily calculate the filesize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100x100 pixel image is composed of 10,000 pixels&lt;/li&gt;
&lt;li&gt;10,000 pixels x 4 bytes = 40,000 bytes&lt;/li&gt;
&lt;li&gt;40,000 bytes / 1024 = 39 KB&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;As an aside, regardless of the image format used to transfer the data from the server to the client,
when the image is decoded by the browser,
each pixel always occupies 4 bytes of memory.
This can be an important constraint for large images and devices which do not have a lot of available memory
—for example, low-end mobile devices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Dimensions&lt;/th&gt;
    &lt;th&gt;Pixels&lt;/th&gt;
    &lt;th&gt;File size&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;dimensions&quot;&gt;100 x 100&lt;/td&gt;
  &lt;td data-th=&quot;pixels&quot;&gt;10,000&lt;/td&gt;
  &lt;td data-th=&quot;file size&quot;&gt;39 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;dimensions&quot;&gt;200 x 200&lt;/td&gt;
  &lt;td data-th=&quot;pixels&quot;&gt;40,000&lt;/td&gt;
  &lt;td data-th=&quot;file size&quot;&gt;156 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;dimensions&quot;&gt;300 x 300&lt;/td&gt;
  &lt;td data-th=&quot;pixels&quot;&gt;90,000&lt;/td&gt;
  &lt;td data-th=&quot;file size&quot;&gt;351 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;dimensions&quot;&gt;500 x 500&lt;/td&gt;
  &lt;td data-th=&quot;pixels&quot;&gt;250,000&lt;/td&gt;
  &lt;td data-th=&quot;file size&quot;&gt;977 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td data-th=&quot;dimensions&quot;&gt;800 x 800&lt;/td&gt;
  &lt;td data-th=&quot;pixels&quot;&gt;640,000&lt;/td&gt;
  &lt;td data-th=&quot;file size&quot;&gt;2500 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;39 KB for a 100x100 pixel image may not seem like a big deal,
but the filesize quickly explodes for larger images and makes image assets both slow and expensive to download.
This post has so far only focused on the &amp;quot;uncompressed&amp;quot; image format.
Thankfully, a lot can be done to reduce the image file size.&lt;/p&gt;
&lt;p&gt;One simple strategy is to reduce the &amp;quot;bit-depth&amp;quot; of the image from 8 bits per channel to a smaller color palette:
8 bits per channel gives us 256 values per channel and 16,777,216 (256 ^ 3) colors in total.
What if you reduce the palette to 256 colors?
Then you would only need 8 bits in total for the RGB channels and immediately save two bytes per pixel—that&#39;s 50% compression savings over the original 4 bytes per pixel format!&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Compression artifacts&quot; decoding=&quot;async&quot; height=&quot;266&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 612px) 612px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/ssek7uXzhs67joEbp0P8.png?auto=format&amp;w=1224 1224w&quot; width=&quot;612&quot; /&gt;
  &lt;figcaption&gt;Left to right (PNG): 32-bit (16M colors), 7-bit (128 colors), 5-bit (32 colors).&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Complex scenes with gradual color transitions (for example, gradients or sky)
require larger color palettes to avoid visual artifacts such as the pixelated sky in the 5-bit asset.
On the other hand, if the image only uses a few colors,
then a large palette is simply wasting precious bits!&lt;/p&gt;
&lt;p&gt;Next, once you&#39;ve optimized the data stored in individual pixels you could get more clever and look at nearby pixels as well:
turns out, many images, and especially photos, have many nearby pixels with similar colors—
for example, the sky, repeating textures, and so on.
Using this information to your advantage the compressor can apply &lt;a href=&quot;https://en.wikipedia.org/wiki/Delta_encoding&quot; rel=&quot;noopener&quot;&gt;delta encoding&lt;/a&gt;
where instead of storing the individual values for each pixel,
you can store the difference between nearby pixels:
if the adjacent pixels are the same, then the delta is &amp;quot;zero&amp;quot; and you only need to store a single bit!
But why stop there…&lt;/p&gt;
&lt;p&gt;The human eye has different level of sensitivity to different colors:
you can optimize your color encoding to account for this by reducing or increasing the palette for those colors.
&amp;quot;Nearby&amp;quot; pixels form a two-dimensional grid. This means that each pixel has multiple neighbors:
you can use this fact to further improve delta encoding.
Instead of looking at just the immediate neighbors for each pixel,
you can look at larger blocks of nearby pixels and encode different blocks with different settings.&lt;/p&gt;
&lt;p&gt;As you can tell, image optimization gets complicated quickly (or fun, depending on your perspective),
and is an active area of academic and commercial research.
Images occupy a lot of bytes and there is a lot of value in developing better image compression techniques!
If you&#39;re curious to learn more, head to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Image_compression&quot; rel=&quot;noopener&quot;&gt;Wikipedia page&lt;/a&gt;,
or check out the &lt;a href=&quot;https://developers.google.com/speed/webp/docs/compression&quot; rel=&quot;noopener&quot;&gt;WebP compression techniques whitepaper&lt;/a&gt; for a hands-on example.&lt;/p&gt;
&lt;p&gt;So, once again, this is all great, but also very academic:
how does it help you to optimize images on your site?
Well, it&#39;s important to understand the shape of the problem: RGBA pixels, bit-depth, and various optimization techniques.
All of these concepts are critical to understand and keep in mind before you dive into the discussions of various raster image formats.&lt;/p&gt;
&lt;h2 id=&quot;lossless-versus-lossy-image-compression&quot;&gt;Lossless versus lossy image compression &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compress-images/#lossless-versus-lossy-image-compression&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For certain types of data, such as source code for a page, or an executable file,
it is critical that a compressor does not alter or lose any of the original information:
a single missing or wrong bit of data could completely change the meaning of the contents of the file,
or worse, break it entirely.
For some other types of data, such as images, audio, and video,
it may be perfectly acceptable to deliver an &amp;quot;approximate&amp;quot; representation of the original data.&lt;/p&gt;
&lt;p&gt;In fact, due to how the eye works,
we can often get away with discarding some information about each pixel in order to reduce the filesize of an image—
for example, our eyes have different sensitivity to different colors,
which means that we can use fewer bits to encode some colors.
As a result, a typical image optimization pipeline consists of two high level steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Image is processed with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Lossy_compression&quot; rel=&quot;noopener&quot;&gt;lossy&lt;/a&gt; filter that eliminates some pixel data.&lt;/li&gt;
&lt;li&gt;Image is processed with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Lossless_compression&quot; rel=&quot;noopener&quot;&gt;lossless&lt;/a&gt; filter that compresses the pixel data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first step is optional,
and the exact algorithm will depend on the particular image format,
but it is important to understand that any image can undergo a lossy compression step to reduce its size.
In fact, the difference between various image formats, such as GIF, PNG, JPEG, and others,
is in the combination of the specific algorithms they use (or omit) when applying the lossy and lossless steps.&lt;/p&gt;
&lt;p&gt;So, what is the &amp;quot;optimal&amp;quot; configuration of lossy and lossless optimization?
The answer depends on the image contents and your own criteria such as the tradeoff between filesize and artifacts introduced by lossy compression:
In some cases, you may want to skip lossy optimization to communicate intricate detail in its full fidelity.
In other cases, you may be able to apply aggressive lossy optimization to reduce the filesize of the image asset.
This is where your own judgment and context need to come into play—there is no one universal setting.&lt;/p&gt;
&lt;p&gt;As a hands-on example, when using a lossy format such as JPEG,
the compressor will typically expose a customizable &amp;quot;quality&amp;quot; setting
(for example, the quality slider provided by the &amp;quot;Save for Web&amp;quot; functionality in Adobe Photoshop),
which is typically a number between 1 and 100 that controls the inner workings of the specific collection of lossy and lossless algorithms.
For best results, experiment with various quality settings for your images,
and don&#39;t be afraid to dial down the quality—the visual results are often very good and the filesize savings can be quite large.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Note that quality levels for different image formats are not directly comparable due to differences in algorithms used to encode the image:
quality 90 JPEG will produce a very different result than a quality 90 WebP.
In fact, even quality levels for the same image format may produce visibly different output based on implementation of the compressor!&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;image-optimization-checklist&quot;&gt;Image optimization checklist &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compress-images/#image-optimization-checklist&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some tips and techniques to keep in mind as you work on optimizing your images:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prefer vector formats:&lt;/strong&gt; vector images are resolution and scale independent,
which makes them a perfect fit for the multi-device and high-resolution world.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minify and compress SVG assets:&lt;/strong&gt; XML markup produced by most drawing applications
often contains unnecessary metadata which can be removed;
Ensure that your servers are configured to apply GZIP compression for SVG assets.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prefer WebP over older raster formats&lt;/strong&gt;: &lt;a href=&quot;https://web.dev/serve-images-webp/&quot;&gt;WebP images&lt;/a&gt; will usually be far smaller than older images.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pick best raster image format:&lt;/strong&gt; determine your functional requirements and &lt;a href=&quot;https://web.dev/choose-the-right-image-format/&quot;&gt;select the one that suits each particular asset&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Experiment with optimal quality settings for raster formats:&lt;/strong&gt; don&#39;t be afraid to dial down the &amp;quot;quality&amp;quot; settings,
the results are often very good and byte savings are significant.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove unnecessary image metadata:&lt;/strong&gt; many raster images contain unnecessary metadata about the asset:
geo information, camera information, and so on.
Use appropriate tools to strip this data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serve scaled images:&lt;/strong&gt; &lt;a href=&quot;https://web.dev/serve-images-with-correct-dimensions/&quot;&gt;resize images&lt;/a&gt; and ensure that the &amp;quot;display&amp;quot; size is as close as possible to the &amp;quot;natural&amp;quot; size of the image.
Pay close attention to large images in particular, as they account for largest overhead when resized!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automate, automate, automate:&lt;/strong&gt; invest into automated tools and infrastructure that will ensure that all of your image assets are always optimized.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Ilya Grigorik</name>
    </author>
  </entry>
  
  <entry>
    <title>Lazy-loading images</title>
    <link href="https://web.dev/lazy-loading-images/"/>
    <updated>2019-08-16T00:00:00Z</updated>
    <id>https://web.dev/lazy-loading-images/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Images can appear on a webpage due to being inline in the HTML as &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements
or as CSS background images. In this post you will find out how to lazy-load both types of image.&lt;/p&gt;
&lt;h2 id=&quot;images-inline&quot;&gt;Inline images &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lazy-loading-images/#images-inline&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most common lazy-loading candidates are images as used in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements.
With inline images we have three options for lazy-loading,
which may be used in combination for the best compatibility across browsers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/lazy-loading-images/#images-inline-browser-level&quot;&gt;Using browser-level lazy-loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/lazy-loading-images/#images-inline-intersection-observer&quot;&gt;Using Intersection Observer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/lazy-loading-images/#images-inline-event-handlers&quot;&gt;Using scroll and resize event handlers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;images-inline-browser-level&quot;&gt;Using browser-level lazy-loading &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lazy-loading-images/#images-inline-browser-level&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Chrome and Firefox both support lazy-loading with the &lt;code&gt;loading&lt;/code&gt; attribute.
This attribute can be added to &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements, and also to &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; elements.
A value of &lt;code&gt;lazy&lt;/code&gt; tells the browser to load the image immediately if it is in the viewport,
and to fetch other images when the user scrolls near them.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Note &lt;code&gt;&amp;lt;iframe loading=&amp;quot;lazy&amp;quot;&amp;gt;&lt;/code&gt; is currently non-standard.
While implemented in Chromium, it does not yet have a specification and is subject to future change when this does happen.
We suggest not to lazy-load iframes using the &lt;code&gt;loading&lt;/code&gt; attribute until it becomes part of the specification.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;See the &lt;code&gt;loading&lt;/code&gt; field of MDN&#39;s
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;browser compatibility&lt;/a&gt;
table for details of browser support.
If the browser does not support lazy-loading then the attribute will be ignored
and images will load immediately, as normal.&lt;/p&gt;
&lt;p&gt;For most websites, adding this attribute to inline images will be a performance boost
and save users loading images that they may not ever scroll to.
If you have large numbers of images and want to be sure that users of browsers without support for lazy-loading benefit
you will need to combine this with one of the methods explained next.&lt;/p&gt;
&lt;p&gt;To learn more, check out &lt;a href=&quot;https://web.dev/browser-level-image-lazy-loading/&quot;&gt;Browser-level lazy-loading for the web&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;images-inline-intersection-observer&quot;&gt;Using Intersection Observer &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lazy-loading-images/#images-inline-intersection-observer&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To polyfill lazy-loading of &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements, we use JavaScript to check if they&#39;re in the
viewport. If they are, their &lt;code&gt;src&lt;/code&gt; (and sometimes &lt;code&gt;srcset&lt;/code&gt;) attributes are
populated with URLs to the desired image content.&lt;/p&gt;
&lt;p&gt;If you&#39;ve written lazy-loading code before, you may have accomplished your task
by using event handlers such as &lt;code&gt;scroll&lt;/code&gt; or &lt;code&gt;resize&lt;/code&gt;. While this approach is the
most compatible across browsers, modern browsers offer a more performant and
efficient way to do the work of checking element visibility via &lt;a href=&quot;https://developers.google.com/web/updates/2016/04/intersectionobserver&quot; rel=&quot;noopener&quot;&gt;the
Intersection Observer API&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Intersection Observer is not supported in all browsers, notably IE11 and below.
If compatibility across browsers is crucial,
be sure to read &lt;a href=&quot;https://web.dev/lazy-loading-images/#images-inline-event-handlersy&quot;&gt;the next section&lt;/a&gt;,
which shows you how to lazy-load images using less performant (but more compatible!) scroll and resize event handlers.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Intersection Observer is easier to use and read than code relying on various
event handlers, because you only need to register an observer to watch
elements rather than writing tedious element visibility detection code. All
that&#39;s left to do is to decide what to do when an element is visible.
Let&#39;s assume this basic markup pattern for your lazily loaded &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lazy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;placeholder-image.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image-to-lazy-load-1x.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image-to-lazy-load-2x.jpg 2x, image-to-lazy-load-1x.jpg 1x&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;I&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;m an image!&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;There are three relevant pieces of this markup that you should focus on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;class&lt;/code&gt; attribute, which is what you&#39;ll select the element with in
JavaScript.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;src&lt;/code&gt; attribute, which references a placeholder image that will appear when
the page first loads.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;data-src&lt;/code&gt; and &lt;code&gt;data-srcset&lt;/code&gt; attributes, which are placeholder attributes
containing the URL for the image you&#39;ll load once the element is in the viewport.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now let&#39;s see how to use Intersection Observer in JavaScript to lazy-load
images using this markup pattern:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;DOMContentLoaded&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; lazyImages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;img.lazy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;IntersectionObserver&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lazyImageObserver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; observer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      entries&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isIntersecting&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lazyImage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;          lazyImage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; lazyImage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dataset&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;          lazyImage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;srcset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; lazyImage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dataset&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;srcset&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;          lazyImage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lazy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;          lazyImageObserver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unobserve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lazyImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    lazyImages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;lazyImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      lazyImageObserver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lazyImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Possibly fall back to event handlers here&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;On the document&#39;s &lt;code&gt;DOMContentLoaded&lt;/code&gt; event, this script queries the DOM for all
&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements with a class of &lt;code&gt;lazy&lt;/code&gt;. If Intersection Observer is available,
create a new observer that runs a callback when &lt;code&gt;img.lazy&lt;/code&gt; elements enter the
viewport.&lt;/p&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 420px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/lazy-intersection-observer?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=index.html&amp;previewSize=0&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;lazy-intersection-observer on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Intersection Observer is available in all modern browsers.
Therefore using it as a polyfill for &lt;code&gt;loading=&amp;quot;lazy&amp;quot;&lt;/code&gt; will ensure that lazy-loading is available for most visitors.
It is not available in Internet Explorer. If Internet Explorer support is critical, read on.&lt;/p&gt;
&lt;h3 id=&quot;images-inline-event-handlers&quot;&gt;Using event handlers for Internet Explorer support &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lazy-loading-images/#images-inline-event-handlers&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While you &lt;em&gt;should&lt;/em&gt; use Intersection Observer for lazy-loading, your application
requirements may be such that browser compatibility is critical. &lt;a href=&quot;https://github.com/w3c/IntersectionObserver/tree/master/polyfill&quot; rel=&quot;noopener&quot;&gt;You &lt;em&gt;can&lt;/em&gt;
polyfill Intersection Observer
support&lt;/a&gt; (and
this would be easiest), but you could also fall back to code using
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/scroll&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;scroll&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/resize&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/a&gt;, and
possibly
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/orientationchange&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;orientationchange&lt;/code&gt;&lt;/a&gt;
event handlers in concert with
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;getBoundingClientRect&lt;/code&gt;&lt;/a&gt;
to determine whether an element is in the viewport.&lt;/p&gt;
&lt;p&gt;Assuming the same markup pattern from before,
this Glitch example uses &lt;code&gt;getBoundingClientRect&lt;/code&gt; in a &lt;code&gt;scroll&lt;/code&gt; event handler to check if
any of &lt;code&gt;img.lazy&lt;/code&gt; elements are in the viewport. A &lt;code&gt;setTimeout&lt;/code&gt; call is used to
delay processing, and an &lt;code&gt;active&lt;/code&gt; variable contains the processing state which
is used to throttle function calls. As images are lazy-loaded, they&#39;re removed
from the elements array. When the elements array reaches a &lt;code&gt;length&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt;, the
scroll event handler code is removed.&lt;/p&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 420px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/lazy-loading-fallback?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=lazy.js&amp;previewSize=0&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;lazy-loading-fallback on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;While this code works in pretty much any browser, it has potential performance
issues in that repetitive &lt;code&gt;setTimeout&lt;/code&gt; calls can be wasteful, even if the code
within them is throttled. In this example, a check is being run every 200
milliseconds on document scroll or window resize regardless of whether there&#39;s
an image in the viewport or not. Plus, the tedious work of tracking how many
elements are left to lazy-load and unbinding the scroll event handler are left
to the developer. You can find out more about this technique in
&lt;a href=&quot;https://css-tricks.com/the-complete-guide-to-lazy-loading-images/#method-1-trigger-the-image-load-using-javascript-events&quot; rel=&quot;noopener&quot;&gt;The Complete Guide to Lazy Loading Images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Simply put: Use browser-level lazy-loading with a fallback Intersection Observer implementation wherever possible, and only use event
handlers if the widest possible compatibility is a critical application
requirement.&lt;/p&gt;
&lt;h2 id=&quot;images-css&quot;&gt;Images in CSS &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lazy-loading-images/#images-css&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags are the most common way of using images on web pages, images
can also be invoked via the CSS
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/background-image&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt;
property (and other properties). Browser-level lazy-loading does not apply to CSS background images,
so you need to consider other methods if you have background images to lazy-load.&lt;/p&gt;
&lt;p&gt;Unlike &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements which load regardless
of their visibility, image loading behavior in CSS is done with more
speculation. When &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model&quot; rel=&quot;noopener&quot;&gt;the document and CSS object
models&lt;/a&gt;
and &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction&quot; rel=&quot;noopener&quot;&gt;render
tree&lt;/a&gt;
are built, the browser examines how CSS is applied to a document before
requesting external resources. If the browser has determined a CSS rule
involving an external resource doesn&#39;t apply to the document as it&#39;s currently
constructed, the browser doesn&#39;t request it.&lt;/p&gt;
&lt;p&gt;This speculative behavior can be used to defer the loading of images in CSS by
using JavaScript to determine when an element is within the viewport, and
subsequently applying a class to that element that applies styling invoking a
background image. This causes the image to be downloaded at the time of need
instead of at initial load. For example, let&#39;s take an element that contains a
large hero background image:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lazy-background&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Here&#39;s a hero heading to get your attention!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Here&#39;s hero copy to convince you to buy a thing!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/buy-a-thing&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Buy a thing!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;div.lazy-background&lt;/code&gt; element would normally contain the hero background
image invoked by some CSS. In this lazy-loading example, however, you can isolate
the &lt;code&gt;div.lazy-background&lt;/code&gt; element&#39;s &lt;code&gt;background-image&lt;/code&gt; property via a &lt;code&gt;visible&lt;/code&gt;
class added to the element when it&#39;s in the viewport:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.lazy-background&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string url&quot;&gt;&quot;hero-placeholder.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* Placeholder image */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.lazy-background.visible&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string url&quot;&gt;&quot;hero.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* The final image */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;From here, use JavaScript to check if the element is in the viewport (with
Intersection Observer!), and add the &lt;code&gt;visible&lt;/code&gt; class to the
&lt;code&gt;div.lazy-background&lt;/code&gt; element at that time, which loads the image:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;DOMContentLoaded&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; lazyBackgrounds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.lazy-background&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;IntersectionObserver&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lazyBackgroundObserver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; observer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      entries&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isIntersecting&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;visible&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;          lazyBackgroundObserver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unobserve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    lazyBackgrounds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;lazyBackground&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      lazyBackgroundObserver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lazyBackground&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 420px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/lazy-background?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=index.html&amp;previewSize=0&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;lazy-background on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;As indicated earlier, if you need Internet Explorer support for lazy-loading of background images,
you will need to polyfill the Intersection Observer code, due to lack of support in that browser.&lt;/p&gt;
&lt;h2 id=&quot;libraries&quot;&gt;Lazy-loading libraries &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lazy-loading-images/#libraries&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following libraries can be used to lazy-load images.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aFarkas/lazysizes&quot; rel=&quot;noopener&quot;&gt;lazysizes&lt;/a&gt; is a full-featured lazy
loading library that lazy-loads images and iframes. The pattern it uses is quite
similar to the code examples shown here in that it automatically binds to a
&lt;code&gt;lazyload&lt;/code&gt; class on &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements, and requires you to specify image URLs in
&lt;code&gt;data-src&lt;/code&gt; and/or &lt;code&gt;data-srcset&lt;/code&gt; attributes, the contents of which are swapped
into &lt;code&gt;src&lt;/code&gt; and/or &lt;code&gt;srcset&lt;/code&gt; attributes, respectively. It uses Intersection
Observer (which you can polyfill), and can be extended with &lt;a href=&quot;https://github.com/aFarkas/lazysizes#available-plugins-in-this-repo&quot; rel=&quot;noopener&quot;&gt;a number of
plugins&lt;/a&gt; to
do things like lazy-load video. &lt;a href=&quot;https://web.dev/use-lazysizes-to-lazyload-images/&quot;&gt;Find out more about using lazysizes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/verlok/vanilla-lazyload&quot; rel=&quot;noopener&quot;&gt;vanilla-lazyload&lt;/a&gt; is a
lightweight option for lazy-loading images, background images, videos, iframes,
and scripts. It leverages Intersection Observer, supports responsive images, and
enables browser-level lazy loading.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ApoorvSaxena/lozad.js&quot; rel=&quot;noopener&quot;&gt;lozad.js&lt;/a&gt; is a another lightweight
option that uses Intersection Observer only. As such, it&#39;s highly performant,
but will need to be polyfilled before you can use it on older browsers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/malchata/yall.js&quot; rel=&quot;noopener&quot;&gt;yall.js&lt;/a&gt; is a library that uses
Intersection Observer and falls back to event handlers. It&#39;s compatible with IE11
and major browsers.&lt;/li&gt;
&lt;li&gt;If you need a React-specific lazy-loading library, consider
&lt;a href=&quot;https://github.com/jasonslyvia/react-lazyload&quot; rel=&quot;noopener&quot;&gt;react-lazyload&lt;/a&gt;. While it
doesn&#39;t use Intersection Observer, it &lt;em&gt;does&lt;/em&gt; provide a familiar method of lazy
loading images for those accustomed to developing applications with React.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Jeremy Wagner</name>
    </author><author>
      <name>Rachel Andrew</name>
    </author>
  </entry>
  
  <entry>
    <title>Use lazy-loading to improve loading speed</title>
    <link href="https://web.dev/lazy-loading/"/>
    <updated>2019-08-16T00:00:00Z</updated>
    <id>https://web.dev/lazy-loading/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;The portion of
&lt;a href=&quot;http://beta.httparchive.org/reports/state-of-images?start=earliest&amp;amp;end=latest&quot; rel=&quot;noopener&quot;&gt;images&lt;/a&gt;
and &lt;a href=&quot;http://beta.httparchive.org/reports/page-weight#bytesVideo&quot; rel=&quot;noopener&quot;&gt;video&lt;/a&gt; in the
typical payload of a website can be significant.
Unfortunately, project stakeholders may be unwilling to cut any media resources from their existing
applications.
Such impasses are frustrating,
especially when all parties involved want to improve site performance,
but can&#39;t agree on how to get there.
Fortunately, lazy-loading is a solution that lowers initial page payload &lt;em&gt;and&lt;/em&gt;
load time, but doesn&#39;t skimp on content.&lt;/p&gt;
&lt;h2 id=&quot;what&quot;&gt;What is lazy-loading? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lazy-loading/#what&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lazy-loading is a technique that defers loading of non-critical resources at page
load time. Instead, these non-critical resources are loaded at the moment of
need. Where images are concerned, &amp;quot;non-critical&amp;quot; is often synonymous with
&amp;quot;off-screen&amp;quot;. If you&#39;ve used Lighthouse and examined some opportunities for
improvement, you may have seen some guidance in this realm in the form of the
&lt;a href=&quot;https://web.dev/offscreen-images/&quot;&gt;Defer offscreen images audit&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of the Defer offscreen images audit in Lighthouse.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;102&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/63NnMISWUUWD3mvAliwe.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;One of Lighthouse&#39;s performance audits is to
identify off screen images, which are candidates for lazy-loading.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You&#39;ve probably already seen lazy-loading in action, and it goes something like
this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You arrive at a page, and begin to scroll as you read content.&lt;/li&gt;
&lt;li&gt;At some point, you scroll a placeholder image into the viewport.&lt;/li&gt;
&lt;li&gt;The placeholder image is suddenly replaced by the final image.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of image lazy-loading can be found on the popular publishing platform
&lt;a href=&quot;https://medium.com/&quot; rel=&quot;noopener&quot;&gt;Medium&lt;/a&gt;, which loads lightweight placeholder images at
page load, and replaces them with lazily-loaded images as they&#39;re scrolled into
the viewport.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of the website Medium in the browsing, demonstrating lazy-loading in action. The blurry placeholder is on the left, and the loaded resource is on the right.&quot; decoding=&quot;async&quot; height=&quot;493&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/p5ahQ67QtZ20bgto7Kpy.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;An example of image lazy-loading in action. A
placeholder image is loaded at page load (left), and when scrolled into the
viewport, the final image loads at the time of need.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you&#39;re unfamiliar with lazy-loading, you might be wondering just how useful
the technique is, and what its benefits are. Read on to find out!&lt;/p&gt;
&lt;h2 id=&quot;why&quot;&gt;Why lazy-load images or video instead of just &lt;em&gt;loading&lt;/em&gt; them? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lazy-loading/#why&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because it&#39;s possible you&#39;re loading stuff the user may never see. This is
problematic for a couple reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It wastes data. On unmetered connections, this isn&#39;t the worst thing that could
happen (although you could be using that precious bandwidth for downloading
other resources that are indeed going to be seen by the user). On limited data
plans, however, loading stuff the user never sees could effectively be a waste
of their money.&lt;/li&gt;
&lt;li&gt;It wastes processing time, battery, and other system resources. After a media
resource is downloaded, the browser must decode it and render its content in the
viewport.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lazy-loading images and video reduces initial page load time, initial
page weight, and system resource usage, all of which have positive impacts on
performance.&lt;/p&gt;
&lt;h2 id=&quot;implementing&quot;&gt;Implementing lazy-loading &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lazy-loading/#implementing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a number of ways to implement lazy-loading.
Your choice of solution must take into account the browsers you support,
and also what you are trying to lazy-load.&lt;/p&gt;
&lt;p&gt;Modern browsers implement &lt;a href=&quot;https://web.dev/browser-level-image-lazy-loading/&quot;&gt;browser-level lazy-loading&lt;/a&gt;,
which can be enabled using the &lt;code&gt;loading&lt;/code&gt; attribute on images and iframes.
To provide compatibility with older browsers
or to perform lazy-loading on elements without built-in lazy-loading
you can implement a solution with your own JavaScript.
There are also a number of existing libraries to help you to do this.
See the posts on this site for full details of all of these approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/lazy-loading-images/&quot;&gt;Lazy-loading images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/lazy-loading-video/&quot;&gt;Lazy-loading video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, we have compiled a list of &lt;a href=&quot;https://web.dev/lazy-loading-best-practices&quot;&gt;potential issues with lazy-loading&lt;/a&gt;,
and things to watch out for in your implementation.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/lazy-loading/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Used with care, lazy-loading images and video can seriously lower the initial
load time and page payloads on your site. Users won&#39;t incur unnecessary network
activity and processing costs of media resources they may never see, but they
can still view those resources if they want.&lt;/p&gt;
&lt;p&gt;As far as performance improvement techniques go, lazy-loading is reasonably
uncontroversial. If you have a lot of inline imagery in your site, it&#39;s a
perfectly fine way to cut down on unnecessary downloads. Your site&#39;s users and
project stakeholders will appreciate it!&lt;/p&gt;
</content>
    <author>
      <name>Jeremy Wagner</name>
    </author><author>
      <name>Rachel Andrew</name>
    </author>
  </entry>
  
  <entry>
    <title>Ensure your website is available and usable for everyone during COVID-19</title>
    <link href="https://web.dev/covid19/"/>
    <updated>2020-04-03T00:00:00Z</updated>
    <id>https://web.dev/covid19/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;This page provides guidance to help ensure your website is available,
accessible, secure, and usable for everyone at all times.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;If you&#39;re building or maintaining a health organization website
that qualifies as a national health ministry or US state-level agency, you can
request to join the COVID-19 Google Search technical support group. Visit
&lt;a href=&quot;https://webmasters.googleblog.com/2020/03/health-organizations-covid19.html&quot; rel=&quot;noopener&quot;&gt;Helping health organizations make COVID-19 information more
accessible&lt;/a&gt;
to learn more. &lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The guidance on this page comes from a cross-functional collection of teams
within Google that are shifting their short-term focus to support websites that are
helping people stay safe during the COVID-19 situation. These Googlers have seen that sites
are facing unprecedented increases in demand from people looking for critical
information, many of whom have rarely or never used the web before. It can be a challenge
to ensure sites are available during this time and accessible to all.&lt;/p&gt;
&lt;h2 id=&quot;guidance&quot;&gt;Guidance &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#guidance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This guidance is a work in progress and will be updated frequently.
If you have any suggestions, please &lt;a href=&quot;https://github.com/GoogleChrome/web.dev/issues/new/choose&quot; rel=&quot;noopener&quot;&gt;file an
issue&lt;/a&gt;, or &lt;a href=&quot;https://github.com/GoogleChrome/web.dev/blob/master/src/site/content/en/blog/covid19/index.md&quot; rel=&quot;noopener&quot;&gt;edit
this page&lt;/a&gt;
and then open a pull request.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;availability&quot;&gt;Availability, reliability, resilience, and stability &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#availability&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your site is seeing traffic spikes and it&#39;s failing, or you want to prevent it
from failing, the guidance below can help you quickly fix problems or detect them
before they become major issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read &lt;a href=&quot;https://web.dev/overloaded-server&quot;&gt;Fix an overloaded server&lt;/a&gt; to learn
how to detect, mitigate, and prevent traffic spike issues.&lt;/li&gt;
&lt;li&gt;Remove unnecessary images, videos, scripts, and fonts. Ensure each page focuses
on just delivering the functionality that the people using your site really
need.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/fast/#optimize-your-images&quot;&gt;Optimizing your images&lt;/a&gt; may
significantly reduce your server bandwidth usage because &lt;a href=&quot;https://images.guide/#introduction&quot; rel=&quot;noopener&quot;&gt;images are the
number one source of bloat on the web&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Offload as much of your static content to CDNs as possible.
More details from common providers:
&lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot; rel=&quot;noopener&quot;&gt;AWS&lt;/a&gt;,
&lt;a href=&quot;https://azure.microsoft.com/en-us/services/cdn/&quot; rel=&quot;noopener&quot;&gt;Azure&lt;/a&gt;,
&lt;a href=&quot;https://www.cloudflare.com/cdn/&quot; rel=&quot;noopener&quot;&gt;Cloudflare&lt;/a&gt;,
&lt;a href=&quot;https://cloud.google.com/cdn&quot; rel=&quot;noopener&quot;&gt;Google Cloud&lt;/a&gt;,
&lt;a href=&quot;https://firebase.google.com/docs/hosting&quot; rel=&quot;noopener&quot;&gt;Firebase&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Check if your CDN has any optimizations that are easy to turn on, such as
dynamic image compression, text compression, or automatic minification of JS
and CSS resources.&lt;/li&gt;
&lt;li&gt;Optimizing HTTP caching can significantly reduce demands on your servers with
minimal code change. Check out &lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;The HTTP cache: your first line of
defense&lt;/a&gt; for an overview and &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching&quot; rel=&quot;noopener&quot;&gt;HTTP
caching&lt;/a&gt;
and &lt;a href=&quot;https://jakearchibald.com/2016/caching-best-practices/&quot; rel=&quot;noopener&quot;&gt;Caching best
practices&lt;/a&gt; for
specific recommendations. The &lt;a href=&quot;https://web.dev/uses-long-cache-ttl/&quot;&gt;Serve static assets with an efficient cache
policy&lt;/a&gt; audit in Lighthouse can help you
quickly detect resources that aren&#39;t being cached. Keep in mind that different
types of resources will have different freshness requirements and will
therefore require different caching strategies.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/service-workers-cache-storage/&quot;&gt;Service workers&lt;/a&gt; are another
way to significantly reduce demands on your servers but may require significant technical
investment. They also enable your website to work
&lt;a href=&quot;https://developers.google.com/web/fundamentals/codelabs/offline&quot; rel=&quot;noopener&quot;&gt;offline&lt;/a&gt;,
enabling you to present opening hours, phone numbers, and other information to
returning users without a connection. &lt;a href=&quot;https://web.dev/workbox/&quot;&gt;Workbox&lt;/a&gt; is
the recommended approach for adding service workers to websites because it
automates a lot of boilerplate, makes it easier to follow best practices, and
prevents subtle bugs that are common when using the low-level &lt;code&gt;ServiceWorker&lt;/code&gt;
API directly.&lt;/li&gt;
&lt;li&gt;If your site is seeing major increased usage, check whether you have adequate
protection against &lt;a href=&quot;https://en.wikipedia.org/wiki/Denial-of-service_attack&quot; rel=&quot;noopener&quot;&gt;DDoS
attacks&lt;/a&gt; because your
site may now be a more attractive target. More details from common providers:
&lt;a href=&quot;https://aws.amazon.com/answers/networking/aws-ddos-attack-mitigation/&quot; rel=&quot;noopener&quot;&gt;AWS&lt;/a&gt;,
&lt;a href=&quot;https://azure.microsoft.com/en-us/services/ddos-protection/&quot; rel=&quot;noopener&quot;&gt;Azure&lt;/a&gt;,
&lt;a href=&quot;https://www.cloudflare.com/learning/ddos/ddos-mitigation/&quot; rel=&quot;noopener&quot;&gt;Cloudflare&lt;/a&gt;,
&lt;a href=&quot;https://cloud.google.com/files/GCPDDoSprotection-04122016.pdf&quot; rel=&quot;noopener&quot;&gt;Google Cloud&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&quot;https://web.dev/reliable/&quot;&gt;Network reliability&lt;/a&gt; for more guidance.&lt;/p&gt;
&lt;h3 id=&quot;accessibility&quot;&gt;Accessibility &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#accessibility&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Focusing on accessibility is more important than ever because more people with a
variety of needs are probably accessing your site. Follow the guidelines below
to ensure that the core functionality of your website is accessible for
everyone.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accessibility is a team effort and everyone has a role to play. Start by
reviewing Google&#39;s &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/a11y-for-teams&quot; rel=&quot;noopener&quot;&gt;Accessibility for Teams
guide&lt;/a&gt;
as well as &lt;a href=&quot;https://accessibility.digital.gov/&quot; rel=&quot;noopener&quot;&gt;the team guide from the U.S. Digital
Service&lt;/a&gt;. These guides explain what each
team member (product managers, engineers, designers, QA, and so on) can
contribute.&lt;/li&gt;
&lt;li&gt;Do an &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/how-to-review&quot; rel=&quot;noopener&quot;&gt;Accessibility
Review&lt;/a&gt;
to determine what&#39;s working well, and what needs improvement.
The &lt;a href=&quot;https://wave.webaim.org/extension/&quot; rel=&quot;noopener&quot;&gt;WAVE browser extensions&lt;/a&gt; can help
guide you through a manual accessibility audit of your site.&lt;/li&gt;
&lt;li&gt;Read through the &lt;a href=&quot;https://web.dev/accessible&quot;&gt;Accessibility Guides&lt;/a&gt; to better understand
specific topics like keyboard navigation and screen reader support.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse#devtools&quot; rel=&quot;noopener&quot;&gt;Run a Lighthouse
audit&lt;/a&gt; to catch
common accessibility issues. The report also provides a list of manual checks
that you can perform to improve the operability of your site. Note that an
Accessibility score of 100 does not guarantee that your site is accessible. There
are many important issues that Lighthouse can&#39;t test for in an automated
fashion so it&#39;s still important to do manual reviews. Other automated auditing
tools include the &lt;a href=&quot;https://wave.webaim.org/api/&quot; rel=&quot;noopener&quot;&gt;WAVE API&lt;/a&gt; and the &lt;a href=&quot;https://chrome.google.com/webstore/detail/axe-web-accessibility-tes/lhdoppojpmngadmnindnejefpokejbdd&quot; rel=&quot;noopener&quot;&gt;AXE
extension&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Complete the &lt;a href=&quot;https://egghead.io/courses/start-building-accessible-web-applications-today&quot; rel=&quot;noopener&quot;&gt;Start Building Accessible Web Applications Today course
on
egghead.io&lt;/a&gt;
course or check out the &lt;a href=&quot;https://www.udacity.com/course/web-accessibility--ud891&quot; rel=&quot;noopener&quot;&gt;Web Accessibility course on
Udacity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Watch the &lt;a href=&quot;https://www.youtube.com/playlist?list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g&quot; rel=&quot;noopener&quot;&gt;A11ycast
playlist&lt;/a&gt;
for more quick tips on specific accessibility topics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;PII&quot;&gt;Identity, security, and privacy &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#PII&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It can be tempting to take shortcuts to get critical fixes out the door, but
always be careful that you are not opening up security holes in doing so. People
need to access content on topics that are extremely private. Websites need to
protect this sensitive user data at all costs and convince people that their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Personal_data&quot; rel=&quot;noopener&quot;&gt;personally identifiable
information&lt;/a&gt; (PII) is safe.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand &lt;a href=&quot;https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https&quot; rel=&quot;noopener&quot;&gt;why all websites should be protected with
HTTPS&lt;/a&gt;,
not just those that handle sensitive PII data.&lt;/li&gt;
&lt;li&gt;Switch to a hosting provider that uses HTTPS by default, or use &lt;a href=&quot;https://letsencrypt.org/getting-started/&quot; rel=&quot;noopener&quot;&gt;Let&#39;s
Encrypt&lt;/a&gt; or similar services to
enable HTTPS on your servers.&lt;/li&gt;
&lt;li&gt;Review &lt;a href=&quot;https://web.dev/samesite-cookies-explained/&quot;&gt;SameSite cookies explained&lt;/a&gt; to learn
how to make your use of cookies more secure. Note that
&lt;a href=&quot;https://blog.chromium.org/2020/04/temporarily-rolling-back-samesite.html&quot; rel=&quot;noopener&quot;&gt;the enforcement of SameSite cookie labeling has been temporarily rolled back&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&quot;https://web.dev/secure/&quot;&gt;Safe and secure&lt;/a&gt; for more guidance.&lt;/p&gt;
&lt;h3 id=&quot;usability&quot;&gt;Usability, UI, and UX &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#usability&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;People are relying more heavily on the web to fulfill basic needs. Many of these
people don&#39;t use the web frequently. It&#39;s worthwhile to audit the usability of
your site&#39;s core functionality and make sure it&#39;s as simple and easy to use as
possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consider adding a prominent banner (that can be removed with an &lt;strong&gt;X&lt;/strong&gt; button)
to the top of your website that clearly communicates service updates. Use a
call-to-action in the banner to direct people to more specific resources.
Consider using distinct colors and fonts that stand out from the rest of your
page content. Keep your writing empathetic, focused on people&#39;s needs, and
transparent about what kind of service to expect.&lt;/li&gt;
&lt;li&gt;Look for opportunities to minimize physical interactions in your &lt;a href=&quot;https://www.nngroup.com/articles/journey-mapping-101/&quot; rel=&quot;noopener&quot;&gt;critical
user journeys&lt;/a&gt; (CUJs)
and suggest those changes to your product team. For example, if your delivery
service usually requires a signature, see if there&#39;s any way to work around
that.&lt;/li&gt;
&lt;li&gt;Double-check that your CUJs are as simple and intuitive as possible and
suggest changes to your product team if you see any opportunities to improve.&lt;/li&gt;
&lt;li&gt;Review the &lt;a href=&quot;https://developers.google.com/web/fundamentals/design-and-ux/principles&quot; rel=&quot;noopener&quot;&gt;principles of good mobile
design&lt;/a&gt;
and try out your CUJs on various mobile devices to make sure there aren&#39;t any
glaring issues. The people who don&#39;t use the web often and are suddenly finding
themselves having to rely on the web more are probably accessing your site from
mobile devices.&lt;/li&gt;
&lt;li&gt;Refactor your site to use &lt;a href=&quot;https://developers.google.com/web/fundamentals/design-and-ux/responsive&quot; rel=&quot;noopener&quot;&gt;responsive design
patterns&lt;/a&gt;
as much as possible.&lt;/li&gt;
&lt;li&gt;Ensure that your forms are
&lt;a href=&quot;https://www.smashingmagazine.com/2017/06/designing-efficient-web-forms/&quot; rel=&quot;noopener&quot;&gt;efficient&lt;/a&gt;
and
&lt;a href=&quot;https://developers.google.com/web/fundamentals/design-and-ux/input/forms&quot; rel=&quot;noopener&quot;&gt;well-designed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;seo&quot;&gt;SEO &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#seo&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;People are looking for critical health- and job-related information. It&#39;s
important to ensure that your sites are discoverable by all search engines.
The &lt;a href=&quot;https://web.dev/lighthouse-seo/&quot;&gt;Lighthouse SEO audits&lt;/a&gt; can help you detect basic problems.
Follow the official blogs of search engines for the latest guidance and updates:
&lt;a href=&quot;https://webmasters.googleblog.com/&quot; rel=&quot;noopener&quot;&gt;Google&lt;/a&gt;,
&lt;a href=&quot;https://blogs.bing.com/webmaster/&quot; rel=&quot;noopener&quot;&gt;Bing&lt;/a&gt;,
&lt;a href=&quot;http://research.baidu.com/Blog&quot; rel=&quot;noopener&quot;&gt;Baidu&lt;/a&gt;,
&lt;a href=&quot;https://spreadprivacy.com/tag/duckduckgo/&quot; rel=&quot;noopener&quot;&gt;DuckDuckGo&lt;/a&gt;,
&lt;a href=&quot;https://yandex.com/blog/yacompany-com&quot; rel=&quot;noopener&quot;&gt;Yandex&lt;/a&gt;.
Recent COVID-19-related posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webmasters.googleblog.com/2020/03/how-to-pause-your-business-online-in.html&quot; rel=&quot;noopener&quot;&gt;How to change your online activities while minimizing impact on your Google
Search
presence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webmasters.googleblog.com/2020/03/new-properties-virtual-or-canceled-events.html&quot; rel=&quot;noopener&quot;&gt;New properties for virtual, postponed, and canceled
events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.bing.com/webmaster/march-2020/Bing-adopts-schema-org-mark-up-for-Special-Announcements-about-COVID-19&quot; rel=&quot;noopener&quot;&gt;Bing adopts schema.org markup for special announcements for
COVID-19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/search/docs/data-types/special-announcements&quot; rel=&quot;noopener&quot;&gt;Add structured data to COVID-19 announcements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webmasters.googleblog.com/2020/03/health-organizations-covid19.html&quot; rel=&quot;noopener&quot;&gt;Helping health organizations make COVID-19 information more
accessible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://support.google.com/webmasters/answer/9781983&quot; rel=&quot;noopener&quot;&gt;General best practices for Search for health &amp;amp; government
sites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&quot;https://web.dev/discoverable/&quot;&gt;Discoverable&lt;/a&gt; for more guidance.&lt;/p&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#performance&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some ISPs (&lt;a href=&quot;https://economictimes.indiatimes.com/tech/internet/brace-yourself-for-slower-data-speeds/articleshow/74702264.cms&quot; rel=&quot;noopener&quot;&gt;in India for
example&lt;/a&gt;)
are seeing a &lt;a href=&quot;https://www.npr.org/2020/03/17/817154787/internet-traffic-surges-as-companies-and-schools-send-people-home&quot; rel=&quot;noopener&quot;&gt;sharp increase in home internet
usage&lt;/a&gt;
and don&#39;t have the infrastructure to meet the increased demand. In situations
like this your website speed may be getting slower through no fault of your own.
Optimizing your load performance could be a way to offset the headwind of
reduced bandwidth. In other words, by reducing the number of bytes that need to
be sent over the network in order to load your pages, you can offset the
performance impact of reduced bandwidth.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Images are the &lt;a href=&quot;https://images.guide/#introduction&quot; rel=&quot;noopener&quot;&gt;number one cause of bloat on the
web&lt;/a&gt;. You might be able to significantly
reduce your website&#39;s bandwidth usage by &lt;a href=&quot;https://web.dev/fast/#optimize-your-images&quot;&gt;optimizing your
images&lt;/a&gt;.
&lt;a href=&quot;https://squoosh.app/&quot; rel=&quot;noopener&quot;&gt;Squoosh&lt;/a&gt; is a simple open source image compression tool
that can help you quickly compress your images.&lt;/li&gt;
&lt;li&gt;Run &lt;a href=&quot;https://webpagetest.org/easy&quot; rel=&quot;noopener&quot;&gt;WebPageTest&lt;/a&gt; or
&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/#get-started&quot; rel=&quot;noopener&quot;&gt;Lighthouse&lt;/a&gt;
to discover your top performance improvement opportunities.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/uses-text-compression/&quot;&gt;Enable text compression&lt;/a&gt; to reduce
the network size of text resources. This is often an easy performance win that
requires minimal technical investment.&lt;/li&gt;
&lt;li&gt;Read &lt;a href=&quot;https://web.dev/fixing-website-speed-cross-functionally/&quot;&gt;Fixing website speed
cross-functionally&lt;/a&gt;
to learn how to collaborate with and get buy-in from other departments.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/browser-level-image-lazy-loading/&quot;&gt;Use standardized lazy-loading for images&lt;/a&gt; to
minimize requests for images that people may never actually see. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;Browser
compatibility&lt;/a&gt;
is not 100% but the feature can be treated as a progressive enhancement. In
other words, if a certain browser doesn&#39;t support standardized lazy-loading, the
image should load as it normally does.&lt;/li&gt;
&lt;li&gt;Check if your site has any A/B testing or personalization scripts that can be
loaded more asynchronously or if there&#39;s any non-critical functionality in the
scripts that can be disabled. A/B testing and personalization scripts usually
can&#39;t be loaded &lt;em&gt;completely&lt;/em&gt; asynchronously because they need to run before
the page content loads, but there may be some opportunity to load parts of the
scripts more asynchronously. See &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path&quot; rel=&quot;noopener&quot;&gt;Critical Rendering Path&lt;/a&gt; to understand
the fundamental tradeoff between synchronous scripts (also known as
render-blocking scripts) in general and page load time, and then decide
whether you need to prioritize the render-blocking scripts over page load
time, or vice versa.&lt;/li&gt;
&lt;li&gt;Third-party code constitutes &lt;a href=&quot;https://almanac.httparchive.org/en/2019/third-parties&quot; rel=&quot;noopener&quot;&gt;around half of all
requests&lt;/a&gt; for most
websites. Consider
&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/loading-third-party-javascript&quot; rel=&quot;noopener&quot;&gt;optimizing&lt;/a&gt;
or temporarily removing or disabling third-party code that isn&#39;t fundamental
to running your site.&lt;/li&gt;
&lt;li&gt;If feature releases are deprioritized, this might be the perfect time to clean
up. Remove tags from your tag managers, clean up bloated CSS and JS, and
remove deprecated features or code. The
&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/coverage&quot; rel=&quot;noopener&quot;&gt;Coverage tab&lt;/a&gt;
in Chrome DevTools and the
&lt;a href=&quot;https://pptr.dev/#?product=Puppeteer&amp;amp;version=v2.1.1&amp;amp;show=api-class-coverage&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Coverage&lt;/code&gt;&lt;/a&gt; class
in Puppeteer can help you detect unused code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&quot;https://web.dev/fast/&quot;&gt;Fast load times&lt;/a&gt; for more guidance.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://unsplash.com/photos/Q1p7bh3SHj8&quot; rel=&quot;noopener&quot;&gt;Hero image&lt;/a&gt; by
&lt;a href=&quot;https://unsplash.com/@nasa&quot; rel=&quot;noopener&quot;&gt;NASA&lt;/a&gt; on
&lt;a href=&quot;https://unsplash.com/s/photos/earth&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</content>
    
  </entry>
  
  <entry>
    <title>Feedback from the summer 2019 image optimization survey</title>
    <link href="https://web.dev/image-optimization-survey-2019/"/>
    <updated>2019-11-22T00:00:00Z</updated>
    <id>https://web.dev/image-optimization-survey-2019/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;This post lists the freeform feedback that Google Web DevRel received in its Summer 2019
image optimization techniques survey.
Responses were solicited through &lt;a href=&quot;https://developers.google.com/web&quot; rel=&quot;noopener&quot;&gt;Web Fundamentals&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/chromiumdev&quot; rel=&quot;noopener&quot;&gt;@ChromiumDev&lt;/a&gt;. The motivation for the survey was to find out why
most sites don&#39;t follow image optimization best practices even though they seem like a relatively
easy way to improve performance. The response data isn&#39;t listed here because there were flaws
in the survey methodology.&lt;/p&gt;
&lt;h2 id=&quot;audience&quot;&gt;Audience &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#audience&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you&#39;re a web developer, you might find this post useful for discovering new image optimization
techniques, or details on how other web developers have solved a problem that you&#39;re facing, as
well as the costs, benefits, and limitations of each technique.&lt;/li&gt;
&lt;li&gt;If you&#39;re an image service or image CDN provider, this post might help you find new market
opportunities.&lt;/li&gt;
&lt;li&gt;If you&#39;re a framework, build tool, or CMS developer, this post might give you ideas on new
features to implement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;comments&quot;&gt;Comments &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#comments&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;webp&quot;&gt;WebP &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#webp&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Why&#39;s this important?
Image formats such as &lt;a href=&quot;https://web.dev/serve-images-webp&quot;&gt;WebP&lt;/a&gt; can result in smaller files and better quality than older formats such as JPEG and PNG.
There are several techniques for using modern formats with fallback for older browsers.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;I do like WebP but it isn&#39;t yet fully ready. Moreover, our WordPress doesn&#39;t support WebP. One of the most popular photo editing apps, Photoshop, also doesn&#39;t support WebP out of the box. So we can&#39;t rely on 3rd party apps or services for image compression.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Make WebP usable on Safari.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I would love to use WebP if I could export them from Photoshop/Figma/Sketch and all browsers supported it.&amp;quot; [Note: Sketch does support WebP]&lt;/li&gt;
&lt;li&gt;&amp;quot;Next gen formatting solution would be great.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Stop pushing WebP so hard when browser support is poor, and consider the need for PNG instead of JPEG for screenshots.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Google Docs doesn&#39;t support WebP.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We would use WebP exclusively, but are concerned about browser compatibility.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;First fix browser compatibility and update legacy browsers or add legacy fixes, then people will be more inclined to adopt to new image types like WebP…&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Encourage plugin/theme developers to consider providing support to WebP and other next-gen image types, so that non-developers don&#39;t need to fiddle with it.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;svg-and-vector-images&quot;&gt;SVG and vector images &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#svg-and-vector-images&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;If possible I&#39;m using (animated) SVG. gatsby-image fixed a lot of this. But when you dig into what they&#39;ve done, it&#39;s completely unrealistic that a normal website should have to build out something like that to get images to work right. The browser should take on more of this responsibility.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Would it be possible to document how to create SVG animations with &lt;a href=&quot;https://airbnb.io/lottie/#/&quot; rel=&quot;noopener&quot;&gt;lottie.js&lt;/a&gt;?&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We try to use big resolution JPEG pictures with low sizes in our website most of the time to avoid loading times. We also ensure to use SVGs when necessary to provide quality for responsive design.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We try to use optimized vector graphics for all but pics if possible.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;other-image-formats&quot;&gt;Other image formats &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#other-image-formats&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;We [need to] better educate people to stop using GIF.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lazy-loading&quot;&gt;Lazy loading &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#lazy-loading&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Why&#39;s this important?
&lt;a href=&quot;https://web.dev/use-lazysizes-to-lazyload-images&quot;&gt;Requesting image files just in time&lt;/a&gt;, rather than getting all
the images for a page as soon as it loads, can improve performance and reduce data cost.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Please keep the user in mind when considering features such as lazy load, because for many it&#39;s annoying.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Make the lazy load attribute work with background-image please.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Frameworks should do better asset processing out of the box.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We have converted from lazy loading a long time ago.  User reports of millions of images and sites &amp;quot;NOT LOADING&amp;quot;.  That was understanding our team summarized it as.  It&#39;s hard for a non-technical users to describe issues.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I&#39;m keen to get a better understanding of using Intersection Observer API for lazy loading rather than using traditional techniques.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;This well works for me: &lt;a href=&quot;https://pwafire.org/developer/codelabs/progressive-loading&quot; rel=&quot;noopener&quot;&gt;pwafire.org/developer/codelabs/progressive-loading&lt;/a&gt;.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;background-images&quot;&gt;Background images &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#background-images&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;I usually load images as backgrounds in CSS.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag is problematic and difficult to control fine-grained details about, especially with user-submitted content. We use &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and background-image styling much more often as it allows us to use background-size, background-position, and prevent right-click saving of the image.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;transparency&quot;&gt;Transparency &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#transparency&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;It&#39;s 2019. How are JPGs still without alpha transparency?&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I only really use PNGs for photographs when I need a transparent background.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;low-quality-image-placeholders-(lqips)&quot;&gt;Low Quality Image Placeholders (LQIPs) &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#low-quality-image-placeholders-(lqips)&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;We use LQIPS and it&#39;s a great technique to keep visitors engaged without loading high quality images really early.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#performance&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;We actually had a recent performance issue with images. As a user scrolls down on our site, we show the next 60 cards which include a thumbnail. Due to the 6 connection limit on the same domain, the thumbnails were being blocked as well as the next AJAX request to get the next 60 cards if a user continues to scroll down.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We would love to use HTTP/2 but most of our customers use IE11! We are therefore exploring domain sharding / loading AJAX JSON data requests off a different domain.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sizing&quot;&gt;Sizing &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#sizing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Why&#39;s this important?
The &lt;a href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image&quot;&gt;&lt;code&gt;srcset&lt;/code&gt;&lt;/a&gt; attribute provides alternative image sources. You specify width or pixel density so the browser can choose the smallest image without needing to download images to calculate dimensions.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Sorry for intrinsicsize; leveraging height/width seems better to me.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Looking for a way to generate less sizes, right now it&#39;s ~12.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Dynamic resizing of images is really hard and impossible without JS.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;A tool like &lt;a href=&quot;http://responsivebreakpoints.com/&quot; rel=&quot;noopener&quot;&gt;responsivebreakpoints.com&lt;/a&gt; is good for web.dev :).&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;high-quality-and-high-resolution-images&quot;&gt;High quality and high-resolution images &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#high-quality-and-high-resolution-images&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;How to download compress images without losing DPI quality?&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We&#39;re a document management company. Our apps handle MILLIONS of hi-res scanned images, usually TIFF or PDF.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;It&#39;s a hassle. Hi-res img files are necessary for print format; must be optimized for web. It&#39;s a hassle to downsize images for web but it&#39;s a show-stopper if authors only supply lightweight files for images destined for print publication. We wind up giving mixed messages about requirements for submission of manuscripts with artwork. We then wind up with complex workflows for processing those materials.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;browser-capability&quot;&gt;Browser capability &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#browser-capability&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Auto responsive src crop from browser as [built-in] feature would be very useful as it is time consuming to crop all images to 4 sizes and writing all the markup. If we can upload one large photo and writing a simple picture tag that browsers will automatically create the multiple src attributes that would be a winning feature.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Personally I&#39;m having a hard time avoiding page reflows when image with is set by CSS for responsive images (max-width: 100%; height auto or height: width: 100%; height auto), especially in combination with art direction from adaptive images/picture tag. Best way to avoid seems to use the &amp;quot;negative padding hack&amp;quot; for a fixed image ratio and then position the image inside this ratio box. Better browser support/responsive image handling would be a really great help!&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Please disable GIF &amp;quot;autoplay&amp;quot; by fetching just the first frame.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cdns-and-image-services&quot;&gt;CDNs and image services &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#cdns-and-image-services&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Why&#39;s this important?
&lt;strong&gt;Image services&lt;/strong&gt; make it easier to optimize your images. You usually just upload one high-resolution
version of each image and then use a web service API to optimize or transform the image as needed.
&lt;strong&gt;Content Delivery Networks (CDNs)&lt;/strong&gt; optimize the distribution and delivery of images and other website assets
and sometimes provide optimization services, such as automatically delivering WebP images to supporting browsers instead of PNG or JPEG, without changing the file extension.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Google should provide a free CDN like Cloudflare.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Maybe more tooling to set up dynamic scaling and CDNs with different providers would be nice.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;A single oversized overcompressed image is a very decent solution with no extra production cost. You need around 1000 pixels wide images for mobile (500px render width) and that is also the size you need for large/desktop non-retina displays. I think images resize CDNs are a very bad solution, although I have used it in the past. The CMS should handle the resizing and of that is too complex to set up, a single solution is a good compromise (for now).&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;CloudFlare auto-scales our images to best match the user&#39;s display. So we can save on loading time because images are loaded in relative to the user&#39;s display. For example, if a user is on a phone, it won&#39;t load in a desktop-sized background.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Cloudflare does this in the background without us having to do anything except check a box in our settings panel.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Just to reiterate, the only reason I can successfully use srcset, etc. is due to the ease of Cloudinary. But Cloudinary gets expensive, &lt;em&gt;really&lt;/em&gt; fast. this feels like a major hole in the development experience.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We need a way to easily auto crop images in a smart way so they can work with different aspect ratios in different contexts.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I also use images from Other providers like Unsplash where there is very less control of resolution, quality and compression.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cms-platform-and-framework&quot;&gt;CMS, platform, and framework &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#cms-platform-and-framework&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;I still struggle to find out what is the best way to use images, when I am building a site using a CMS. Authors tend to configure images with different dimensions and expect images not to shrink or scale. I am not sure if it is ok to set max-width or max-height on images&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Been using gatsby-image for the last few projects and have never looked back.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Images are often the hard part as they are put into CMS by end user, they may use any size, format, sometimes original image in ideal image format and dimensions are not available.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Images are difficult to maintain since our system is self-serve adding controls is difficult unless things happen automatically without affecting resolution. Also for us images don&#39;t look correct in mobile vs desktop&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I help people to optimize their sites (WordPress). The biggest problems I&#39;ve seen for images are: Need to depend on a CDN or plugins to create WebP. srcset/picture has to be coded properly by theme developers. Most of the lazy loading plugins loads slowly giving bad UX. Background images are hard to lazy load.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;costbenefit&quot;&gt;Cost/benefit &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#costbenefit&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;The new practices are effective but increase the development time of the sites.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The lack of adherence to the new standards such as srcset and WebP has been slow to be adopted by many Fortune 500 companies. Seeing this, many companies have resisted the change as an unnecessary development cost for current websites. The performance gains are not widely discussed or reported by the end user (UX). If anything, it makes it somewhat harder to save images from the web.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Costly to create and manage multiple sizes, versions.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;They take up a lot of space on our server.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;seo&quot;&gt;SEO &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#seo&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;It&#39;s difficult to balance between acceptable image quality and file size. On one hand, I want fast loading for the SEO benefit, but on the other hand, poor quality images will detract from the UI/UX.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;the-role-of-images-on-the-web&quot;&gt;The role of images on the web &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#the-role-of-images-on-the-web&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;There are too many on the web. Stop using useless images that don&#39;t enhance the written content.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Do you still remember the time when the web didn&#39;t have images and we shared selfies as ASCII-art?&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tooling-guidance-standards-and-best-practice:-frustrations-and-requests&quot;&gt;Tooling, guidance, standards and best practice: frustrations and requests &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-optimization-survey-2019/#tooling-guidance-standards-and-best-practice:-frustrations-and-requests&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[One participant wrote a &lt;a href=&quot;https://stokito.wordpress.com/2019/07/19/how-to-make-web-images-better/&quot; rel=&quot;noopener&quot;&gt;blog post&lt;/a&gt; in response to this survey]&lt;/li&gt;
&lt;li&gt;&amp;quot;The requirements seems to constantly change. As a web developer it is extremely frustrating because it is time consuming to save out the images in the first place. We optimize the best we can, we check the site and then months later Google has decided that the images could be even more compressed or need to be in a different format. This prevents us from providing the best possible solution to our client that lasts and instead creates a costly endeavor for them and us. Some of our small business clients simply don&#39;t have the budget for us to keep fixing images and re-saving them out to adhere to the requirements. We don&#39;t have the budget to do this work within their management packages. Writing the code to call different image sizes for different devices is also time consuming. It would be great to come up with a system of saving out images that would be consistent for a longer period of time.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Yes, I think you got &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/budgets&quot; rel=&quot;noopener&quot;&gt;Keep Request Counts Low And File Sizes Small&lt;/a&gt; all wrong in Lighthouse. If a site serves over HTTP1.x then sure, but if a site serves over HTTP2 then the number of requests is less important or not even an issue if originating from the same hostname. I have a lite website, but I load 30 small WebP files of approx 35 requests total, over HTTP2 on the same hostname. Lighthouse is flagging this as an &amp;quot;Keep Request Counts Low And File Sizes Small&amp;quot; issue whereas it is superfast and because of the HTTP2 on the same hostname the number of requests are not a problem. And yes, the files are already small (most between 1 KB and 2 KB or less). I could load a sprite but then more CSS computing needs to be done. So please update the &amp;quot;Keep Request Counts Low And File Sizes Small&amp;quot; report in Lighthouse to take HTTP2 over same hostname into account.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;It has been a struggle for people to remember to compress their images.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Cross browser behavior remains unpredictable so the simplest solutions are often the safest.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Sam Dutton</name>
    </author>
  </entry>
  
  <entry>
    <title>Preloading responsive images</title>
    <link href="https://web.dev/preload-responsive-images/"/>
    <updated>2019-09-30T00:00:00Z</updated>
    <id>https://web.dev/preload-responsive-images/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;This article gives me an opportunity to discuss two of my favorite things: responsive images &lt;em&gt;and&lt;/em&gt; preload. As someone who was heavily involved in developing both of those features, I&#39;m super excited to see them working together!&lt;/p&gt;
&lt;h2 id=&quot;responsive-images-overview&quot;&gt;Responsive images overview &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/preload-responsive-images/#responsive-images-overview&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Suppose you&#39;re browsing the web on a screen that&#39;s 300 pixels wide, and the page just requested an image that&#39;s 1500 pixels wide. That page just wasted a lot of your cellular data because your screen can&#39;t do anything with all of that extra resolution. Ideally, the browser should fetch a version of the image that&#39;s just a &lt;em&gt;little&lt;/em&gt; wider than your screen size, say 325 pixels. This ensures a high-resolution image without wasting data. And, even better, the image will load faster. &lt;a href=&quot;https://web.dev/serve-responsive-images/#serve-multiple-image-versions&quot;&gt;Responsive images&lt;/a&gt; enable browsers to fetch different image resources to different devices. If you don&#39;t use an &lt;a href=&quot;https://web.dev/image-cdns/&quot;&gt;image CDN&lt;/a&gt; you need to save multiple dimensions for each image and specify them in the &lt;code&gt;srcset&lt;/code&gt; attribute. The &lt;code&gt;w&lt;/code&gt; value tells the browser the width of each version. Depending on the device, the browser can choose the appropriate one:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;small.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;small.jpg 500w, medium.jpg 1000w, large.jpg 1500w&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;preload-overview&quot;&gt;Preload overview &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/preload-responsive-images/#preload-overview&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/preload-critical-assets&quot;&gt;Preload&lt;/a&gt; lets you tell the browser about critical resources that you want to load as soon as possible, before they are discovered in HTML. This is especially useful for resources that are not easily discoverable, such as fonts included in stylesheets, background images, or resources loaded from a script.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;preload&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;important.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;responsive-images-+-preload-faster-image-loads&quot;&gt;Responsive images + preload = faster image loads &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/preload-responsive-images/#responsive-images-+-preload-faster-image-loads&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Responsive images and preload have been available for the last few years, but at the same time something was missing: there was no way to preload responsive images. &lt;a href=&quot;https://developers.google.com/web/updates/2019/03/nic73#more&quot; rel=&quot;noopener&quot;&gt;Starting in Chrome 73&lt;/a&gt;, the browser can preload the right variant of responsive images specified in &lt;code&gt;srcset&lt;/code&gt; before it discovers the &lt;code&gt;img&lt;/code&gt; tag!&lt;/p&gt;
&lt;p&gt;Depending on your site&#39;s structure, that could mean significantly faster image display! We ran tests on a site that uses JavaScript to lazy-load responsive images. Preloading resulted in images loading 1.2 seconds faster.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Responsive images are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;supported in all modern browsers&lt;/a&gt; while preloading them is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;supported only in Chromium-based browsers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;imagesrcset-and-imagesizes&quot;&gt;&lt;code&gt;imagesrcset&lt;/code&gt; and &lt;code&gt;imagesizes&lt;/code&gt; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/preload-responsive-images/#imagesrcset-and-imagesizes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To preload responsive images, new attributes were recently added to the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element: &lt;code&gt;imagesrcset&lt;/code&gt; and &lt;code&gt;imagesizes&lt;/code&gt;.  They are used with &lt;code&gt;&amp;lt;link rel=&amp;quot;preload&amp;quot;&amp;gt;&lt;/code&gt; and match the &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; syntax used in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;For example, if you want to preload a responsive image specified with:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wolf.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wolf_400px.jpg 400w, wolf_800px.jpg 800w, wolf_1600px.jpg 1600w&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50vw&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;A rad wolf&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You can do that by adding the following to your HTML&#39;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;preload&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wolf.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;imagesrcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wolf_400px.jpg 400w, wolf_800px.jpg 800w, wolf_1600px.jpg 1600w&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;imagesizes&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50vw&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This kicks off a request using the same resource selection logic that &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; will apply.&lt;/p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/preload-responsive-images/#use-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;preloading-dynamically-injected-responsive-images&quot;&gt;Preloading dynamically-injected responsive images &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/preload-responsive-images/#preloading-dynamically-injected-responsive-images&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let&#39;s say you&#39;re dynamically-loading hero images as part of a slideshow and know which image will be displayed first. In that case, you probably want to avoid waiting for the script before loading the image in question, as that would delay when users can see it.&lt;/p&gt;
&lt;p&gt;You can inspect this issue on a website with a dynamically-loaded image gallery:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;a href=&quot;https://responsive-preload.glitch.me/no_preload.html&quot; rel=&quot;noopener&quot;&gt;this example website&lt;/a&gt; in a new tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press &lt;code&gt;Control+Shift+J&lt;/code&gt; (or &lt;code&gt;Command+Option+J&lt;/code&gt; on Mac) to open DevTools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the &lt;strong&gt;Network&lt;/strong&gt; tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;Throttling&lt;/strong&gt; drop-down list, select &lt;strong&gt;Fast 3G&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disable the &lt;strong&gt;Disable cache&lt;/strong&gt; checkbox.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reload the page.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
&lt;img alt=&quot;Screenshot of Chrome DevTools Network panel.&quot; decoding=&quot;async&quot; height=&quot;481&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/cyocwRmB3XlfY26vUZ5h.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;figcaption class=&quot;w-figcaption&quot;&gt;This waterfall shows that the images only start loading after the browser has finished running the script, introducing unnecessary delay to the time the image is initially displayed to the user.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Using &lt;code&gt;preload&lt;/code&gt; helps here because the image starts loading ahead of time and is likely to already be there when the browser needs to display it.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
&lt;img alt=&quot;Screenshot of Chrome DevTools Network panel.&quot; decoding=&quot;async&quot; height=&quot;481&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/rIRdFypLWf1ljMaXCVCs.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;figcaption class=&quot;w-figcaption&quot;&gt;This waterfall shows that the first image started loading at the same time as the script, avoiding unnecessary delays and resulting in faster displaying images.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To see the difference that preloading makes, you can inspect the same dynamically-loaded image gallery but &lt;a href=&quot;https://responsive-preload.glitch.me/preload.html&quot; rel=&quot;noopener&quot;&gt;with preloaded first image&lt;/a&gt; by following the steps from the first example.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;An alternative way to avoid the problem would be to use a markup-based carousel and have the &lt;a href=&quot;https://hacks.mozilla.org/2017/09/building-the-dom-faster-speculative-parsing-async-defer-and-preload/&quot; rel=&quot;noopener&quot;&gt;browser&#39;s preloader&lt;/a&gt; pick up the required resources. However, this approach may not always be practical. (For example, if you are reusing an existing component, which is not markup-based.)&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;preloading-background-images-using-image-set&quot;&gt;Preloading background images using image-set &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/preload-responsive-images/#preloading-background-images-using-image-set&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you have different background images for different screen densities, you can specify them in your CSS with the &lt;code&gt;image-set&lt;/code&gt; syntax. The browser can then choose which one to display based on the screen&#39;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio&quot; rel=&quot;noopener&quot;&gt;DPR&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;image-set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cat.png&quot;&lt;/span&gt; 1x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cat-2x.png&quot;&lt;/span&gt; 2x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The above syntax ignores the fact that vendor prefixes are needed for this feature in both Chromium and WebKit based browsers. If you&#39;re planning to use this feature, you should consider using &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot; rel=&quot;noopener&quot;&gt;Autoprefixer&lt;/a&gt; to address that automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The problem with CSS background images is that they are discovered by the browser only after it has downloaded and processed all the CSS in the page&#39;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, which can be a lot of CSS…&lt;/p&gt;
&lt;p&gt;You can inspect this issue on an example website with &lt;a href=&quot;https://responsive-preload.glitch.me/background_no_preload.html&quot; rel=&quot;noopener&quot;&gt;responsive background image&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
&lt;img alt=&quot;Screenshot of Chrome DevTools Network panel.&quot; decoding=&quot;async&quot; height=&quot;451&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/7sjFt1RsoEOKn5zlS5zb.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;figcaption class=&quot;w-figcaption&quot;&gt;In this example, the image download doesn&#39;t start until the CSS is fully downloaded, resulting in unnecessary lag to the image&#39;s display.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Responsive image preloading provides a simple and hack-free way to load those images faster.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;preload&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;cat.png&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;image&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;imagesrcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;cat.png 1x, cat-2x.png 2x&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You can inspect how the previous example behaves with &lt;a href=&quot;https://responsive-preload.glitch.me/background_preload.html&quot; rel=&quot;noopener&quot;&gt;preloaded responsive background image&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
&lt;img alt=&quot;Screenshot of Chrome DevTools Network panel.&quot; decoding=&quot;async&quot; height=&quot;439&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/dOI6EmChfahBujnZOke7.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;figcaption class=&quot;w-figcaption&quot;&gt;Here the image and CSS start downloading at the same time, avoiding delays and resulting in a faster loading image.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;preloading-responsive-images-in-action&quot;&gt;Preloading responsive images in action &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/preload-responsive-images/#preloading-responsive-images-in-action&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Preloading your responsive images can speed them up in theory, but what does it do in practice?&lt;/p&gt;
&lt;p&gt;To answer that I created two copies of a &lt;a href=&quot;https://github.com/GoogleChromeLabs/sample-pie-shop&quot; rel=&quot;noopener&quot;&gt;demo PWA shop&lt;/a&gt;: &lt;a href=&quot;https://20190710t144416-dot-pie-shop-app.appspot.com/apparel&quot; rel=&quot;noopener&quot;&gt;one that does not preload images&lt;/a&gt;, and &lt;a href=&quot;https://20190710t132936-dot-pie-shop-app.appspot.com/apparel&quot; rel=&quot;noopener&quot;&gt;one that preloads some of them&lt;/a&gt;. Since the site lazy loads images using JavaScript, it&#39;s likely to benefit from preloading the ones that will be in the initial viewport.&lt;/p&gt;
&lt;p&gt;That gave me the following results for &lt;a href=&quot;https://www.webpagetest.org/result/190710_VM_30b9d4c993a1e60befba17e1261ba1ca/&quot; rel=&quot;noopener&quot;&gt;no preload&lt;/a&gt; and for &lt;a href=&quot;https://www.webpagetest.org/result/190710_7B_a99e792121760f81a270b4b9c847797b/&quot; rel=&quot;noopener&quot;&gt;image preload&lt;/a&gt;. Looking at the raw numbers we see that &lt;a href=&quot;https://github.com/WPO-Foundation/webpagetest-docs/blob/master/user/Quick%20Start%20Guide.md#start-render&quot; rel=&quot;noopener&quot;&gt;Start Render&lt;/a&gt; stayed the same, &lt;a href=&quot;https://web.dev/speed-index/&quot;&gt;Speed Index&lt;/a&gt; slightly improved (273 ms, as images arrive faster, but don&#39;t take up a huge chunk of the pixel area), but the real metric which captures the difference is the &lt;a href=&quot;https://github.com/WPO-Foundation/webpagetest/blob/master/docs/Metrics/HeroElements.md&quot; rel=&quot;noopener&quot;&gt;Last Painted Hero&lt;/a&gt; metric, which improved by 1.2 seconds. 🎉🎉&lt;/p&gt;
&lt;p&gt;Of course, nothing captures the visual difference quite like a filmstrip comparison:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
&lt;img alt=&quot;Screenshot of WebPageTest filmstrip comparison showing preloaded images are displayed about 1.5 seconds faster.&quot; decoding=&quot;async&quot; height=&quot;328&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/sXyZOvsNoAY0K2NRqT4U.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;figcaption class=&quot;w-figcaption&quot;&gt;The filmstrip shows that images arrive significantly faster when preloaded, resulting in a hugely-improved user experience.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;preload-and-lesspicturegreater&quot;&gt;Preload and &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/preload-responsive-images/#preload-and-lesspicturegreater&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&#39;re familiar with responsive images, you may be wondering &amp;quot;What about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;&lt;/a&gt;?&amp;quot;.&lt;/p&gt;
&lt;p&gt;The Web Performance Working Group is talking about adding a preload equivalent for &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt;, but not the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element, which tackles the &lt;a href=&quot;https://web.dev/codelab-art-direction/&quot;&gt;&amp;quot;art direction&amp;quot;&lt;/a&gt; use-case.&lt;/p&gt;
&lt;p&gt;Why is this use-case being &amp;quot;neglected&amp;quot;?&lt;/p&gt;
&lt;p&gt;While there&#39;s interest in solving that use case as well, there are still a number of &lt;a href=&quot;https://calendar.perfplanet.com/2018/how-the-sausage-is-made-webperfwg-meeting-summary/&quot; rel=&quot;noopener&quot;&gt;technical issues to sort out&lt;/a&gt; which means that a solution here would have significant complexity. On top of that, it seems like for the most part, the use-case can be addressed today, even if in a hacky way (see below).&lt;/p&gt;
&lt;p&gt;Given that, the Web Performance WG decided to ship &lt;code&gt;srcset&lt;/code&gt; first and see if the demand for equivalent &lt;code&gt;picture&lt;/code&gt; support arises.&lt;/p&gt;
&lt;p&gt;If you do find yourself in a position to preload &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; you may be able to use the following technique as a workaround.&lt;/p&gt;
&lt;p&gt;Given the following scenario:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;small_cat.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(max-width: 400px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;medium_cat.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(max-width: 800px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;huge_cat.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element&#39;s logic (or the image source selection logic, to be precise), would be to go over the &lt;code&gt;media&lt;/code&gt; attributes of the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; elements in order, find the first one that matches, and use the attached resource.&lt;/p&gt;
&lt;p&gt;Because responsive preload has no notion of &amp;quot;order&amp;quot; or &amp;quot;first match&amp;quot;, the breakpoints need to be translated into something like:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;preload&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;small_cat.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(max-width: 400px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;preload&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;medium_cat.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(min-width: 400.1px) and (max-width: 800px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;preload&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;large_cat.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(min-width: 800.1px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;summary&quot;&gt;Summary &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/preload-responsive-images/#summary&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Responsive image preload gives us new and exciting possibilities to preload responsive images in ways that were previously only possible using hacks. It&#39;s an important new addition to the speed-conscious developer&#39;s toolbox and enables us to make sure the important images we want to get in front of our users as soon as possible will be there when we need them.&lt;/p&gt;
</content>
    <author>
      <name>Yoav Weiss</name>
    </author>
  </entry>
  
  <entry>
    <title>Optimize images with Thumbor</title>
    <link href="https://web.dev/use-thumbor/"/>
    <updated>2019-09-23T00:00:00Z</updated>
    <id>https://web.dev/use-thumbor/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;&lt;a href=&quot;http://thumbor.org/&quot; rel=&quot;noopener&quot;&gt;Thumbor&lt;/a&gt; is a free, open source image CDN that makes it easy to compress, resize, and transform images. This post lets you try out Thumbor firsthand without needing to install anything. We&#39;ve set up a sandbox Thumbor server for you to try out at &lt;code&gt;http://34.67.235.246:8888&lt;/code&gt;. The image that you&#39;re going to experiment with is available at &lt;a href=&quot;http://34.67.235.246:8888/unsafe/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;http://34.67.235.246:8888/unsafe/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;prequisites&quot;&gt;Prequisites &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#prequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This post assumes that you understand how image CDNs can improve your load performance. If not, check out &lt;a href=&quot;https://web.dev/image-cdns&quot;&gt;Use image CDNs to optimize images&lt;/a&gt;. It also assumes that you&#39;ve built basic websites before.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;If you would like to install Thumbor on your own server and then follow along with this post, check out &lt;a href=&quot;https://web.dev/install-thumbor&quot;&gt;How to install the Thumbor image CDN&lt;/a&gt;. Whenever you see &lt;code&gt;http://34.67.235.246:8888&lt;/code&gt; in this post you&#39;ll need to replace that origin with your Thumbor instance&#39;s origin.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;thumbor-url-format&quot;&gt;Thumbor URL Format &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#thumbor-url-format&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned in &lt;a href=&quot;https://web.dev/image-cdns&quot;&gt;Use Image CDNs to Optimize Images&lt;/a&gt;, each image CDN uses a slightly different URL format for images. Figure 1 represents Thumbor&#39;s format.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A Thumbor URL has the following components: origin, security key, size, filters and image.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;89&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/lo1hS8qn53XCztrlgvl7.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption&gt;Thumbor&#39;s URL format&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;origin&quot;&gt;Origin &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#origin&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Like all &lt;a href=&quot;https://html.spec.whatwg.org/multipage/origin.html#concept-origin&quot; rel=&quot;noopener&quot;&gt;origins&lt;/a&gt;, the origin of a Thumbor URL is composed of three parts: a &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Definition&quot; rel=&quot;noopener&quot;&gt;scheme&lt;/a&gt; (which is almost always &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt;), a host, and a port. In this example, the host is identified using an IP address, but if you&#39;re using a DNS server it might look like &lt;code&gt;thumbor-server.my-site.com&lt;/code&gt;. By default, Thumbor uses port &lt;code&gt;8888&lt;/code&gt; to serve images.&lt;/p&gt;
&lt;h3 id=&quot;security-key&quot;&gt;Security Key &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#security-key&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;unsafe&lt;/code&gt; part of the URL indicates that you&#39;re using Thumbor without a security key. A security key prevents a user from making unauthorized changes to your image URLs. By changing the image URL, a user could use your server (and your hosting bill) to resize their images, or, more maliciously, to overload your server. This guide won&#39;t cover setting up &lt;a href=&quot;https://github.com/thumbor/thumbor/wiki/security&quot; rel=&quot;noopener&quot;&gt;Thumbor&#39;s security key feature&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;size&quot;&gt;Size &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#size&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This part of the URL specifies the desired size of the output image. This can be omitted if you don&#39;t want to change the size of the image. Thumbor will use different approaches like cropping or scaling to achieve the desired size depending on the other URL parameters. The next section of this post explains how to resize images in more detail.&lt;/p&gt;
&lt;p&gt;Try it now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Click the following URL to view the image served at its original size in a new tab: &lt;a href=&quot;http://34.67.235.246:8888/unsafe/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&quot;w-figure&quot;&gt;
   &lt;img alt=&quot;Image at original size&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;500&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/R2Xp5XxJi4CFGjXlPx4X.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
   &lt;figcaption&gt;Original image&lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resize the image to 100x100 pixels: &lt;a href=&quot;http://34.67.235.246:8888/unsafe/100x100/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/100x100/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Image at 100x100 pixels&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;505&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/QXf1r4Ov6gXDtbrcmLWZ.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption&gt;Image resized to 100x100 pixels&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;filters&quot;&gt;Filters &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#filters&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Filters transform an image. The filters part of the URL segment starts with &lt;code&gt;filters:&lt;/code&gt; followed by a colon-separated list of filters; this can be omitted if you are not using any filters. The syntax for individual filters resembles a function call (for example &lt;code&gt;grayscale()&lt;/code&gt;) containing zero or more arguments.&lt;/p&gt;
&lt;p&gt;Try it now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Apply a single filter: a Gaussian &lt;a href=&quot;https://thumbor.readthedocs.io/en/latest/blur.html&quot; rel=&quot;noopener&quot;&gt;blur&lt;/a&gt; effect with a radius of 25 pixels: &lt;a href=&quot;http://34.67.235.246:8888/unsafe/filters:blur(25)/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/filters:blur(25)/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&quot;w-figure&quot;&gt;
   &lt;img alt=&quot;Blurred image&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;505&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/e5zG6ghl8IADjEKMGBzf.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
   &lt;figcaption&gt;Blurred image&lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply multiple filter. Convert to &lt;a href=&quot;https://thumbor.readthedocs.io/en/latest/grayscale.html&quot; rel=&quot;noopener&quot;&gt;grayscale&lt;/a&gt; and &lt;a href=&quot;https://thumbor.readthedocs.io/en/latest/rotate.html&quot; rel=&quot;noopener&quot;&gt;rotate&lt;/a&gt; the image 90 degrees: &lt;a href=&quot;http://34.67.235.246:8888/unsafe/filters:grayscale():blur(90)/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/filters:grayscale():blur(90)/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Grayscale image that has been rotated 90 degrees&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;505&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/U9atnYPla5L93UmVx9di.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption&gt;Grayscale, rotated image&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;transforming-images&quot;&gt;Transforming Images &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#transforming-images&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This section focuses on the Thumbor functionalities most relevant to performance: compression, resizing, and conversion between file formats.&lt;/p&gt;
&lt;h3 id=&quot;compression&quot;&gt;Compression &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#compression&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://thumbor.readthedocs.io/en/latest/quality.html&quot; rel=&quot;noopener&quot;&gt;quality&lt;/a&gt; filter compresses JPEG images to the desired image quality level (1-100). If no quality level is provided, Thumbor compresses the image to a quality level of 80. This is a good default: quality levels 80-85 typically have little noticeable effect on image quality, but usually decrease image size by 30-40%.&lt;/p&gt;
&lt;p&gt;Try it now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Compress the image to a quality of 1 (very bad): &lt;a href=&quot;http://34.67.235.246:8888/unsafe/filters:quality(1)/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/filters:quality(1)/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&quot;w-figure&quot;&gt;
   &lt;img alt=&quot;Low-quality image&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;505&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/DyC3mcwd1vn0Xnv7GUco.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
   &lt;figcaption&gt;Low-quality image&lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compress the image using Thumbor&#39;s default compression settings: &lt;a href=&quot;http://34.67.235.246:8888/unsafe/filters:quality()/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/filters:quality()/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Compressed image with no noticible quality issues&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;505&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/vOZpDiHEPMTQOEZ3YG7e.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption&gt;Compressed image&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;resizing&quot;&gt;Resizing &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#resizing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To resize an image while maintaining its original proportions use the format &lt;code&gt;$WIDTHx0&lt;/code&gt; or &lt;code&gt;0x$HEIGHT&lt;/code&gt; within the &lt;code&gt;size&lt;/code&gt; portion of the URL string.&lt;/p&gt;
&lt;p&gt;Try it now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Resize the image to a width of 200 pixels while maintaining original proportions: &lt;a href=&quot;http://34.67.235.246:8888/unsafe/200x0/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/200x0/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/p&gt;
 &lt;!-- lint disable code-block-style --&gt;
 &lt;figure class=&quot;w-figure&quot;&gt;
   &lt;img alt=&quot;Image that is 200 pixels wide&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;505&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/afo1UErx1tzpBz5mO0nQ.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
   &lt;figcaption&gt;Image resized to a width of 200 pixels&lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resize the image to a height of 500 pixels while maintaining original proportion: &lt;a href=&quot;http://34.67.235.246:8888/unsafe/0x500/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/0x500/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Image that is 500 pixels tall&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;505&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/ln4jTuQjlK8DDsutTH9i.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption&gt;Image resized to a height of 500 pixels&lt;figcaption&gt;
&lt;/figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;You can also resize images to a percentage of the original by using the &lt;a href=&quot;https://thumbor.readthedocs.io/en/latest/proportion.html&quot; rel=&quot;noopener&quot;&gt;proportion&lt;/a&gt; filter. If size is specified in conjunction with the proportion filter, the image will be resized, and then the proportion filter will be applied.&lt;/p&gt;
&lt;p&gt;Try it now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Resize the image to 50% of the original: &lt;a href=&quot;http://34.67.235.246:8888/unsafe/filters:proportion(.5)/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/filters:proportion(.5)/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&quot;w-figure&quot;&gt;
   &lt;img alt=&quot;Image that is 50% the size of the original&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;505&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/KmAi5ht9IUiFPkyu6zjA.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
   &lt;figcaption&gt;Image resized to 50% the size of the original&lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resize the image to a width of 1000 pixels, then resize the image to 10% of its current size: &lt;a href=&quot;http://34.67.235.246:8888/unsafe/1000x/filters:proportion(.1)/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/1000x/filters:proportion(.1)/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Image that is 100 pixels wide&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;505&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/F4jHvji47nFA7RiVdsAF.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption&gt;Image resized to a width of 100 pixels&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These methods are just a few of Thumbor&#39;s many cropping and resizing options. To read about other options, check out &lt;a href=&quot;https://github.com/thumbor/thumbor/wiki/Usage&quot; rel=&quot;noopener&quot;&gt;Usage&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;file-formats&quot;&gt;File Formats &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#file-formats&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://thumbor.readthedocs.io/en/latest/format.html&quot; rel=&quot;noopener&quot;&gt;format&lt;/a&gt; filter converts images to &lt;code&gt;jpeg&lt;/code&gt;, &lt;code&gt;webp&lt;/code&gt;, &lt;code&gt;gif&lt;/code&gt;, or &lt;code&gt;png&lt;/code&gt;. Keep in mind that if you&#39;re optimizing for performance you should &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization&quot; rel=&quot;noopener&quot;&gt;use either JPEG or WebP&lt;/a&gt; as PNG and GIF files tend to be significantly larger and do not compress as well.&lt;/p&gt;
&lt;p&gt;Try it now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Convert the image to WebP. If you open the &lt;strong&gt;Network&lt;/strong&gt; panel of DevTools the document&#39;s &lt;strong&gt;Content-Type response header&lt;/strong&gt; shows that the server returned a WebP image: &lt;a href=&quot;http://34.67.235.246:8888/unsafe/filters:format(webp)/https://web.dev/backdrop-filter/hero.jpg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;http://34.67.235.246:8888/unsafe/filters:format(webp)/https://web.dev/backdrop-filter/hero.jpg&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;DevTools screenshot showing the content-type (WebP) of an image&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;469&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/78Jp9l7N0gUQtiuxbNSn.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption&gt;The &lt;code&gt;content-type&lt;/code&gt; response header shown in DevTools&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Try out other &lt;a href=&quot;https://thumbor.readthedocs.io/en/latest/filters.html&quot; rel=&quot;noopener&quot;&gt;filters&lt;/a&gt; and transformations on the &lt;code&gt;hero.jpg&lt;/code&gt; image.&lt;/p&gt;
&lt;p&gt;If you&#39;re following along using your own Thumbor installation, check out the appendix below that explains how and why to use the &lt;code&gt;thumbor.conf&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&quot;appendix:-thumbor.conf&quot;&gt;Appendix: &lt;code&gt;thumbor.conf&lt;/code&gt; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-thumbor/#appendix:-thumbor.conf&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Many of the configuration options discussed in this post, plus many others, can be established as defaults by setting up and using a &lt;code&gt;thumbor.conf&lt;/code&gt; configuration file. Settings in the &lt;code&gt;thumbor.conf&lt;/code&gt; file will be applied to all images unless overridden by the URL string parameters.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run the &lt;code&gt;thumbor-config&lt;/code&gt; command to create a new &lt;code&gt;thumbor.conf&lt;/code&gt; file.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;thumbor-config &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; ./thumbor.conf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open your new &lt;code&gt;thumbor.conf&lt;/code&gt; file. The &lt;code&gt;thumbor-config&lt;/code&gt; command generated a file that lists and explains all Thumbor configuration options.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure settings by uncommenting lines and changing the default values.
You may find it useful to set the following settings:&lt;/p&gt;
 &lt;!-- lint disable no-inline-padding --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;QUALITY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AUTO_WEBP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAX_WIDTH&lt;/code&gt; and &lt;code&gt;MAX_HEIGHT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ALLOW_ANIMATED_GIFS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run Thumbor with the &lt;code&gt;--conf&lt;/code&gt; flag to use your &lt;code&gt;thumbor.conf&lt;/code&gt; settings.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;thumbor --conf /path/to/thumbor.conf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    <author>
      <name>Katie Hempenius</name>
    </author>
  </entry>
  
  <entry>
    <title>How to install the Thumbor image CDN</title>
    <link href="https://web.dev/install-thumbor/"/>
    <updated>2019-08-14T00:00:00Z</updated>
    <id>https://web.dev/install-thumbor/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Image CDNs make it easy to dynamically optimize the aesthetics and performance of your images. Unlike most image CDNs, &lt;a href=&quot;http://thumbor.org/&quot; rel=&quot;noopener&quot;&gt;Thumbor&lt;/a&gt; is open-source and can be used for free to resize, compress, and transform images. It&#39;s suitable for production use; &lt;a href=&quot;https://wikitech.wikimedia.org/wiki/Thumbor&quot; rel=&quot;noopener&quot;&gt;Wikipedia&lt;/a&gt; and &lt;a href=&quot;https://medium.com/square-corner-blog/dynamic-images-with-thumbor-a430a1cfcd87&quot; rel=&quot;noopener&quot;&gt;Square&lt;/a&gt; both use Thumbor.&lt;/p&gt;
&lt;p&gt;This guide explains how to install Thumbor on your own server. Once installed, you&#39;ll be able to use Thumbor as an API for transforming your images.&lt;/p&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/install-thumbor/#intro&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You&#39;ll be installing Thumbor on a VM running Ubuntu 16.04. Ubuntu 16.04 is a very common image and these instructions are intended to work on any cloud provider. Creating a VM might sound like more work than installing Thumbor on your local machine, but the minutes that you take to create a VM will probably save you hours or days of frustration trying to get Thumbor to properly install on your local machine. Although easy to use, Thumbor is notoriously difficult to install but these instructions simplify the process. If dependencies download quickly, the installation can be completed in 5 to 10 minutes.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/install-thumbor/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This post assumes that you know how to create a Ubuntu 16.04 LTS VM on a cloud platform like &lt;a href=&quot;https://cloud.google.com/compute/docs/instances/create-start-instance&quot; rel=&quot;noopener&quot;&gt;Google Cloud&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/getting-started/tutorials/launch-a-virtual-machine/&quot; rel=&quot;noopener&quot;&gt;AWS,&lt;/a&gt; or &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal?toc=%2Fazure%2Fvirtual-machines%2Flinux%2Ftoc.json&quot; rel=&quot;noopener&quot;&gt;Azure&lt;/a&gt; and how to use command line tools to set up the VM.&lt;/p&gt;
&lt;h2 id=&quot;install-thumbor-dependencies&quot;&gt;Install Thumbor Dependencies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/install-thumbor/#install-thumbor-dependencies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Update and upgrade Ubuntu&#39;s already-installed packages:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update -y &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; upgrade -y&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Install &lt;code&gt;pip&lt;/code&gt;, the package manager for Python. Later you&#39;ll install Thumbor with &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -y python-pip&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Install Thumbor&#39;s dependencies. Thumbor&#39;s documentation does not explicitly mention these dependencies, but Thumbor will not install successfully without them.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# ssl packages&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -y libcurl4-openssl-dev libssl-dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# computer vision packages&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -y python-opencv libopencv-dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# image format packages&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -y libjpeg-dev libpng-dev libwebp-dev webp&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;install-thumbor&quot;&gt;Install Thumbor &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/install-thumbor/#install-thumbor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Install Thumbor using pip.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; thumbor&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Note: Many Python developers use &lt;a href=&quot;https://pypi.org/project/virtualenv/&quot; rel=&quot;noopener&quot;&gt;virtualenv&lt;/a&gt; to manage their packages. For the sake of simplicity, these instructions do not use &lt;code&gt;virtualenv&lt;/code&gt;. If you are installing Thumbor in a standalone environment, &lt;code&gt;virtualenv&lt;/code&gt; is not necessary. If you choose to use &lt;code&gt;virtualenv&lt;/code&gt;, note that Thumbor requires Python 2.7 and will not work with newer versions of &lt;code&gt;pip&lt;/code&gt; (e.g., these instructions use &lt;code&gt;pip&lt;/code&gt; 8.1.1).&lt;/p&gt;
&lt;p&gt;If you&#39;ve successfully installed Thumbor, this should work:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;thumbor --help&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;run-thumbor&quot;&gt;Run Thumbor &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/install-thumbor/#run-thumbor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Run Thumbor. Debug logging is optional but can be helpful when you&#39;re getting started.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;thumbor --log-level debug&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Thumbor is now running.&lt;/p&gt;
&lt;h2 id=&quot;open-firewall-port&quot;&gt;Open Firewall Port &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/install-thumbor/#open-firewall-port&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By default, Thumbor runs on port 8888. If your VM&#39;s IP address is &lt;code&gt;12.123.12.122&lt;/code&gt;, then you would access Thumbor from the web browser at &lt;code&gt;http://12.123.12.123:8888/.../$IMAGE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, this probably won&#39;t work for you (yet) because cloud providers usually require that you explicitly open firewall ports before they will accept incoming traffic.&lt;/p&gt;
&lt;p&gt;Update the firewall to expose port 8888. Here&#39;s more information on how to do this for: &lt;a href=&quot;https://cloud.google.com/vpc/docs/using-firewalls&quot; rel=&quot;noopener&quot;&gt;Google Cloud&lt;/a&gt;, &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html&quot; rel=&quot;noopener&quot;&gt;AWS&lt;/a&gt;, and &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/virtual-machines/windows/nsg-quickstart-portal&quot; rel=&quot;noopener&quot;&gt;Azure&lt;/a&gt;. Note that for Google Cloud you need to first &lt;a href=&quot;https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address&quot; rel=&quot;noopener&quot;&gt;assign a static IP address to your VM&lt;/a&gt; and then &lt;a href=&quot;https://cloud.google.com/vpc/docs/special-configurations#externalhttpconnection&quot; rel=&quot;noopener&quot;&gt;allow an external HTTP connection&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;try-it-out&quot;&gt;Try It Out &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/install-thumbor/#try-it-out&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thumbor is now accessible and ready for use. Try it out by visiting the following URL:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;http://YOUR_VIRTUAL_MACHINE:8888/unsafe/100x100/https://web.dev/install-thumbor/hero.jpg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Note that this URL uses HTTP. Thumbor uses HTTP by default but can be &lt;a href=&quot;https://thumbor.readthedocs.io/en/latest/image_loader.html&quot; rel=&quot;noopener&quot;&gt;configured&lt;/a&gt; to use HTTPS.&lt;/p&gt;
&lt;p&gt;You should see an image that is 100 pixels wide by 100 pixels tall. Thumbor has taken the image &lt;code&gt;hero.jpg&lt;/code&gt; and size specified in the URL string and served the result. You can replace the image in the URL string (i.e., &lt;code&gt;https://web.dev/install-thumbor/hero.jpg&lt;/code&gt;) with any other image (e.g., &lt;code&gt;https://your-site.com/cat.jpg&lt;/code&gt;) and Thumbor will resize that image too.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://web.dev/use-thumbor/#thumbor-url-format&quot;&gt;Optimize images with Thumbor&lt;/a&gt; article has more information on using the Thumbor API. In particular, you may be interested in &lt;a href=&quot;https://web.dev/use-thumbor/#appendix:-thumbor.conf&quot;&gt;setting up a Thumbor configuration file&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;appendix:-configuring-systemd&quot;&gt;Appendix: Configuring Systemd &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/install-thumbor/#appendix:-configuring-systemd&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This step explains how to make sure that the Thumbor process keeps running, even after the VM has been restarted. This step is important for production sites, but optional if you&#39;re just playing around with Thumbor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.html&quot; rel=&quot;noopener&quot;&gt;Systemd&lt;/a&gt; is the &amp;quot;system and service manager&amp;quot; for Linux operating systems. &lt;code&gt;systemd&lt;/code&gt; makes it easy to configure when services (processes) run.&lt;/p&gt;
&lt;p&gt;You will be configuring &lt;code&gt;systemd&lt;/code&gt; to automatically start Thumbor on VM boot. If the VM is restarted, the Thumbor process will automatically restart as well. This is much more reliable than relying on user intervention to start Thumbor.&lt;/p&gt;
&lt;p&gt;Navigate to the &lt;code&gt;/lib/systemd/system&lt;/code&gt; directory. This directory contains the service files for &lt;code&gt;systemd&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /lib/systemd/system&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;As superuser, create a &lt;code&gt;thumbor.service&lt;/code&gt; file.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; thumbor.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Using your favorite text editor (vim and nano come pre-installed on Ubuntu or you can install another editor), add the following configuration to &lt;code&gt;thumbor.service&lt;/code&gt;. This configuration will run &lt;code&gt;/usr/local/bin/thumbor&lt;/code&gt; (i.e. the Thumbor binary) once networking is available and will restart Thumbor on &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html#Restart=&quot; rel=&quot;noopener&quot;&gt;failure&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[Unit]&lt;br /&gt;&lt;br /&gt;Description=Service for Thumbor image CDN&lt;br /&gt;&lt;br /&gt;Documentation=https://thumbor.readthedocs.io/en/latest/&lt;br /&gt;&lt;br /&gt;After=network.target&lt;br /&gt;&lt;br /&gt;[Service]&lt;br /&gt;&lt;br /&gt;ExecStart=/usr/local/bin/thumbor&lt;br /&gt;&lt;br /&gt;Restart=on-failure&lt;br /&gt;&lt;br /&gt;[Install]&lt;br /&gt;&lt;br /&gt;WantedBy=multi-user.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;systemctl&lt;/code&gt; is the utility used to manage &lt;code&gt;systemd&lt;/code&gt;. Use the &lt;code&gt;start&lt;/code&gt; command to start Thumbor.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl start thumbor.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Note: If Thumbor is currently running, you should stop it before attempting to start Thumbor using &lt;code&gt;systemctl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, &amp;quot;enable&amp;quot; Thumbor. This means that Thumbor will automatically start on boot.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt; thumbor.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Verify that you&#39;ve successfully configured &lt;code&gt;systemd&lt;/code&gt; by running the &lt;code&gt;status&lt;/code&gt; command.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;systemctl status thumbor.service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;If you&#39;ve successfully set up thumbor.service to use &lt;code&gt;systemd&lt;/code&gt;, the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemctl.html#status%20PATTERN%E2%80%A6%7CPID%E2%80%A6%5D&quot; rel=&quot;noopener&quot;&gt;status&lt;/a&gt; should show that it is enabled and active.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Systemctl displaying the status of Thumbor&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;164&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 466px) 466px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/e04pxe6uE090ewJ3WWPX.jpg?auto=format&amp;w=932 932w&quot; width=&quot;466&quot; /&gt;
&lt;/figure&gt;
</content>
    <author>
      <name>Katie Hempenius</name>
    </author>
  </entry>
  
  <entry>
    <title>Top tips for web performance</title>
    <link href="https://web.dev/use-srcset-to-automatically-choose-the-right-image/"/>
    <updated>2019-06-24T00:00:00Z</updated>
    <id>https://web.dev/use-srcset-to-automatically-choose-the-right-image/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;SyVKRnusyqM&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;According to &lt;a href=&quot;https://httparchive.org/reports/state-of-images&quot; rel=&quot;noopener&quot;&gt;HTTP Archive&lt;/a&gt;, a
typical mobile web page weighs over 2.6 MB, and more than two thirds of that
weight is images. That&#39;s a great opportunity for optimization!&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;&quot; decoding=&quot;async&quot; height=&quot;320&quot; loading=&quot;lazy&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/8A7JasX5JOADmB1XkjMC.svg&quot; width=&quot;700&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    &lt;a href=&quot;https://mobile.httparchive.org/&quot;&gt;Average mobile page bytes by content type&lt;/a&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;tldr&quot;&gt;tl;dr &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#tldr&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don&#39;t save images larger than their display size.&lt;/li&gt;
&lt;li&gt;Save multiple sizes for each image and use the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-srcset&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;srcset&lt;/code&gt;&lt;/a&gt;
attribute to enable the browser to choose the smallest.
The &lt;code&gt;w&lt;/code&gt; value tells the browser the width of each version:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;small.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;small.jpg 500w,&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;             medium.jpg 1000w,&lt;/span&gt;&lt;br /&gt;             large.jpg 1500w&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;save-images-with-the-right-size&quot;&gt;Save images with the right size &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#save-images-with-the-right-size&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can make your website faster and less data hungry by using images with
dimensions that match the display size. In other words, give images the right
width and height when you save them.&lt;/p&gt;
&lt;p&gt;Take a look at the images below.&lt;/p&gt;
&lt;p&gt;They appear nearly identical, but the file size of one is more than 10 times
larger than the other.&lt;/p&gt;
&lt;div class=&quot;w-columns&quot;&gt;
  &lt;figure class=&quot;w-figure&quot;&gt;
    &lt;img alt=&quot;Little Puss and Lias: two ten week old tabby kittens.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;534&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/IHpM8DG6qiNlRcbfxnt8.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
    &lt;figcaption class=&quot;w-figcaption&quot;&gt;Saved width 1000 px, file size 184 KB&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure class=&quot;w-figure&quot;&gt;
    &lt;img alt=&quot;Little Puss and Lias: two ten week old tabby kittens.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;200&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 300px) 300px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/XThwdsYxfx6KHkMxgbYI.jpg?auto=format&amp;w=600 600w&quot; width=&quot;300&quot; /&gt;
    &lt;figcaption class=&quot;w-figcaption&quot;&gt;Saved width 300 px, file size 16 KB&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;The first image is much larger in file size because it&#39;s saved with dimensions
much larger than the display size. Both images are displayed with a fixed
width of 300 pixels, so it makes sense to use an image saved at the same
size.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For fixed widths, use images saved with the same dimensions as the
display size.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;but...-what-if-display-size-varies&quot;&gt;But… what if display size varies? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#but...-what-if-display-size-varies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In a multi-device world, images aren&#39;t always displayed at a single fixed size.&lt;/p&gt;
&lt;p&gt;Image elements might have a percentage width, or be part of responsive layouts
where image display sizes change to fit the screen size.&lt;/p&gt;
&lt;p&gt;…and what about pixel-hungry devices like Retina displays?&lt;/p&gt;
&lt;h2 id=&quot;help-the-browser-choose-the-right-image-size&quot;&gt;Help the browser choose the right image size &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#help-the-browser-choose-the-right-image-size&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Wouldn&#39;t it be great if you could make each image available at different sizes, then
let the browser choose the best size for the device and display size?
Unfortunately there&#39;s a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Catch-22_(logic)&quot; rel=&quot;noopener&quot;&gt;catch-22&lt;/a&gt; when it comes to
working out which image is best. The browser should use the smallest possible
image, but it can&#39;t know the width of an image without downloading it to check.&lt;/p&gt;
&lt;p&gt;This is where &lt;code&gt;srcset&lt;/code&gt; comes in handy. You save images at different sizes, then
tell the browser the width of each version:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;small.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;     &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;small.jpg 500w, medium.jpg 1000w, large.jpg 1500w&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;     &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;w&lt;/code&gt; values show the width of each image in pixels. For example,
&lt;code&gt;small.jpg 500w&lt;/code&gt; tells the browser that &lt;a href=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&quot;&gt;small.jpg&lt;/a&gt; is 500
pixels wide. This enables the browser to choose the smallest possible image,
depending on the screen type and the viewport size—without having to
download images to check their size.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--caution&quot;&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;:
&lt;code&gt;srcset&lt;/code&gt; gives the browser information about the
saved width of each image file.&lt;/p&gt;
&lt;p&gt;It does &lt;em&gt;not&lt;/em&gt; specify the size to display the image—you still need CSS for that!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can see &lt;code&gt;srcset&lt;/code&gt; in action for the image below. If you&#39;re on a laptop or
desktop computer, change your browser window size and reopen this page.
Then use the Network panel of your browser tools to check which image was used.
(You&#39;ll need to do that in an Incognito or Private window, otherwise the
original image file will be cached.)&lt;/p&gt;
&lt;img alt=&quot;Lias and Little Puss: two ten week old grey tabby kittens&quot; decoding=&quot;async&quot; height=&quot;334&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 500px) 500px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/scLPehGom3IZLxPJiPPF.jpg?auto=format&amp;w=1000 1000w&quot; width=&quot;500&quot; /&gt;
&lt;h2 id=&quot;how-can-i-create-multiple-image-sizes&quot;&gt;How can I create multiple image sizes? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#how-can-i-create-multiple-image-sizes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You&#39;ll need to make multiple sizes available for every image you want to use
with &lt;code&gt;srcset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For one-off images such as hero images you can manually save different sizes. If
you have lots of images, such as product photos, you&#39;ll need to automate.
For that there are two approaches.&lt;/p&gt;
&lt;h3 id=&quot;incorporate-image-processing-in-your-build-process&quot;&gt;Incorporate image processing in your build process &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#incorporate-image-processing-in-your-build-process&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As part of your build process, you can add steps to create different sized
versions of your images. See &lt;a href=&quot;https://web.dev/use-imagemin-to-compress-images&quot;&gt;&amp;quot;Use Imagemin to compress images&amp;quot;&lt;/a&gt;
to learn more.&lt;/p&gt;
&lt;h3 id=&quot;use-an-image-service&quot;&gt;Use an image service &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#use-an-image-service&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Image creation and delivery can be automated using a commercial service like
&lt;a href=&quot;https://cloudinary.com/&quot; rel=&quot;noopener&quot;&gt;Cloudinary&lt;/a&gt;, or an open source equivalent such as
&lt;a href=&quot;https://github.com/thumbor/thumbor&quot; rel=&quot;noopener&quot;&gt;Thumbor&lt;/a&gt; that you install and run yourself.&lt;/p&gt;
&lt;p&gt;You upload your high resolution images, and the image service automatically
creates and delivers different image formats and sizes depending on the URL
parameters. For an example, open &lt;a href=&quot;https://res.cloudinary.com/webdotdev/f_auto/w_500/IMG_20190113_113201.jpg&quot; rel=&quot;noopener&quot;&gt;this sample image on Cloudinary&lt;/a&gt; and try changing the &lt;code&gt;w&lt;/code&gt; value or the file extension in the URL bar.&lt;/p&gt;
&lt;p&gt;Image services also have more advanced features such as the ability to automate
&amp;quot;smart cropping&amp;quot; for different image sizes and automatically deliver &lt;a href=&quot;https://developers.google.com/speed/webp/&quot; rel=&quot;noopener&quot;&gt;WebP&lt;/a&gt; images
to browsers that support the format, instead of JPEGs—without changing the file
extension.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;You can check the format delivered using your browser tools.&lt;/p&gt;
&lt;p&gt;For the image URL above, a WebP file is automatically
delivered to browsers that support WebP, without changing the &lt;code&gt;.jpg&lt;/code&gt; file
extension.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt=&quot;Chrome DevTools showing WebP content-type header for file served by Cloudinary&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;146&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y0ra5DLlntYoLV46uU1f.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;h2 id=&quot;what-if-the-image-doesn&#39;t-look-right-at-different-sizes&quot;&gt;What if the image doesn&#39;t look right at different sizes? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#what-if-the-image-doesn&#39;t-look-right-at-different-sizes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In that case, you&#39;ll need to use the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element for &amp;quot;art direction&amp;quot;:
providing a different image or image crop at different sizes. To learn more
take a look at the &lt;a href=&quot;https://web.dev/codelab-art-direction&quot;&gt;&amp;quot;Art direction&amp;quot;&lt;/a&gt; codelab.&lt;/p&gt;
&lt;h2 id=&quot;what-about-pixel-density&quot;&gt;What about pixel density? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#what-about-pixel-density&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;High-end devices have smaller (more dense) physical pixels. For example, a
high-end phone might have two or three times as many pixels in each row of
pixels as a cheaper device.&lt;/p&gt;
&lt;p&gt;That can affect the size you need to save your images. We won&#39;t go into the gory
details here, but you can find out more from the
&lt;a href=&quot;https://web.dev/codelab-density-descriptors&quot;&gt;&amp;quot;Use density descriptors&amp;quot;&lt;/a&gt; codelab.&lt;/p&gt;
&lt;h2 id=&quot;what-about-the-display-size-of-the-image&quot;&gt;What about the display size of the image? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#what-about-the-display-size-of-the-image&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can use &lt;code&gt;sizes&lt;/code&gt; to make &lt;code&gt;srcset&lt;/code&gt; work even better.&lt;/p&gt;
&lt;p&gt;Without it, the browser uses the full width of the viewport when choosing an
image from a &lt;code&gt;srcset&lt;/code&gt;. The &lt;code&gt;sizes&lt;/code&gt; attribute tells the browser the width that an
image element will be displayed, so the browser can choose the smallest possible
image file—before it makes any layout calculations.&lt;/p&gt;
&lt;p&gt;In the example below, &lt;code&gt;sizes=&amp;quot;50vw&amp;quot;&lt;/code&gt; tells the browser that this image will be
displayed at 50% of the viewport width.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;small.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;small.jpg 500w, medium.jpg 1000w, large.jpg 1500w&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;     &lt;span class=&quot;token attr-name&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50vw&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;     &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You can see this in action at
&lt;a href=&quot;https://simpl.info/sizeswvalues/&quot; rel=&quot;noopener&quot;&gt;simpl.info/sizes&lt;/a&gt; and the &lt;a href=&quot;https://web.dev/codelab-specifying-multiple-slot-widths&quot;&gt;&amp;quot;Specifying multiple slot widths&amp;quot;&lt;/a&gt; codelab.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--caution&quot;&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;:
&lt;code&gt;sizes&lt;/code&gt; gives the browser information about the display width
of an image element.&lt;/p&gt;
&lt;p&gt;As with &lt;code&gt;srcset&lt;/code&gt; it does NOT specify the size to display the image—you need
CSS for that.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;what-about-browser-support&quot;&gt;What about browser support? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#what-about-browser-support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; are &lt;a href=&quot;https://caniuse.com/#feat=srcset&quot; rel=&quot;noopener&quot;&gt;supported by over 90% of
browsers globally&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If a browser does not support &lt;code&gt;srcset&lt;/code&gt; or &lt;code&gt;sizes&lt;/code&gt; it will fall back to just using the &lt;code&gt;src&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;This makes &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; great progressive enhancements!&lt;/p&gt;
&lt;h2 id=&quot;learn-more&quot;&gt;Learn more &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-srcset-to-automatically-choose-the-right-image/#learn-more&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Take a look at the &lt;a href=&quot;https://web.dev/fast#optimize-your-images&quot;&gt;&amp;quot;Optimize your images&amp;quot;&lt;/a&gt; section
of web.dev for a deeper dive into image optimization. For a more guided
experience, consider trying the free &lt;a href=&quot;https://udacity.com/course/responsive-images--ud882&quot; rel=&quot;noopener&quot;&gt;&amp;quot;Responsive
Images&amp;quot;&lt;/a&gt; course offered by
Udacity.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This post accompanies &lt;a href=&quot;https://www.youtube.com/playlist?list=PLNYkxOF6rcICVl6Vb-AFlw81bQLuv6a_P&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Top tips for web performance&lt;/strong&gt;&lt;/a&gt;: a fortnightly video series showing simple techniques to improve site speed.&lt;/p&gt;
&lt;/div&gt;
</content>
    <author>
      <name>Sam Dutton</name>
    </author>
  </entry>
  
  <entry>
    <title>Image policies for fast load times and more</title>
    <link href="https://web.dev/image-policies/"/>
    <updated>2019-05-31T00:00:00Z</updated>
    <id>https://web.dev/image-policies/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Images often take up a significant amount of visual space and make up the
majority of the downloaded bytes on a website. Optimizing images can improve
loading performance and reduce network traffic.&lt;/p&gt;
&lt;p&gt;Surprisingly, more than half of the sites on the web are serving poorly
compressed or unnecessarily large images. This leaves a lot of room for
performance improvements simply by optimizing the images.&lt;/p&gt;
&lt;p&gt;You may ask, how do I know if my images are optimized and how should I optimize
them? We are experimenting with a new set of feature policies for image
optimization: &lt;code&gt;oversized-images&lt;/code&gt;, &lt;code&gt;unoptimized-lossy-images&lt;/code&gt;,
&lt;code&gt;unoptimized-lossless-images&lt;/code&gt;, and&lt;code&gt;unoptimized-lossless-images-strict&lt;/code&gt;.
All are now available for &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md&quot; rel=&quot;noopener&quot;&gt;origin
trials&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;optimized-image-policies&quot;&gt;Optimized image policies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#optimized-image-policies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Feature policy is introducing a new set restrictions on images that can be
applied with development-time enforcement. Images violating any of the
restrictions will be rendered as placeholder images, which are easy to identify
and fix. These policies can be specified in report-only mode where images will
render normally without enforcement while violations are being observed via
reports. (See &lt;a href=&quot;https://web.dev/image-policies/#report-only-mode-in-the-wild&quot;&gt;Report-only mode in the wild&lt;/a&gt;,
below for details.)&lt;/p&gt;
&lt;h3 id=&quot;oversized-images&quot;&gt;oversized-images &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#oversized-images&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;oversized-images&lt;/code&gt; feature policy restricts the intrinsic dimensions
of an image in relation to its container size.&lt;/p&gt;
&lt;p&gt;When a document uses the &lt;code&gt;oversized-images&lt;/code&gt; policy, any &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element
whose intrinsic resolution is more than X times larger than the container size
in either dimension will be replaced with a placeholder image.&lt;/p&gt;
&lt;h4 id=&quot;why&quot;&gt;Why? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#why&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Serving images larger than what the viewing device can render—for example,
serving desktop images to mobile contexts, or serving high-pixel-density images
to a low-pixel-density device—is wasting network traffic and device
memory. Read &lt;a href=&quot;https://web.dev/serve-images-with-correct-dimensions/&quot;&gt;Serve images with correct dimensions&lt;/a&gt;
and &lt;a href=&quot;https://web.dev/serve-responsive-images/&quot;&gt;Serve responsive images&lt;/a&gt;
for information on optimizing your images.&lt;/p&gt;
&lt;h4 id=&quot;examples&quot;&gt;Examples &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#examples&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A few examples illustrate this. The following shows the default behavior when cutting an image&#39;s display size in half.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The default resizing behavior.&quot; decoding=&quot;async&quot; height=&quot;401&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 326px) 326px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/QR01OUN3VXTbOhhSOZBz.png?auto=format&amp;w=652 652w&quot; width=&quot;326&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;The default resizing behavior.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If I apply the following feature policy, I get a placeholder image instead.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Feature-Policy: oversized-images *(2);&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;When the image is too large for the container.&quot; decoding=&quot;async&quot; height=&quot;401&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 326px) 326px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/NErIMVS4qsSVHek2UtDZ.png?auto=format&amp;w=652 652w&quot; width=&quot;326&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;When the image is too large for the container.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I get similar results if I lower only the width or the height.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Resized width&quot; decoding=&quot;async&quot; height=&quot;401&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 326px) 326px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/S11HV1w6uqkXq6GDRKVx.png?auto=format&amp;w=652 652w&quot; width=&quot;326&quot; /&gt;
  &lt;img alt=&quot;Resized height&quot; decoding=&quot;async&quot; height=&quot;401&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 326px) 326px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/dMPfyFsJ5qexNSj0Q8Ia.png?auto=format&amp;w=652 652w&quot; width=&quot;326&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Resize width and height.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;how-to-use&quot;&gt;How to use &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#how-to-use&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To summarize, &lt;code&gt;oversized-images&lt;/code&gt; policy can be specified through either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Feature-Policy&lt;/code&gt; HTTP header&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;code&gt;allow&lt;/code&gt; attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To declare the &lt;code&gt;oversized-images&lt;/code&gt; policy, you need to provide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The feature name, &lt;code&gt;oversized-images&lt;/code&gt; (Required)&lt;/li&gt;
&lt;li&gt;A list of origins (Optional)&lt;/li&gt;
&lt;li&gt;The threshold values (i.e., the downscaling ratio X) for the origins, specified in
parenthesis (Optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend a downscaling ratio of 2.0 or lower. Consider using
&lt;a href=&quot;https://web.dev/serve-responsive-images/&quot;&gt;responsive images&lt;/a&gt; with different resolutions to
best serve images on various screen sizes, resolutions, and so on.&lt;/p&gt;
&lt;h4 id=&quot;more-examples&quot;&gt;More examples &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#more-examples&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Feature-Policy: oversized-images *(2.0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The policy is enforced on all origins with a threshold value of 2.0. Any
&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element with an image whose downscaling ratio that is greater than
2.0 is disallowed and will be replaced with a placeholder image.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Feature-Policy: oversized-images *(inf) &#39;self&#39;(1.5)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The policy is enforced on the site&#39;s origin with a threshold value of 1.5.
&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements in top-level browsing contexts and same origin nested
browsing contexts will only render normally if the downscaling ratio is less
than or equal to 1.5. &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements everywhere else will render normally.&lt;/p&gt;
&lt;h3 id=&quot;unoptimized-lossylossless-images&quot;&gt;unoptimized-{lossy,lossless}-images &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#unoptimized-lossylossless-images&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;unoptimized-lossy-images&lt;/code&gt;, &lt;code&gt;unoptimized-lossless-images&lt;/code&gt;,
&lt;code&gt;unoptimized-lossless-images-strict&lt;/code&gt; feature policies restrict the file
size of an image in relation to its intrinsic resolution:&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;unoptimized-lossy-images&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;Lossy formats should not exceed a byte-per-pixel ratio of X, with a fixed &lt;strong&gt;1KB&lt;/strong&gt; overhead allowance. For a W x H image, the file size threshold is calculated as W x H x X + 1024.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;unoptimized-lossless-images&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;Lossless formats should not exceed a byte-per-pixel ratio of X, with a fixed &lt;strong&gt;10KB&lt;/strong&gt; overhead allowance. For a W x H image, the file size threshold is calculated as W x H x X + 10240.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;unoptimized-lossless-images-strict&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;Lossless formats should not exceed a byte-per-pixel ratio of X, with a fixed &lt;strong&gt;1KB&lt;/strong&gt; overhead allowance. For a W x H image, the file size threshold is calculated as W x H x X + 1024.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;When a document uses any of these policies, any &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element violating
the constraint will be replaced with a placeholder image.&lt;/p&gt;
&lt;h4 id=&quot;why-2&quot;&gt;Why? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#why-2&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The larger the download size is, the longer it takes for an image to load. The
file size should be kept as small as possible when optimizing an image:
stripping metadata, picking a good image format, using image compression, and so on.
Read &lt;a href=&quot;https://web.dev/use-imagemin-to-compress-images/&quot;&gt;Use Imagemin to compress images&lt;/a&gt; and
&lt;a href=&quot;https://web.dev/serve-images-webp/&quot;&gt;Use WebP images&lt;/a&gt; for information on
optimizing your images.&lt;/p&gt;
&lt;h4 id=&quot;example&quot;&gt;Example &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#example&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The following shows the default browser behavior. Without the feature policy an unoptimized lossy image can be displayed just the same as an optimized image.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Comparing an optimized image with an unoptimized image.&quot; decoding=&quot;async&quot; height=&quot;401&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 326px) 326px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/kxabc5874fW5IvPnqR9E.png?auto=format&amp;w=652 652w&quot; width=&quot;326&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Comparing an optimized image with an unoptimized image.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If I apply the following feature policy, I get a placeholder image instead.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Feature-Policy: unoptimized-lossy-images *(0.5);&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;When the image is not optimized.&quot; decoding=&quot;async&quot; height=&quot;401&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 326px) 326px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/Y0cCIEuFI1M3DaKfxBkI.png?auto=format&amp;w=652 652w&quot; width=&quot;326&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;When the image is not optimized.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;how-to-use-2&quot;&gt;How to use &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#how-to-use-2&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you are new to feature policy, please check out &lt;a href=&quot;https://developers.google.com/web/updates/2018/06/feature-policy&quot; rel=&quot;noopener&quot;&gt;Introduction to Feature
Policy&lt;/a&gt; for
more details.&lt;/p&gt;
&lt;p&gt;To summarize, &lt;code&gt;unoptimized-{lossy,lossless}-images&lt;/code&gt; policies can be either
specified through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Feature-Policy&lt;/code&gt; HTTP header&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;code&gt;allow&lt;/code&gt; attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To declare an &lt;code&gt;unoptimized-{lossy,lossless}-images&lt;/code&gt; policy, you will need to
provide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The feature name, for example, &lt;code&gt;unoptimized-lossy-images&lt;/code&gt; (Required)&lt;/li&gt;
&lt;li&gt;A list of origins (Optional)&lt;/li&gt;
&lt;li&gt;The threshold values (i.e., byte-per-pixel ratio X) for the origins, specified
in parenthesis (Optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend a byte-per-pixel ratio of 0.5 or lower for
&lt;code&gt;unoptimized-lossy-images&lt;/code&gt; and a byte-per-pixel ratio of 1 or lower for
&lt;code&gt;unoptimized-lossless-images&lt;/code&gt; and &lt;code&gt;unoptimized-lossless-images-strict&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;WebP formats have better compression ratios than other formats. Serve all your
images in WebP lossy format if you can. If that is not sufficient, try WebP
lossless format. Use JPEG on browsers that don&#39;t support WebP formats. Use PNG
if none of thes formats work.&lt;/p&gt;
&lt;p&gt;If you are using WebP formats, try with stricter thresholds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0.2 for WEBPV8&lt;/li&gt;
&lt;li&gt;0.5 for WEBPL&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;more-examples-2&quot;&gt;More examples &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#more-examples-2&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Feature-Policy:  unoptimized-lossy-images *(0.5);&lt;br /&gt;                 unoptimized-lossless-images *(1.0);&lt;br /&gt;                 unoptimized-lossless-images-strict *(1.0);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This policy is enforced on all origins with a threshold value of 0.5 (for lossy
formats) and 1 (for lossless formats). Any &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element whose image has a
byte-per-pixel ratio exceeding the constraint is disallowed and will be replaced
with a placeholder image.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Feature-Policy: unoptimized-lossy-images *(inf) &#39;self&#39;(0.3);&lt;br /&gt;                unoptimized-lossless-images *(inf) &#39;self&#39;(0.8);&lt;br /&gt;                unoptimized-lossless-images-strict *(inf) &#39;self&#39;(0.8);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This policy is enforced on the site&#39;s origin with a threshold value of 0.3 (for
lossy formats) and 0.8 (for lossless formats). The &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements in top-level
browsing contexts and same origin nested browsing contexts will only render
normally if the byte-per-pixel ratio meets these constraints. The &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements
everywhere else will render normally.&lt;/p&gt;
&lt;h3 id=&quot;report-only-mode-in-the-wild&quot;&gt;Report-only mode in the wild &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#report-only-mode-in-the-wild&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Publishing a site with placeholder images may not be what you want. You can use
the policies in enforcement mode (with unoptimized images rendered as
placeholder images) during development and staging, and use report-only mode in
production. (Check out &lt;a href=&quot;https://github.com/w3c/webappsec-feature-policy/blob/master/reporting.md&quot; rel=&quot;noopener&quot;&gt;Feature Policy
Reporting&lt;/a&gt;
for more details.) Similar to &lt;code&gt;Feature-Policy&lt;/code&gt; HTTP header, the
&lt;code&gt;Feature-Policy-Report-Only&lt;/code&gt; header lets you observe violation reports in the
wild without any enforcement.&lt;/p&gt;
&lt;h3 id=&quot;limitations&quot;&gt;Limitations &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#limitations&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Image policies only work on HTML image elements (&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;,
etc.) and are not yet supported on background images or generated content. If you
would like to have policies supported on broader contents, please let us know.&lt;/p&gt;
&lt;h2 id=&quot;optimizing-your-images&quot;&gt;Optimizing your images &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#optimizing-your-images&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;ve talked quite a bit about optimizing your images, but haven&#39;t said how to do it. That topic is out of scope for this article, but you can learn more from the links below and from the codelabs listed at the end of the article.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/fast#optimize-your-images&quot;&gt;Optimizing images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/serve-images-with-correct-dimensions/&quot;&gt;Serve images with correct dimensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;experiment-with-the-policies-in-origin-trials&quot;&gt;Experiment with the policies in origin trials &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#experiment-with-the-policies-in-origin-trials&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Image policies are available in Chrome 75 via an origin trial.&lt;/p&gt;
&lt;p&gt;To participate:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.chrome.com/origintrials/#/view_trial/2562548187973812225&quot; rel=&quot;noopener&quot;&gt;request a token&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the token on any pages in your origin using an &lt;code&gt;Origin-Trial&lt;/code&gt; HTTP
header:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;Origin-Trial: **token as provided in the developer console**&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify an image policy via HTTP header Feature-Policy header:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;Feature-Policy: **image policies specified here**&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md&quot; rel=&quot;noopener&quot;&gt;Origin Trials Guide for Web
Developers&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;h2 id=&quot;please-give-us-feedback&quot;&gt;Please give us feedback &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/image-policies/#please-give-us-feedback&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully this article has given you a good understanding of the image policies
and gotten you excited. We&#39;d really love for you to try out the policies and
give us feedback.&lt;/p&gt;
&lt;p&gt;You can give us feedback for each of the features mentioned in this article to
our mailing list: &lt;a href=&quot;mailto:feature-control@chromium.org&quot; rel=&quot;noopener&quot;&gt;feature-control@&lt;/a&gt;&lt;a href=&quot;mailto:feature-control@chromium.org&quot; rel=&quot;noopener&quot;&gt;chromium.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We would love to know what threshold values you used and found useful. We would
love to know whether &lt;code&gt;unoptimized-lossless-images&lt;/code&gt; or
&lt;code&gt;unoptimized-lossless-images-strict&lt;/code&gt; is more intuitive and easy to use, or if we
should use a difference overhead allowance instead. We will be sending out a
survey near the end of the trial. Stay tuned!&lt;/p&gt;
</content>
    <author>
      <name>Luna Lu</name>
    </author>
  </entry>
  
  <entry>
    <title>Use lazysizes to lazy-load images</title>
    <link href="https://web.dev/use-lazysizes-to-lazyload-images/"/>
    <updated>2018-11-05T00:00:00Z</updated>
    <id>https://web.dev/use-lazysizes-to-lazyload-images/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Browser-level lazy-loading is now available! Refer to the &lt;a href=&quot;https://web.dev/browser-level-image-lazy-loading/&quot;&gt;Built-in lazy-loading for the
web&lt;/a&gt; article to learn how to use the &lt;code&gt;loading&lt;/code&gt; attribute and leverage
lazysizes as a fallback for browsers that do not yet support it.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Lazy-loading&lt;/strong&gt; is the strategy of loading resources as they are needed, rather
than in advance. This approach frees up resources during the initial page load
and avoids loading assets that are never used.&lt;/p&gt;
&lt;p&gt;Images that are offscreen during the initial pageload are ideal candidates for
this technique. Best of all, &lt;a href=&quot;https://github.com/aFarkas/lazysizes&quot; rel=&quot;noopener&quot;&gt;lazysizes&lt;/a&gt;
makes this a very simple strategy to implement.&lt;/p&gt;
&lt;h2 id=&quot;what-is-lazysizes&quot;&gt;What is lazysizes? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-lazysizes-to-lazyload-images/#what-is-lazysizes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aFarkas/lazysizes&quot; rel=&quot;noopener&quot;&gt;lazysizes&lt;/a&gt; is the most popular library
for lazy-loading images. It is a script that intelligently loads images as the
user moves through the page and prioritizes images that the user will encounter
soon.&lt;/p&gt;
&lt;h2 id=&quot;add-lazysizes&quot;&gt;Add lazysizes &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-lazysizes-to-lazyload-images/#add-lazysizes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is simple to add lazysizes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the lazysizes script to your pages.&lt;/li&gt;
&lt;li&gt;Choose the images you want to lazy-load.&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and/or &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; tags for those images.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;add-the-lazysizes-script&quot;&gt;Add the lazysizes script &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-lazysizes-to-lazyload-images/#add-the-lazysizes-script&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Add the lazysizes
&lt;a href=&quot;https://github.com/aFarkas/lazysizes/blob/gh-pages/lazysizes.min.js&quot; rel=&quot;noopener&quot;&gt;script&lt;/a&gt; to
your pages:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lazysizes.min.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;update-lessimggreater-andor-lesspicturegreater-tags&quot;&gt;Update &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and/or &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; tags &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-lazysizes-to-lazyload-images/#update-lessimggreater-andor-lesspicturegreater-tags&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag instructions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flower.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flower.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lazyload&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;When you update the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag you make two changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Add the &lt;code&gt;lazyload&lt;/code&gt; class&lt;/strong&gt;: This indicates to lazysizes that the
image should be lazy-loaded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change the &lt;code&gt;src&lt;/code&gt; attribute to &lt;code&gt;data-src&lt;/code&gt;&lt;/strong&gt;: When it is time to load the
image, the lazysizes code sets the image &lt;code&gt;src&lt;/code&gt; attribute using the value
from the &lt;code&gt;data-src&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; tag instructions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/webp&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flower.webp&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/jpeg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flower.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flower.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/webp&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flower.webp&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/jpeg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flower.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flower.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lazyload&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;When you update the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; tag you make two changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the &lt;code&gt;lazyload&lt;/code&gt; class to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;Change the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; tag &lt;code&gt;srcset&lt;/code&gt; attribute to &lt;code&gt;data-srcset&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--codelab&quot;&gt;
&lt;p&gt;&lt;strong&gt;Try it&lt;/strong&gt;!
&lt;a href=&quot;https://web.dev/codelab-use-lazysizes-to-lazyload-images&quot;&gt;Use lazysizes to only load images that are in the current viewport&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;verify&quot;&gt;Verify &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/use-lazysizes-to-lazyload-images/#verify&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Open DevTools and scroll down the page to see these changes in action. As you
scroll, you should see new network requests occur and &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag classes change
from &lt;code&gt;lazyload&lt;/code&gt; to &lt;code&gt;lazyloaded&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, you can use Lighthouse to verify that you haven&#39;t forgotten to
lazy-load any offscreen images. Run the Lighthouse Performance Audit
(&lt;strong&gt;Lighthouse &amp;gt; Options &amp;gt; Performance&lt;/strong&gt;) and look for the results of the
&lt;strong&gt;Defer offscreen images&lt;/strong&gt; audit.&lt;/p&gt;
</content>
    <author>
      <name>Katie Hempenius</name>
    </author>
  </entry>
</feed>
