<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://web.dev/</id>
  <title>Shubhie Panicker on web.dev</title>
  <updated>2021-08-11T17:14:17Z</updated>
  <author>
    <name>Shubhie Panicker</name>
  </author>
  <link href="https://web.dev/authors/shubhie/feed.xml" rel="self"/>
  <link href="https://web.dev/"/>
  <icon>https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/sInJ1hYQTzeVJUGaOjlk.jpeg?auto=format</icon>
  <logo>https://web.dev/images/shared/rss-banner.png</logo>
  <subtitle>Tech Lead Manager on the Chrome Web Platform team</subtitle>
  
  
  <entry>
    <title>Conformance for Frameworks</title>
    <link href="https://web.dev/conformance/"/>
    <updated>2021-06-15T00:00:00Z</updated>
    <id>https://web.dev/conformance/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;In our &lt;a href=&quot;https://web.dev/aurora&quot;&gt;introductory blog post&lt;/a&gt;, we covered how we&#39;ve learned a lot while
building and using frameworks and tools to develop and maintain large scale web applications such as
Google Search, Maps, Photos, and so on. By safeguarding developers from writing code that can
negatively affect user experience, we proved that frameworks can play a key role in shifting
outcomes for performance and application quality.&lt;/p&gt;
&lt;p&gt;Internally at Google, we used the term &amp;quot;&lt;strong&gt;Conformance&lt;/strong&gt;&amp;quot; to describe this methodology, and this
article covers how we plan to open-source this concept to the JavaScript framework ecosystem.&lt;/p&gt;
&lt;h2 id=&quot;what-is-conformance&quot;&gt;What is Conformance? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/conformance/#what-is-conformance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At Google, Conformance was an evolution. Teams relied on a small set of deeply experienced
maintainers who did extensive code reviews, flagging things that impacted app quality and
maintainability well beyond correctness issues. To scale this to growing teams of app developers, a
Conformance system was developed to codify best practices in a way that is automated and
enforceable. This ensured a consistently high bar for app quality and codebase maintainability
regardless of the number of code contributors.&lt;/p&gt;
&lt;p&gt;Conformance is a system that ensures that developers stay on the well-lit path;
it builds confidence and ensures predictable outcomes. It makes teams
productive, and becomes crucial for &lt;em&gt;scale&lt;/em&gt; -- as teams grow and more features
are developed simultaneously. It empowers developers to focus on building
product features, freeing them from minutiae and the changing landscape in
various areas such as performance, accessibility, security, etc. Anyone can
opt-out of Conformance at any time, and it should be customizable to the extent
that teams will have the option to enforce whatever they decide to commit to.&lt;/p&gt;
&lt;p&gt;Conformance is founded on &lt;strong&gt;strong defaults&lt;/strong&gt; and providing &lt;strong&gt;actionable rules&lt;/strong&gt; that can be
enforced at &lt;strong&gt;authoring time&lt;/strong&gt;. This breaks down into the following 3 principles.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Conformance in this article focuses on coding best practices to achieve predictable loading
performance &amp;amp; &lt;a href=&quot;https://web.dev/vitals/&quot;&gt;Core Web Vital&lt;/a&gt; scores, but the principles apply equally to
other aspects such as security, accessibility, and so forth.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;1.-strong-defaults&quot;&gt;1. Strong defaults &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/conformance/#1.-strong-defaults&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A foundational aspect of conformance is ensuring that the tools developers use have strong defaults
in place. This means solutions are not only baked into frameworks, but also framework design
patterns make it easy to do the right thing and hard to follow anti-patterns. The framework supports
developers with application design and code structure.&lt;/p&gt;
&lt;p&gt;For loading performance, every resource (fonts, CSS, JavaScript, images, etc.) should be optimized.
This is a complex challenge involving trimming of bytes, reducing round trips, and separating out
what is needed for the first render, visual readiness, and user interaction. For example, extracting
critical CSS, and setting priority on important images.&lt;/p&gt;
&lt;h3 id=&quot;2.-actionable-rules&quot;&gt;2. Actionable rules &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/conformance/#2.-actionable-rules&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even with foundational optimizations in place, developers still have to make choices. There&#39;s a
spectrum of possibilities for optimizations when it comes to how much developer input is needed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defaults that require no developer input such as inlining critical CSS.&lt;/li&gt;
&lt;li&gt;Require developer opt-in. For example, using a framework-provided image component to size and
scale images.&lt;/li&gt;
&lt;li&gt;Require developer opt-in and customization. For example, tagging important images to be loaded
early.&lt;/li&gt;
&lt;li&gt;Not a specific feature but things that still require developer decision. For example, avoiding
fonts or synchronous scripts that delay early rendering.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&quot;Diagram that shows a spectrum between automatic and manual developer optimizations&quot; decoding=&quot;async&quot; height=&quot;450&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/A4kWjuu0tExEsTC4PoHe.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;Optimizations that require any decision by developers pose a risk to the performance of the
application. As features are added and your team scales, even the most experienced developers cannot
keep up with the constantly changing best practices, nor is it the best use of their time. For
Conformance, appropriate actionable rules are as important as strong defaults to ensure that the
application continues to meet a certain standard even when developers continue to make changes.&lt;/p&gt;
&lt;h3 id=&quot;3.-authoring-time&quot;&gt;3. Authoring time &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/conformance/#3.-authoring-time&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It&#39;s important to catch and &lt;em&gt;preclude&lt;/em&gt; performance problems early in the development lifecycle.
Authoring time, before code is committed, is ideally suited to catching and addressing problems. The
later a problem is caught in the development lifecycle, the harder and more expensive it is to
address it. While this applies to correctness issues, it is also true for performance issues, as
many of these issues will not be retroactively addressed once committed to the codebase.&lt;/p&gt;
&lt;p&gt;Today, most performance feedback is out-of-band via documentation, one-off audits, or it is surfaced
too late via metrics regression after deployment to production. We want to bring this to authoring
time.&lt;/p&gt;
&lt;h2 id=&quot;conformance-in-frameworks&quot;&gt;Conformance in Frameworks &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/conformance/#conformance-in-frameworks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To maintain a high bar of user experience for loading performance, the following questions need to
be answered:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What constitutes optimal loading, and what are the common issues that could impact it adversely?&lt;/li&gt;
&lt;li&gt;Which solutions can be baked in that do not need any developer input?&lt;/li&gt;
&lt;li&gt;How can we ensure that the developer uses these solutions and leverages them optimally?&lt;/li&gt;
&lt;li&gt;What other choices could the developer make that impact loading performance?&lt;/li&gt;
&lt;li&gt;What are the code patterns that can tell us about these choices (#3 and #4 above) early at
authoring time?&lt;/li&gt;
&lt;li&gt;What rules can we formulate to assess these code patterns? How can they be surfaced to the
developer at authoring time while seamlessly integrated into their workflow?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To bring the Conformance model we have internally at Google to open-source frameworks, our team has
experimented heavily in Next.js and we are excited to share our refined vision and plans. We&#39;ve
realized that the best set of rules that can assess code patterns will need to be a combination of
&lt;strong&gt;static code analysis&lt;/strong&gt; and &lt;strong&gt;dynamic checks.&lt;/strong&gt; These rules can span multiple surfaces, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;Dynamic checks in the user&#39;s development server (post DOM creation)&lt;/li&gt;
&lt;li&gt;Module bundler (webpack)&lt;/li&gt;
&lt;li&gt;CSS tooling (still exploratory)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By taking advantage of providing rules through different tools, we can ensure they are cohesive but
also encompass any user experience issues that directly impact loading performance. Additionally,
these rules can also be surfaced to developers at different times:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;During local development in the development server, browser and user&#39;s IDE will surface warnings,
prompting developers to make small code changes.&lt;/li&gt;
&lt;li&gt;At build time, unresolved issues will be resurfaced in the user&#39;s terminal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a nutshell, teams will choose outcomes they care about, such as Core Web Vitals or loading
performance, and enable relevant rulesets for all code contributors to follow.&lt;/p&gt;
&lt;p&gt;While this works really well for new projects, it&#39;s not easy to upgrade large codebases to comply
with full rulesets. At Google we have an extensive system for opting-out at different levels such as
individual lines of source code, entire directories, legacy codebases or parts of the app that are
not under active development. We are actively exploring effective strategies for bringing this to
teams using open-source frameworks.&lt;/p&gt;
&lt;h2 id=&quot;conformance-in-next.js&quot;&gt;Conformance in Next.js &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/conformance/#conformance-in-next.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ESLint is widely used among JavaScript developers. and over 50% of Next.js applications use ESLint
in some part of their build workflow. Next.js v11 introduced out-of-the-box ESLint support that
includes a &lt;a href=&quot;https://nextjs.org/docs/basic-features/eslint#eslint-plugin&quot; rel=&quot;noopener&quot;&gt;custom plugin&lt;/a&gt; and
&lt;a href=&quot;https://nextjs.org/docs/basic-features/eslint#base-configuration&quot; rel=&quot;noopener&quot;&gt;shareable configuration&lt;/a&gt; to
make it easier to catch common framework-specific issues during development and at build time. This
can help developers fix significant problems at authoring time. Examples include when a certain
component is used, or not used, in a way that could harm performance as in &lt;a href=&quot;https://nextjs.org/docs/messages/no-html-link-for-pages&quot; rel=&quot;noopener&quot;&gt;No HTML link for
page&lt;/a&gt;). Or, if a certain font, stylesheet,
or script can negatively affect resource loading on a page. For example, &lt;a href=&quot;https://nextjs.org/docs/messages/no-sync-scripts&quot; rel=&quot;noopener&quot;&gt;No synchronous
script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition to ESLint, &lt;a href=&quot;https://nextjs.org/blog/next-9#built-in-zero-config-typescript-support&quot; rel=&quot;noopener&quot;&gt;integrated
type-checking&lt;/a&gt; in both
development and production has been supported in Next.js since v9 with TypeScript support. Multiple
components provided by the framework (Image, Script, Link) have been built as an extension of HTML
elements (&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) to provide developers with a performant approach to adding
content to a web page. Type-checking supports appropriate usage of these features by ensuring that
properties and options assigned are in the acceptable scope of supported values and types. See
&lt;a href=&quot;https://nextjs.org/docs/api-reference/next/image#width&quot; rel=&quot;noopener&quot;&gt;required Image width and height&lt;/a&gt; for an
example.&lt;/p&gt;
&lt;h3 id=&quot;surfacing-errors-with-toasts-and-overlays&quot;&gt;Surfacing Errors With Toasts and Overlays &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/conformance/#surfacing-errors-with-toasts-and-overlays&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned previously, Conformance rules can be surfaced in multiple areas. Toasts and overlays
are currently being explored as a way to surface errors directly in the browser within the user&#39;s
local development environment.&lt;/p&gt;
&lt;img alt=&quot;Errors surfaced via toasts&quot; decoding=&quot;async&quot; height=&quot;454&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/6euyc60GeSrmqpDprbQ7.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;Many error-checking and auditing tools that developers rely on (Lighthouse, Chrome DevTools Issues
tab) are passive and require some form of user interaction to retrieve information. Developers are
more likely to act when errors are surfaced directly within their existing tooling, and when they
provide concrete and specific actions that should be taken to fix the problem.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Utilizing toasts and overlays as a UI surface for Conformance is still being explored in
Next.js.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;conformance-in-other-frameworks&quot;&gt;Conformance in Other Frameworks &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/conformance/#conformance-in-other-frameworks&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Conformance is being explored in Next.js first with the goal of expanding to other frameworks
(Nuxt, Angular, etc.). ESLint and TypeScript are already used in many frameworks in many
different ways, but the concept of a cohesive, browser-level runtime system is being actively
explored.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/conformance/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Conformance codifies best practices into rulesets that are actionable for developers as simple code
patterns. The Aurora team has focused on loading performance, but other best practices, such as
accessibility and security, are just as applicable.&lt;/p&gt;
&lt;p&gt;Following Conformance rules should result in predictable outcomes, and achieving a high bar for user
experience can become a side-effect of building on your tech stack. Conformance makes teams
productive, and ensures a high quality bar for the application, even as teams and codebases grow
over time.&lt;/p&gt;
</content>
    <author>
      <name>Shubhie Panicker</name>
    </author><author>
      <name>Houssein Djirdeh</name>
    </author>
  </entry>
  
  <entry>
    <title>Introducing Aurora</title>
    <link href="https://web.dev/introducing-aurora/"/>
    <updated>2021-06-15T00:00:00Z</updated>
    <id>https://web.dev/introducing-aurora/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;On the Chrome team, we care about user experience and a thriving web ecosystem.
We want users to have the best possible experience on the web, not only with
static documents but also when they use rich, highly-interactive applications.&lt;/p&gt;
&lt;p&gt;Open-source tools and frameworks play a large role in enabling developers to
build modern apps for the web, while also supporting good developer experiences.
These frameworks and tools empower companies of all sizes, as well as
individuals building for the web.&lt;/p&gt;
&lt;p&gt;We believe that frameworks can also play a big role in helping developers with
key quality aspects such as performance, accessibility, security, mobile
readiness. Instead of asking every developer and site owner to become an expert
in these areas and keep up with the constantly changing best practices, the
framework can support these with baked-in solutions. This empowers developers
and enables them to focus on building product features.&lt;/p&gt;
&lt;p&gt;In a nutshell, our vision is that a high bar of UX quality becomes a side effect
of building for the web.&lt;/p&gt;
&lt;h2 id=&quot;aurora:-a-collaboration-between-chrome-and-open-source-web-frameworks-and-tools&quot;&gt;Aurora: a collaboration between Chrome and open-source web frameworks &amp;amp; tools &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/introducing-aurora/#aurora:-a-collaboration-between-chrome-and-open-source-web-frameworks-and-tools&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For almost two years, we have worked with some of the most popular frameworks
such as Next.js, Nuxt and Angular, working to improve web performance. We&#39;ve
also funded popular tools and libraries such as Vue, ESLint, webpack. Today, we
are giving this effort a name - &lt;strong&gt;Aurora&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;An aurora is a natural light display that shimmers in the sky. As we are trying
to help user experiences built with frameworks shimmer and shine, we thought
this name was an appropriate choice.&lt;/p&gt;
&lt;img alt=&quot;Aurora logo&quot; decoding=&quot;async&quot; height=&quot;450&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/lxaUR7Za1DoQMJuJEZHP.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;In the coming months, we&#39;ll be sharing a lot more detail on Aurora. This is a
collaboration between a small team of Chrome engineers (internally codenamed
WebSDK) and framework authors. Our goal is to deliver the best user experience
possible for production apps regardless of the browser you&#39;re rendering in.&lt;/p&gt;
&lt;h2 id=&quot;what-is-our-strategy&quot;&gt;What is our strategy? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/introducing-aurora/#what-is-our-strategy&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At Google, we&#39;ve learned a lot while using frameworks and tools to build and
maintain large scale web applications such as Google Search, Maps, Image Search,
Google Photos etc. We discovered how frameworks can play a crucial role in
predictable app quality by providing &lt;strong&gt;strong defaults&lt;/strong&gt; and &lt;strong&gt;opinionated
tooling&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Frameworks have a unique vantage point for influencing both DX and UX as they
span the entire system: the client and the server, the development and
production environments, and they integrate tools such as compiler, bundler,
linter etc.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Chart that shows   common tooling in frameworks&quot; decoding=&quot;async&quot; height=&quot;450&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/ARzxz7gjVfJRFwdkzQoS.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Common tooling used by framework developers
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When solutions are baked into the framework, teams of developers can use these
solutions and focus their time on what matters most to the product -- shipping
great features for users.&lt;/p&gt;
&lt;p&gt;While we work to improve tools that live in every layer of the stack, frameworks
such as Next.js, Nuxt, and Angular CLI, manage every step of an application&#39;s
lifecycle. For this reason, and the fact that React adoption is the largest
within the core UI framework ecosystem, most of our optimizations have begun
with proving out in Next.js before expanding to the rest of the ecosystem.&lt;/p&gt;
&lt;p&gt;Aurora supports success at scale by bringing solutions to the &lt;em&gt;right layer&lt;/em&gt; of
popular tech stacks. By bridging the gap between browsers and frameworks, it
enables high-quality to be a side-effect of building for the web while acting as
a feedback loop to improve the web platform.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://web.dev/conformance&quot;&gt;Conformance&lt;/a&gt; post to learn more about a key component of
our strategy.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;what-is-our-work-process&quot;&gt;What is our work process? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/introducing-aurora/#what-is-our-work-process&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our principles for how Aurora bridges browsers and the developer ecosystem are:
humility, curiosity, scientific enquiry and pragmatism. We work with framework
authors on improvements, collaborate with the community and do our due diligence
prior to landing any changes.&lt;/p&gt;
&lt;img alt=&quot;Aurora&amp;#x27;s partner driven process for improving Core Web Vital metrics&quot; decoding=&quot;async&quot; height=&quot;448&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/0SXGYLkliuPQY3aSy3zWvdv7RqG2/QFTQX7npdBsFheXIqbuc.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;To summarize the steps we take for any new feature we work on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify user experience pain in a popular stack, using representative apps.&lt;/li&gt;
&lt;li&gt;Prototype solutions that address this, with an emphasis on &amp;quot;strong defaults&amp;quot;
.&lt;/li&gt;
&lt;li&gt;Verify the feature with another framework stack, to ensure it is adaptable.&lt;/li&gt;
&lt;li&gt;Validate the feature by experimenting in a few production apps, typically
with lab testing for performance.&lt;/li&gt;
&lt;li&gt;Drive design using the RFC process, addressing community feedback.&lt;/li&gt;
&lt;li&gt;Land the feature in a popular stack, typically behind a flag.&lt;/li&gt;
&lt;li&gt;Enable the feature in a representative production app to assess quality and
developer workflow integration.&lt;/li&gt;
&lt;li&gt;Measure performance improvement by tracking metrics in representative
production apps that adopted the feature or upgraded.&lt;/li&gt;
&lt;li&gt;Enable the feature as the default in the stack, so all upgrading users
benefit.&lt;/li&gt;
&lt;li&gt;Once proven, work with additional frameworks to land the feature.&lt;/li&gt;
&lt;li&gt;Identify gaps in the web platform, with a feedback loop.&lt;/li&gt;
&lt;li&gt;Move onto the next problems.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The underlying tools and plugins (webpack, Babel, ESLint, TypeScript, etc…)
are shared across many frameworks. This helps create ripple effects, even when
contributing to a single framework stack.&lt;/p&gt;
&lt;p&gt;Furthermore, the &lt;a href=&quot;https://blog.opencollective.com/chromes-framework-of-open-source-investment/&quot; rel=&quot;noopener&quot;&gt;Chrome Framework
Fund&lt;/a&gt;
supports open-source tools and libraries with funding. While we hope that there
is enough overlap in the problems and solution layers to our efforts above to
translate to other frameworks and tools, we know we can do more. To that end, we
want to do our part to ensure libraries and frameworks helping developers
succeed can thrive. That&#39;s one reason we will be continuing to invest in the
Chrome Framework Fund. To date, it has supported work towards Webpack 5, Nuxt
and performance and improvements to ESLint.&lt;/p&gt;
&lt;h2 id=&quot;what-has-our-work-unlocked-so-far&quot;&gt;What has our work unlocked so far? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/introducing-aurora/#what-has-our-work-unlocked-so-far&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our work has been focused on &lt;strong&gt;foundational optimizations&lt;/strong&gt; for resources like
images, JS, CSS, fonts. We&#39;ve shipped a number of optimizations to improve the
defaults of multiple frameworks, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An Image component in
&lt;a href=&quot;https://nextjs.org/docs/basic-features/image-optimization&quot; rel=&quot;noopener&quot;&gt;Next.js&lt;/a&gt; that
encapsulates best practices for image loading, followed by a collaboration
with &lt;a href=&quot;https://image.nuxtjs.org/&quot; rel=&quot;noopener&quot;&gt;Nuxt&lt;/a&gt; on the same. Use of this component
has resulted in significant improvements to paint times and layout shift
(example: 57% reduction in Largest Contentful Paint and 100% reduction in
Cumulative Layout Shift on
&lt;a href=&quot;https://mobile.twitter.com/rauchg/status/1321452444656623616/photo/2&quot; rel=&quot;noopener&quot;&gt;nextjs.org/give&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Automated inlining of CSS for Web Font declarations at build time. This
feature has landed in
&lt;a href=&quot;https://angular.io/guide/workspace-config#fonts-optimization-options&quot; rel=&quot;noopener&quot;&gt;Angular&lt;/a&gt;
(Google Fonts) and
&lt;a href=&quot;https://nextjs.org/docs/basic-features/font-optimization&quot; rel=&quot;noopener&quot;&gt;Next.js&lt;/a&gt; (Google
Fonts &amp;amp; Adobe Fonts) resulting in notable improvements to Largest Contentful
Paint and First Contentful Paint
(&lt;a href=&quot;https://twitter.com/griefcode/status/1387746148883050496&quot; rel=&quot;noopener&quot;&gt;example&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Inlining critical CSS using
&lt;a href=&quot;https://github.com/GoogleChromeLabs/critters&quot; rel=&quot;noopener&quot;&gt;Critters&lt;/a&gt; in both
&lt;a href=&quot;https://angular.io/guide/workspace-config#styles-optimization-options&quot; rel=&quot;noopener&quot;&gt;Angular&lt;/a&gt;
and Next.js to reduce paint times. Resulted in a 20-30 point improvement in
Lighthouse performance scores in a typical, large-scale Angular app when this
was combined with font CSS inlining feature.&lt;/li&gt;
&lt;li&gt;Out-of-the-box &lt;a href=&quot;https://nextjs.org/docs/basic-features/eslint&quot; rel=&quot;noopener&quot;&gt;ESLint support&lt;/a&gt;
in Next.js that includes a custom plugin and shareable configuration to make
it easier to catch common framework-specific issues at build-time, resulting
in more predictable loading performance.&lt;/li&gt;
&lt;li&gt;An introduction of a built-in performance relayer in &lt;a href=&quot;https://create-react-app.dev/docs/measuring-performance/&quot; rel=&quot;noopener&quot;&gt;Create React
App&lt;/a&gt; and
&lt;a href=&quot;https://nextjs.org/docs/advanced-features/measuring-performance&quot; rel=&quot;noopener&quot;&gt;Next.js&lt;/a&gt; to
allow easier insight into page performance through web vitals and other custom
metrics.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/granular-chunking-nextjs/&quot;&gt;Granular chunking&lt;/a&gt; shipped in Next.js and Gatsby,
resulting in 30 to 70 percent reduction in bundle sizes while improving caching
performance. This has become the default in Webpack 5.&lt;/li&gt;
&lt;li&gt;A separate &lt;a href=&quot;https://github.com/vercel/next.js/pull/10212#issue-365945853&quot; rel=&quot;noopener&quot;&gt;polyfill
chunk&lt;/a&gt; for older
browsers, in collaboration with the Next.js team, to improve bundle size in modern
browsers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every one of these features have either been automated to be enabled by default
or only need a simple opt-in. This is essential to ensure that developers can
easily reap their benefits without adding complexity to their workflow.&lt;/p&gt;
&lt;h2 id=&quot;what-are-we-planning-for-2021&quot;&gt;What are we planning for 2021? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/introducing-aurora/#what-are-we-planning-for-2021&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Through the rest of this year, we will be focused on helping framework stacks
improve user experience and how well they perform on metrics such as the Core
Web Vitals. This work will include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conformance for enforcing best practices. Check out the &lt;a href=&quot;https://web.dev/conformance&quot;&gt;blog post&lt;/a&gt; to
learn more.&lt;/li&gt;
&lt;li&gt;Optimizing initial load performance by building on our collaborations to optimize
&lt;a href=&quot;https://nextjs.org/blog/next-10#built-in-image-component-and-automatic-image-optimization&quot; rel=&quot;noopener&quot;&gt;Images&lt;/a&gt;,
&lt;a href=&quot;https://nextjs.org/blog/next-10-2#automatic-webfont-optimization&quot; rel=&quot;noopener&quot;&gt;Fonts&lt;/a&gt; and &lt;a href=&quot;https://angular.io/guide/workspace-config#optimization-configuration&quot; rel=&quot;noopener&quot;&gt;Critical
CSS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Loading third-party scripts (3Ps) with minimal perf impact by building on our foundation of work
on a &lt;a href=&quot;https://nextjs.org/docs/basic-features/script&quot; rel=&quot;noopener&quot;&gt;Script&lt;/a&gt; component and performing deep
research into how best to order and sequence 3Ps.&lt;/li&gt;
&lt;li&gt;JavaScript performance at scale (e.g. supporting &lt;a href=&quot;https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html&quot; rel=&quot;noopener&quot;&gt;React Server
Components&lt;/a&gt;
in Next.js).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our team will aim to post more regular information on RFCs and design docs for
these ideas so that any framework or developer that wishes to follow along can
do so.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/introducing-aurora/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Aurora team (&lt;a href=&quot;https://github.com/spanicker&quot; rel=&quot;noopener&quot;&gt;Shubhie&lt;/a&gt;,
&lt;a href=&quot;https://github.com/housseindjirdeh&quot; rel=&quot;noopener&quot;&gt;Houssein&lt;/a&gt;,
&lt;a href=&quot;https://github.com/atcastle&quot; rel=&quot;noopener&quot;&gt;Alex&lt;/a&gt;, &lt;a href=&quot;https://github.com/devknoll&quot; rel=&quot;noopener&quot;&gt;Gerald&lt;/a&gt;,
&lt;a href=&quot;https://github.com/janicklas-ralph&quot; rel=&quot;noopener&quot;&gt;Ralph&lt;/a&gt;,
&lt;a href=&quot;https://github.com/addyosmani&quot; rel=&quot;noopener&quot;&gt;Addy&lt;/a&gt;) look forward to continuing to work
closely with the open-source framework community on improving user experience
defaults in Next.js, Nuxt and Angular. We&#39;ll be growing our engagement to cover
even more frameworks and tools over time. Watch this space for more blog posts,
talks and RFCs from our team over the coming year :)&lt;/p&gt;
</content>
    <author>
      <name>Shubhie Panicker</name>
    </author><author>
      <name>Addy Osmani</name>
    </author><author>
      <name>Houssein Djirdeh</name>
    </author>
  </entry>
</feed>
