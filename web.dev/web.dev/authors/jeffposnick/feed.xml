<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://web.dev/</id>
  <title>Jeff Posnick on web.dev</title>
  <updated>2021-08-11T17:14:17Z</updated>
  <author>
    <name>Jeff Posnick</name>
  </author>
  <link href="https://web.dev/authors/jeffposnick/feed.xml" rel="self"/>
  <link href="https://web.dev/"/>
  <icon>https://web-dev.imgix.net/image/admin/uskKSRCW1HyOTCjtdMdo.jpg?auto=format</icon>
  <logo>https://web.dev/images/shared/rss-banner.png</logo>
  <subtitle>Web DevRel @ Google</subtitle>
  
  
  <entry>
    <title>URLPattern brings routing to the web platform</title>
    <link href="https://web.dev/urlpattern/"/>
    <updated>2021-07-22T00:00:00Z</updated>
    <id>https://web.dev/urlpattern/</id>
    <content type="text/html" mode="escaped">&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#background&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Routing is a key piece of every web application. At its heart, routing involves
taking a URL, applying some pattern matching or other app-specific logic to it,
and then, usually, displaying web content based on the result. Routing might be
implemented in a number of ways: it&#39;s sometimes code running on a server that
maps a path to files on disk, or logic in a single-page app that waits for
changes to the current location and creates a corresponding piece of DOM to
display.&lt;/p&gt;
&lt;p&gt;While there is no one definitive standard, web developers have gravitated
towards a common syntax for expressing URL routing patterns that share a lot in
common with
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot; rel=&quot;noopener&quot;&gt;regular expressions&lt;/a&gt;,
but with some domain-specific additions like tokens for matching path segments.
Popular server-side frameworks like
&lt;a href=&quot;https://expressjs.com/en/guide/routing.html&quot; rel=&quot;noopener&quot;&gt;Express&lt;/a&gt; and
&lt;a href=&quot;https://guides.rubyonrails.org/routing.html&quot; rel=&quot;noopener&quot;&gt;Ruby on Rails&lt;/a&gt; use this syntax (or
something very close to it), and JavaScript developers can use modules like
&lt;code&gt;&lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot; rel=&quot;noopener&quot;&gt;path-to-regexp&lt;/a&gt;&lt;/code&gt; or
&lt;code&gt;&lt;a href=&quot;https://github.com/lukeed/regexparam&quot; rel=&quot;noopener&quot;&gt;regexpparam&lt;/a&gt;&lt;/code&gt; to add that
logic to their own code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/WICG/urlpattern/blob/main/explainer.md#urlpattern&quot; rel=&quot;noopener&quot;&gt;URLPattern&lt;/a&gt;&lt;/code&gt;
is a proposed addition to the web platform that builds on the foundation created
by these frameworks. Its goal is to standardize a routing pattern syntax,
including support for wildcards, named token groups, regular expression groups,
and group modifiers. &lt;code&gt;URLPattern&lt;/code&gt; instances created with this syntax
can perform common routing tasks, like matching against full URLs or a URL
&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL/pathname&quot; rel=&quot;noopener&quot;&gt;pathname&lt;/a&gt;&lt;/code&gt;,
and returning information about the token and group matches.&lt;/p&gt;
&lt;p&gt;Another benefit to providing URL matching directly in the web platform is that a
common syntax can then be shared with &lt;a href=&quot;https://web.dev/urlpattern/#future-features&quot;&gt;other APIs&lt;/a&gt; that also
need to match against URLs.&lt;/p&gt;
&lt;h2 id=&quot;syntax-compatibility&quot;&gt;Syntax compatibility &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#syntax-compatibility&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A guiding philosophy for &lt;code&gt;URLPattern&lt;/code&gt; is to avoid reinvention. If you&#39;re already
familiar with the routing syntax used in Express or Ruby on Rails, you shouldn&#39;t
have to learn anything new. But given the slight divergences
between syntaxes in popular routing libraries, something had to be chosen as the
base syntax, and the designers of &lt;code&gt;URLPattern&lt;/code&gt; decided to use the pattern syntax
from &lt;code&gt;path-to-regexp&lt;/code&gt; (though not its API surface) as the starting point.&lt;/p&gt;
&lt;p&gt;This decision was made after close consultation with the current maintainer of
&lt;code&gt;path-to-regexp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The best way to familiarize yourself with the core of the supported syntax is to
refer to the
&lt;a href=&quot;https://github.com/pillarjs/path-to-regexp#parameters&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for
&lt;code&gt;path-to-regexp&lt;/code&gt;. You can
&lt;a href=&quot;https://github.com/WICG/urlpattern/blob/main/mdn-drafts/QUICK-REFERENCE.md&quot; rel=&quot;noopener&quot;&gt;read the documentation&lt;/a&gt;
intended for publication on &lt;a href=&quot;https://developer.mozilla.org/&quot; rel=&quot;noopener&quot;&gt;MDN&lt;/a&gt; in its current
home on GitHub.&lt;/p&gt;
&lt;h3 id=&quot;additional-features&quot;&gt;Additional features &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#additional-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The syntax of &lt;code&gt;URLPattern&lt;/code&gt; is a superset of what &lt;code&gt;path-to-regexp&lt;/code&gt; supports, as
&lt;code&gt;URLPattern&lt;/code&gt; supports a uncommon feature among routing libraries: matching
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL/origin&quot; rel=&quot;noopener&quot;&gt;origins&lt;/a&gt;,
including wildcards in hostnames. Most other routing libraries just deal with
the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL/pathname&quot; rel=&quot;noopener&quot;&gt;pathname&lt;/a&gt;,
and occasionally the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL/search&quot; rel=&quot;noopener&quot;&gt;search&lt;/a&gt; or
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL/hash&quot; rel=&quot;noopener&quot;&gt;hash&lt;/a&gt; portion of a
URL. They never have to check the origin portion of a URL, as they&#39;re only used
for same-origin routing within a self-contained web app.&lt;/p&gt;
&lt;p&gt;Taking origins into account opens the door for additional use cases, like
routing cross-origin requests inside of a
&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers&quot; rel=&quot;noopener&quot;&gt;service worker&lt;/a&gt;&#39;s
&lt;code&gt;fetch&lt;/code&gt; event handler. If you&#39;re only routing same-origin URLs, you can
effectively ignore this additional feature and use &lt;code&gt;URLPattern&lt;/code&gt; like
other libraries.&lt;/p&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#examples&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;constructing-the-pattern&quot;&gt;Constructing the pattern &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#constructing-the-pattern&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To create a &lt;code&gt;URLPattern&lt;/code&gt;, pass its constructor either strings or an object whose
properties contain info about the pattern to match against.&lt;/p&gt;
&lt;p&gt;Passing an object offers the most explicit control over what pattern to use for
matching each URL component. At its most verbose, this can look like&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  protocol&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  username&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  hostname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;example.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  port&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/foo/:image.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  search&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  hash&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Providing an empty string for a property will only match if the corresponding
part of the URL is not set. The wildcard &lt;code&gt;*&lt;/code&gt; will match any value for a given
portion of the URL.&lt;/p&gt;
&lt;p&gt;The constructor offers several shortcuts for simpler usage. Completely omitting
&lt;code&gt;search&lt;/code&gt; and &lt;code&gt;hash&lt;/code&gt;, or any other properties, is equivalent to setting them to the
&lt;code&gt;&#39;*&#39;&lt;/code&gt; wildcard. The above example could be simplified to&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  protocol&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  username&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  hostname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;example.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  port&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/foo/:image.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;As an additional shortcut, all of the information about the origin can be
provided in a single property, &lt;code&gt;baseURL&lt;/code&gt;, leading to&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/foo/:image.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  baseURL&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://example.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;When passing a &lt;code&gt;baseURL&lt;/code&gt; to the constructor, any aspects of the URL
that are not provided are treated as if they were set to an empty string, &lt;em&gt;not&lt;/em&gt;
as a &lt;code&gt;&#39;*&#39;&lt;/code&gt; wildcard. For instance,
&lt;code&gt;new URLPattern({baseURL: &#39;https://example.com/&#39;})&lt;/code&gt; will create a &lt;code&gt;URLPattern&lt;/code&gt;
with &lt;code&gt;search&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt;, and other unspecified properties set to &lt;code&gt;&#39;&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All of these examples assume that your use case involves matching origins. If
you&#39;re only interested in matching on the other portions of the URL, excluding
the origin (as is the case for many &amp;quot;traditional&amp;quot; single-origin routing
scenarios), then you can omit the origin information entirely, and just provide
some combination of the &lt;code&gt;pathname&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;, and &lt;code&gt;hash&lt;/code&gt; properties. As before,
omitted properties will be treated as if they were set to the &lt;code&gt;*&lt;/code&gt; wildcard
pattern.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/foo/:image.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;As an alternative to passing in an object to the constructor, you can provide
either one or two strings. If one string is provided, it should represent a full
URL pattern, including pattern information used to match the origin. If you
provide two strings, the second string is used as a &lt;code&gt;baseURL&lt;/code&gt;, and the first
string is considered relative to that base.&lt;/p&gt;
&lt;p&gt;Whether one string or two are provided, the &lt;code&gt;URLPattern&lt;/code&gt; constructor will parse
the full URL pattern, breaking it up into URL components, and map each portion
of the larger pattern to the corresponding component. This means that under the
hood, each &lt;code&gt;URLPattern&lt;/code&gt; created with strings ends up being represented
the same as an equivalent &lt;code&gt;URLPattern&lt;/code&gt; created with an object. The
strings constructor is just a shortcut, for those who prefer a less verbose
interface.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://example.com/foo/:image.jpg?*#*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;When using strings to create a &lt;code&gt;URLPattern&lt;/code&gt;, there are a few caveats to keep in mind.&lt;/p&gt;
&lt;p&gt;Leaving a property out when using an object to construct &lt;code&gt;URLPattern&lt;/code&gt; is
equivalent to providing a &lt;code&gt;*&lt;/code&gt; wildcard for that property. When the full URL
string pattern is parsed, if one of the URL components is missing a value, it&#39;s
treated as if the component&#39;s property were set to &lt;code&gt;&#39;&#39;&lt;/code&gt;, which will only match
when that component is empty.&lt;/p&gt;
&lt;p&gt;When using strings, you need to explicitly include the wildcards if you want
them to be used in the constructed &lt;code&gt;URLPattern&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// p1 and p2 are equivalent.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;origin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  protocol&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;protocol&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  hostname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hostname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  search&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  hash&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// p3 and p4 are equivalent.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/foo?*#*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;origin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  protocol&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;protocol&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  hostname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hostname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You should also be aware that parsing a string pattern into its components is
potentially ambiguous. There are characters, like &lt;code&gt;:&lt;/code&gt;, that are found in URLs
but also have special meaning in the pattern matching syntax. To avoid this
ambiguity, the &lt;code&gt;URLPattern&lt;/code&gt; constructor assumes that any of those special
characters are part of a pattern, not part of the URL. If you want an ambiguous
character to be interpreted as part of the URL, make sure to escape it with a
&lt;code&gt;\&lt;/code&gt; character. For example, the literal URL &lt;code&gt;about:blank&lt;/code&gt; should be escaped as
&lt;code&gt;&#39;about\\:blank&#39;&lt;/code&gt; when provided as a string.&lt;/p&gt;
&lt;h3 id=&quot;using-the-pattern&quot;&gt;Using the pattern &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#using-the-pattern&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After constructing a &lt;code&gt;URLPattern&lt;/code&gt;, you have two options for using it. The
&lt;code&gt;test()&lt;/code&gt; and &lt;code&gt;exec()&lt;/code&gt; methods both take the same input and use the same
algorithm to check for a match, and only differ in their return value. &lt;code&gt;test()&lt;/code&gt;
returns &lt;code&gt;true&lt;/code&gt; when there&#39;s a match for the given input, and &lt;code&gt;false&lt;/code&gt; otherwise.
&lt;code&gt;exec()&lt;/code&gt; returns detailed information about the match along with capture groups,
or &lt;code&gt;null&lt;/code&gt; if there is no match. The following examples demonstrate using
&lt;code&gt;exec()&lt;/code&gt;, but you could swap in &lt;code&gt;test()&lt;/code&gt; for any of them if you only want a
simple boolean return value.&lt;/p&gt;
&lt;p&gt;One way to use the &lt;code&gt;test()&lt;/code&gt; and &lt;code&gt;exec()&lt;/code&gt; methods is by passing in strings.
Similar to what the constructor supports, if a single string is provided, it
should be a full URL, including the origin. If two strings are provided, the
second string is treated as a &lt;code&gt;baseURL&lt;/code&gt; value, and the first string is evaluated
as relative to that base.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/foo/:image.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  baseURL&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://example.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://example.com/foo/cat.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// result will contain info about the successful match.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// const result = p.exec(&#39;/foo/cat.jpg&#39;, &#39;https://example.com&#39;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// is equivalent, using the baseURL syntax.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; noMatchResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://example.com/bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// noMatchResult will be null.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Alternatively, you can pass the same sort of object that the constructor
supports, with properties that are set to just the portions of the URL you care
about matching.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/foo/:image.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/foo/:image.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// result will contain info about the successful match.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;When using &lt;code&gt;exec()&lt;/code&gt; on a &lt;code&gt;URLPattern&lt;/code&gt; that contains wildcards or tokens, the
return value will give you information about what the corresponding values were
in the input URL. This can save you the trouble of having to parse out those
values yourself.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  hostname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;:subdomain.example.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/*/:image.jpg&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://imagecdn1.example.com/foo/cat.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// result.hostname.groups.subdomain will be &#39;imagecdn1&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// result.pathname.groups[0] will be &#39;foo&#39;, corresponding to *&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// result.pathname.groups.image will be &#39;cat&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;anonymous-and-named-groups&quot;&gt;Anonymous and named groups &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#anonymous-and-named-groups&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you pass a URL string to &lt;code&gt;exec()&lt;/code&gt;, you get back a value telling your which portions matched all of the pattern&#39;s groups.&lt;/p&gt;
&lt;p&gt;The return value has properties that correspond to the components of the
&lt;code&gt;URLPattern&lt;/code&gt;, like &lt;code&gt;pathname&lt;/code&gt;. So if a group was defined as part of the
&lt;code&gt;pathname&lt;/code&gt; portion of the &lt;code&gt;URLPattern&lt;/code&gt;, then the matches can be found in the
return value&#39;s &lt;code&gt;pathname.groups&lt;/code&gt;. The matches are represented differently
depending on whether the corresponding pattern was an anonymous or named group.&lt;/p&gt;
&lt;p&gt;You can use array indices to access the values for an anonymous pattern match.
If there are multiple anonymous patterns, index &lt;code&gt;0&lt;/code&gt; will represent the matching
value for the left-most one, with &lt;code&gt;1&lt;/code&gt; and further indices used for subsequent
patterns.&lt;/p&gt;
&lt;p&gt;When using named groups in a pattern, the matches will exposed as properties
whose names correspond to each group name.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;If you&#39;re familiar with the
&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec&quot; rel=&quot;noopener&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt;
method of a
&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot; rel=&quot;noopener&quot;&gt;RegExp&lt;/a&gt;&lt;/code&gt;
object, then the return values from &lt;code&gt;URLPattern.exec()&lt;/code&gt;
method will look
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges#examples&quot; rel=&quot;noopener&quot;&gt;very similar&lt;/a&gt;
when it comes to representing anonymous and named groups.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;unicode-support-and-normalization&quot;&gt;Unicode support and normalization &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#unicode-support-and-normalization&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;URLPattern&lt;/code&gt; supports Unicode characters in a few different ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Named groups, like &lt;code&gt;:café&lt;/code&gt;, can contain Unicode characters. The rules used for
valid
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Identifier&quot; rel=&quot;noopener&quot;&gt;JavaScript identifiers&lt;/a&gt;
apply to named groups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Text within a pattern will be automatically encoded according to the same
rules used for URL encoding of that particular component. Unicode characters
within &lt;code&gt;pathname&lt;/code&gt; will be
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding&quot; rel=&quot;noopener&quot;&gt;percent-encoded&lt;/a&gt;,
so a &lt;code&gt;pathname&lt;/code&gt; pattern like &lt;code&gt;/café&lt;/code&gt; is normalized to &lt;code&gt;/caf%C3%A9&lt;/code&gt;
automatically. Unicode characters in the &lt;code&gt;hostname&lt;/code&gt; are automatically encoded
using &lt;a href=&quot;https://en.wikipedia.org/wiki/Punycode&quot; rel=&quot;noopener&quot;&gt;Punycode&lt;/a&gt;, rather than
percent-encoding.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regular expression groups must contain only ASCII characters. Regular
expression syntax makes it difficult and unsafe to automatically encode
Unicode characters in these groups. If you want to match a Unicode character
in a regular expression group,you need to percent encode it manually, like
&lt;code&gt;(caf%C3%A9)&lt;/code&gt; to match &lt;code&gt;café&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to encoding Unicode characters, &lt;code&gt;URLPattern&lt;/code&gt; also performs URL
normalization. For example, &lt;code&gt;/foo/./bar&lt;/code&gt; in the &lt;code&gt;pathname&lt;/code&gt; component is
collapsed to the equivalent &lt;code&gt;/foo/bar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When in doubt about how a given input pattern has been normalized, inspect the
constructed &lt;code&gt;URLPattern&lt;/code&gt; instance using your browser&#39;s
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools&quot; rel=&quot;noopener&quot;&gt;DevTools&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#putting-it-all-together&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Glitch demo embedded below illustrates a core use case of &lt;code&gt;URLPattern&lt;/code&gt;
inside of a service worker&#39;s
&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#custom_responses_to_requests&quot; rel=&quot;noopener&quot;&gt;fetch event handler&lt;/a&gt;&lt;/code&gt;,
mapping specific patterns to asynchronous functions that could generate a
response to network requests. The concepts in this example could be applied to
other routing scenarios as well, either server-side or client-side.&lt;/p&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 420px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/urlpattern-sw-routing?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=service-worker.js&amp;previewSize=35&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;urlpattern-sw-routing on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id=&quot;browser-support-and-polyfills&quot;&gt;Browser support and polyfills &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#browser-support-and-polyfills&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&#39;re letting developers know about &lt;code&gt;URLPattern&lt;/code&gt; early, and would appreciate any
&lt;a href=&quot;https://github.com/WICG/urlpattern/issues&quot; rel=&quot;noopener&quot;&gt;feedback&lt;/a&gt; based on the prerelease
interface. This article will be kept up to date with information about browser
support over time.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;URLPattern&lt;/code&gt; is not currently enabled by default in any browser, but Chrome and
Chromium-based browsers like Edge partially support &lt;code&gt;URLPattern&lt;/code&gt; starting with
version 93. You can try it out by enabling the
&lt;code&gt;#experimental-web-platform-features&lt;/code&gt; flag in &lt;code&gt;about://flags&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The
&lt;code&gt;&lt;a href=&quot;https://github.com/kenchris/urlpattern-polyfill&quot; rel=&quot;noopener&quot;&gt;urlpattern-polyfill&lt;/a&gt;&lt;/code&gt;
library provides a way to use the &lt;code&gt;URLPattern&lt;/code&gt; interface in browsers
or environments like &lt;a href=&quot;https://nodejs.org/&quot; rel=&quot;noopener&quot;&gt;Node&lt;/a&gt; which lack built-in support. If
you use the polyfill, make sure that you use feature detection to ensure that
you&#39;re only loading it if the current environment lacks support. Otherwise,
you&#39;ll lose one of the key benefits of &lt;code&gt;URLPattern&lt;/code&gt;: the fact that
support environments don&#39;t have to download and parse additional code in order
to use it.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;globalThis &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;URLPattern&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; globalThis&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// URLPattern is not available, so the polyfill is needed.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;feedback-and-future-plans&quot;&gt;Feedback and future plans &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#feedback-and-future-plans&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some aspects of &lt;code&gt;URLPattern&lt;/code&gt; are &lt;a href=&quot;https://github.com/WICG/urlpattern/blob/main/202012-update.md#whats-still-left-to-do&quot; rel=&quot;noopener&quot;&gt;still being
developed&lt;/a&gt;,
and there are a number of
&lt;a href=&quot;https://github.com/WICG/urlpattern/blob/main/202012-update.md#open-questions&quot; rel=&quot;noopener&quot;&gt;open questions&lt;/a&gt;
about specific behaviors that may still be refined. We encourage you to try out
&lt;code&gt;URLPattern&lt;/code&gt; early and provide any feedback via the
&lt;a href=&quot;https://github.com/WICG/urlpattern/discussions&quot; rel=&quot;noopener&quot;&gt;Discussions&lt;/a&gt; feature in the
associated GitHub repo.&lt;/p&gt;
&lt;h3 id=&quot;support-for-templating&quot;&gt;Support for templating &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#support-for-templating&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;path-to-regexp&lt;/code&gt; library provides a
&lt;code&gt;&lt;a href=&quot;https://github.com/pillarjs/path-to-regexp#compile-reverse-path-to-regexp&quot; rel=&quot;noopener&quot;&gt;compile() function&lt;/a&gt;&lt;/code&gt;
that effectively reverses the routing behavior. &lt;code&gt;compile()&lt;/code&gt; takes a
pattern and values for the token placeholders, and returns a string for a URL
path with those values substituted in.&lt;/p&gt;
&lt;p&gt;We hope to
&lt;a href=&quot;https://github.com/WICG/urlpattern/discussions/41&quot; rel=&quot;noopener&quot;&gt;add this to URLPattern&lt;/a&gt; in
the future, but it&#39;s not within scope for the initial release.&lt;/p&gt;
&lt;h3 id=&quot;future-features&quot;&gt;Enabling future web platform features &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#future-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Assuming &lt;code&gt;URLPattern&lt;/code&gt; becomes an established part of the web platform, other
features that could benefit from routing or pattern matching can build on top of
it as a primitive.&lt;/p&gt;
&lt;p&gt;There are ongoing discussions about using &lt;code&gt;URLPattern&lt;/code&gt; for proposed features
like
&lt;a href=&quot;https://github.com/WICG/urlpattern/blob/main/explainer.md&quot; rel=&quot;noopener&quot;&gt;service worker scope pattern matching&lt;/a&gt;,
&lt;a href=&quot;https://web.dev/pwa-url-handler/#the-web-app-origin-association-file&quot;&gt;PWAs as file handlers&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/jeremyroman/alternate-loading-modes/blob/main/triggers.md&quot; rel=&quot;noopener&quot;&gt;speculative prefetching&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/urlpattern/#acknowledgements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/WICG/urlpattern/blob/main/explainer.md#references--acknowledgements&quot; rel=&quot;noopener&quot;&gt;original explainer document&lt;/a&gt; for a full list of acknowledgements.&lt;/p&gt;
&lt;p&gt;The thumbnail image for this post is by &lt;a href=&quot;https://unsplash.com/@megindoors?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot;&gt;Vic&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/route-66?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Indexing your offline-capable pages with the Content Indexing API</title>
    <link href="https://web.dev/content-indexing-api/"/>
    <updated>2019-12-12T00:00:00Z</updated>
    <id>https://web.dev/content-indexing-api/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--success&quot;&gt;
&lt;p&gt;&lt;strong&gt;Success&lt;/strong&gt;:
The Content Indexing API, part of the &lt;a href=&quot;https://web.dev/fugu-status/&quot;&gt;capabilities project&lt;/a&gt;,
launched in Chrome 84 for Android.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;what&quot;&gt;What is the Content Indexing API? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#what&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using a &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps&quot; rel=&quot;noopener&quot;&gt;progressive web
app&lt;/a&gt; means having access
to information people care about—images, videos, articles, and more—regardless
of the current state of your network connection. Technologies like &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers&quot; rel=&quot;noopener&quot;&gt;service
workers&lt;/a&gt;,
the &lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/cache-api&quot; rel=&quot;noopener&quot;&gt;Cache Storage
API&lt;/a&gt;,
and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API&quot; rel=&quot;noopener&quot;&gt;IndexedDB&lt;/a&gt;
provide you with the building blocks for storing and serving data when folks
interact directly with a PWA. But building a high-quality, offline-first PWA is
only part of the story. If folks don&#39;t realize that a web app&#39;s content is
available while they&#39;re offline, they won&#39;t take full advantage of the work you
put into implementing that functionality.&lt;/p&gt;
&lt;p&gt;This is a &lt;strong&gt;discovery&lt;/strong&gt; problem; how can your PWA make users aware of its
offline-capable content so that they can discover and view what&#39;s available? The
Content Indexing API is a solution to this problem. The developer-facing portion
of this solution is an extension to service workers, which allows developers to
add URLs and metadata of offline-capable pages to a local index maintained by
the browser. That enhancement is available in Chrome 84 and later.&lt;/p&gt;
&lt;p&gt;Once the index is populated with content from your PWA, as well as any other
installed PWAs, it will be surfaced by the browser as shown below.&lt;/p&gt;
&lt;div class=&quot;w-columns&quot;&gt;
  &lt;figure class=&quot;w-figure&quot;&gt;
    &lt;img alt=&quot;A screenshot of the Downloads menu item on Chrome&amp;#x27;s new tab page.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;1480&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rJF9Cl75c7tcsBL6PQe0.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
    &lt;figcaption class=&quot;w-figcaption&quot;&gt;
      First, select the &lt;b&gt;Downloads&lt;/b&gt; menu item on Chrome&#39;s new tab page.
    &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure class=&quot;w-figure&quot;&gt;
    &lt;img alt=&quot;Media and articles that have been added to the index.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;1480&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/VFgYcvSwBjxP0OqOAyoR.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
    &lt;figcaption class=&quot;w-figcaption&quot;&gt;
      Media and articles that have been added to the index will be shown in the
      &lt;b&gt;Articles for You&lt;/b&gt; section.
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Additionally, Chrome can proactively recommend content when it detects that a
user is offline.&lt;/p&gt;
&lt;p&gt;The Content Indexing API &lt;strong&gt;is not an alternative way of caching content&lt;/strong&gt;. It&#39;s
a way of providing metadata about pages that are already cached by your service
worker, so that the browser can surface those pages when folks are likely to
want to view them. The Content Indexing API helps with &lt;strong&gt;discoverability&lt;/strong&gt; of
cached pages.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The Content Indexing API is not a searchable index. While you can get a list
of all indexed entries, there&#39;s no way to query against indexed metadata
directly.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;see-it-in-action&quot;&gt;See it in action &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#see-it-in-action&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The best way to get a feel for the Content Indexing API is to try a sample
application.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure that you&#39;re using a supported browser and platform. Currently,
that&#39;s limited to &lt;strong&gt;Chrome 84 or later on Android&lt;/strong&gt;. Go to &lt;code&gt;about://version&lt;/code&gt; to see
what version of Chrome you&#39;re running.&lt;/li&gt;
&lt;li&gt;Visit &lt;a href=&quot;https://contentindex.dev/&quot; rel=&quot;noopener&quot;&gt;https://contentindex.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;+&lt;/code&gt; button next to one or more of the items on the list.&lt;/li&gt;
&lt;li&gt;(Optional) Disable your device&#39;s Wi-Fi and cellular data connection, or enable
airplane mode to simulate taking your browser offline.&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Downloads&lt;/strong&gt; from Chrome&#39;s menu, and switch to the &lt;strong&gt;Articles for You&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;Browse through the content that you previously saved.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can view &lt;a href=&quot;https://github.com/rayankans/contentindex.dev&quot; rel=&quot;noopener&quot;&gt;the source of the sample application on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another sample application, a &lt;a href=&quot;https://scrapbook-pwa.web.app/&quot; rel=&quot;noopener&quot;&gt;Scrapbook PWA&lt;/a&gt;,
illustrates the use of the Content Indexing API with the &lt;a href=&quot;https://web.dev/web-share-target/&quot;&gt;Web
Share Target API&lt;/a&gt;. The &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/web-share/src/js/contentIndexing.js&quot; rel=&quot;noopener&quot;&gt;code demonstrates a
technique&lt;/a&gt;
for keeping the Content Indexing API in sync with items stored by a web app
using the &lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/cache-api&quot; rel=&quot;noopener&quot;&gt;Cache Storage API&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;using-the-api&quot;&gt;Using the API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#using-the-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To use the API your app must have a service worker and URLs that are navigable
offline. If your web app does not currently have a service worker, the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/&quot; rel=&quot;noopener&quot;&gt;Workbox
libraries&lt;/a&gt; can simplify
creating one.&lt;/p&gt;
&lt;h3 id=&quot;offline-capable-urls&quot;&gt;What type of URLs can be indexed as offline-capable? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#offline-capable-urls&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The API supports indexing URLs corresponding to HTML documents. A URL for a cached
media file, for example, can&#39;t be indexed directly. Instead, you need to provide
a URL for a page that displays media, and which works offline.&lt;/p&gt;
&lt;p&gt;A recommended pattern is to create a &amp;quot;viewer&amp;quot; HTML page that could accept the
underlying media URL as a query parameter and then display the contents of the
file, potentially with additional controls or content on the page.&lt;/p&gt;
&lt;p&gt;Web apps can only add URLs to the content index that are under the
&lt;a href=&quot;https://developers.google.com/web/ilt/pwa/introduction-to-service-worker&quot; rel=&quot;noopener&quot;&gt;scope&lt;/a&gt;
of the current service worker. In other words, a web app could not add a URL
belonging to a completely different domain into the content index.&lt;/p&gt;
&lt;h3 id=&quot;api-overview&quot;&gt;Overview &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#api-overview&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Content Indexing API supports three operations: adding, listing, and
removing metadata. These methods are exposed from a new property, &lt;code&gt;index&lt;/code&gt;, that
has been added to the
&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration&quot; rel=&quot;noopener&quot;&gt;ServiceWorkerRegistration&lt;/a&gt;&lt;/code&gt;
interface.&lt;/p&gt;
&lt;p&gt;The first step in indexing content is getting a reference to the current
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ServiceWorkerRegistration&lt;/code&gt;&lt;/a&gt;. Using &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready&quot; rel=&quot;noopener&quot;&gt;navigator.serviceWorker.ready&lt;/a&gt;&lt;/code&gt; is the most straightforward way:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; registration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ready&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Remember to feature-detect before using the API:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;index&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Your Content Indexing API code goes here!&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;If you&#39;re making calls to the Content Indexing API from within a service worker,
rather than inside a web page, you can refer to the &lt;code&gt;ServiceWorkerRegistration&lt;/code&gt;
directly via &lt;code&gt;registration&lt;/code&gt;. It will &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/registration&quot; rel=&quot;noopener&quot;&gt;already be
defined&lt;/a&gt;
as part of the &lt;code&gt;ServiceWorkerGlobalScope.&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;adding-items&quot;&gt;Adding to the index &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#adding-items&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;add()&lt;/code&gt; method to index URLs and their associated metadata. It&#39;s up to
you to choose when items are added to the index. You might want to add to the
index in response to an input, like clicking a &amp;quot;save offline&amp;quot; button. Or you
might add items automatically each time cached data is updated via a mechanism
like &lt;a href=&quot;https://developers.google.com/web/updates/2019/08/periodic-background-sync&quot; rel=&quot;noopener&quot;&gt;periodic background
sync&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Required; set to something unique within your web app.&lt;/span&gt;&lt;br /&gt;  id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;article-123&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Required; url needs to be an offline-capable HTML page.&lt;/span&gt;&lt;br /&gt;  url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/articles/123&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Required; used in user-visible lists of content.&lt;/span&gt;&lt;br /&gt;  title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Article title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Required; used in user-visible lists of content.&lt;/span&gt;&lt;br /&gt;  description&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Amazing article about things!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Required; used in user-visible lists of content.&lt;/span&gt;&lt;br /&gt;  icons&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    src&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/img/article-123.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    sizes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;64x64&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;image/png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Optional; valid categories are currently:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// &#39;homepage&#39;, &#39;article&#39;, &#39;video&#39;, &#39;audio&#39;, or &#39;&#39; (default).&lt;/span&gt;&lt;br /&gt;  category&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;article&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Adding an entry only affects the content index; it does not add anything to the
&lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/cache-api&quot; rel=&quot;noopener&quot;&gt;cache&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;edge-case:-call-add()-from-window-context-if-your-icons-rely-on-a-fetch-handler&quot;&gt;Edge case: Call &lt;code&gt;add()&lt;/code&gt; from &lt;code&gt;window&lt;/code&gt; context if your icons rely on a &lt;code&gt;fetch&lt;/code&gt; handler &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#edge-case:-call-add()-from-window-context-if-your-icons-rely-on-a-fetch-handler&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When you call &lt;code&gt;add()&lt;/code&gt;, Chrome will make a request for
each icon&#39;s URL to ensure that it has a copy of the icon to use when
displaying a list of indexed content.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you call &lt;code&gt;add()&lt;/code&gt; from the &lt;code&gt;window&lt;/code&gt; context (in other words, from your web
page), this request will trigger a &lt;code&gt;fetch&lt;/code&gt; event on your service worker.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you call &lt;code&gt;add()&lt;/code&gt; within your service worker (perhaps inside another event
handler), the request will &lt;strong&gt;not&lt;/strong&gt; trigger the service worker&#39;s &lt;code&gt;fetch&lt;/code&gt; handler.
The icons will be fetched directly, without any service worker involvement. Keep
this in mind if your icons rely on your &lt;code&gt;fetch&lt;/code&gt; handler, perhaps because they
only exist in the local cache and not on the network. If they do, make sure that
you only call &lt;code&gt;add()&lt;/code&gt; from the &lt;code&gt;window&lt;/code&gt; context.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;listing-items&quot;&gt;Listing the index&#39;s contents &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#listing-items&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;getAll()&lt;/code&gt; method returns a promise for an iterable list of indexed entries
and their metadata. Returned entries will contain all of the data saved with
&lt;code&gt;add()&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; entries &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; entry &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; entries&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// entry.id, entry.launchUrl, etc. are all exposed.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;removing-items&quot;&gt;Removing items from the index &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#removing-items&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To remove an item from the index, call &lt;code&gt;delete()&lt;/code&gt; with the &lt;code&gt;id&lt;/code&gt; of the item to
remove:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;article-123&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Calling &lt;code&gt;delete()&lt;/code&gt; only affects the index. It does not delete anything from the
&lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/cache-api&quot; rel=&quot;noopener&quot;&gt;cache&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;:
Once indexed, entries do not automatically expire. It&#39;s
up to you to either present an interface in your web app for clearing out
entries, or periodically remove older entries that you know should no longer be
available offline.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;handling-contentdelete&quot;&gt;Handling a user delete event &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#handling-contentdelete&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When the browser displays the indexed content, it may include its own user
interface with a &lt;strong&gt;Delete&lt;/strong&gt; menu item, giving people a chance to indicate that
they&#39;re done viewing previously indexed content. This is how the deletion
interface looks in Chrome 80:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The delete menu item.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;840&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/1t7pdD45CTmo2Gqbdxro.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;When someone selects that menu item, your web app&#39;s service worker will receive
a &lt;code&gt;contentdelete&lt;/code&gt; event. While handling this event is optional, it provides a
chance for your service worker to &amp;quot;clean up&amp;quot; content, like locally cached media
files, that someone has indicated they are done with.&lt;/p&gt;
&lt;p&gt;You do not need to call &lt;code&gt;registration.index.delete()&lt;/code&gt; inside your
&lt;code&gt;contentdelete&lt;/code&gt; handler; if the event has been fired, the relevant index
deletion has already been performed by the browser.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;contentdelete&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// event.id will correspond to the id value used&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// when the indexed content was added.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Use that value to determine what content, if any,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// to delete from wherever your app stores it—usually&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// the Cache Storage API or perhaps IndexedDB.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The &lt;code&gt;contentdelete&lt;/code&gt; event is only fired when the deletion happens due to
interaction with the browser&#39;s built-in user interface. It is &lt;em&gt;not&lt;/em&gt; fired when
&lt;code&gt;registration.index.delete()&lt;/code&gt; is called. If your web app triggers the index
deletion using that API method, it should also &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete&quot; rel=&quot;noopener&quot;&gt;clean up cached
content&lt;/a&gt; at the
same time.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;feedback-design&quot;&gt;Feedback about the API design &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#feedback-design&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Is there something about the API that&#39;s awkward or doesn&#39;t work as expected? Or
are there missing pieces that you need to implement your idea?&lt;/p&gt;
&lt;p&gt;File an issue on the &lt;a href=&quot;https://github.com/WICG/content-index/issues&quot; rel=&quot;noopener&quot;&gt;Content Indexing API explainer GitHub
repo&lt;/a&gt;, or add your thoughts
to an existing issue.&lt;/p&gt;
&lt;h3 id=&quot;feedback-implementation&quot;&gt;Problem with the implementation? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#feedback-implementation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Did you find a bug with Chrome&#39;s implementation?&lt;/p&gt;
&lt;p&gt;File a bug at &lt;a href=&quot;https://new.crbug.com/&quot; rel=&quot;noopener&quot;&gt;https://new.crbug.com&lt;/a&gt;. Include as much
detail as you can, simple instructions for reproducing, and set &lt;strong&gt;Components&lt;/strong&gt;
to &lt;code&gt;Blink&amp;gt;ContentIndexing&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;planning-to-use&quot;&gt;Planning to use the API? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#planning-to-use&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Planning to use the Content Indexing API in your web app? Your public support
helps Chrome prioritize features, and shows other browser vendors how critical it is
to support them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send a tweet to &lt;a href=&quot;https://twitter.com/chromiumdev&quot; rel=&quot;noopener&quot;&gt;@ChromiumDev&lt;/a&gt; using the hashtag
&lt;a href=&quot;https://twitter.com/search?q=%23ContentIndexingAPI&amp;amp;src=typed_query&amp;amp;f=live&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;#ContentIndexingAPI&lt;/code&gt;&lt;/a&gt;
and details on where and how you&#39;re using it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;security-privacy&quot;&gt;What are some security and privacy implications of content indexing? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-indexing-api/#security-privacy&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/WICG/content-index/blob/main/SECURITY_AND_PRIVACY.md&quot; rel=&quot;noopener&quot;&gt;the
answers&lt;/a&gt;
provided in response to the W3C&#39;s &lt;a href=&quot;https://www.w3.org/TR/security-privacy-questionnaire/&quot; rel=&quot;noopener&quot;&gt;Security and Privacy
questionnaire&lt;/a&gt;. If you
have further questions, please start a discussion via the project&#39;s &lt;a href=&quot;https://github.com/WICG/content-index/issues&quot; rel=&quot;noopener&quot;&gt;GitHub
repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hero image by Maksym Kaharlytskyi on &lt;a href=&quot;https://unsplash.com/photos/Q9y3LRuuxmg&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Observing compute pressure</title>
    <link href="https://web.dev/compute-pressure/"/>
    <updated>2021-06-03T00:00:00Z</updated>
    <id>https://web.dev/compute-pressure/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The Compute Pressure API is part of the
&lt;a href=&quot;https://web.dev/fugu-status/&quot;&gt;capabilities project&lt;/a&gt; and is currently in
development. This post will be updated as the implementation progresses.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#background&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The sound of fans revving up inside of a laptop&#39;s body, or a phone that&#39;s warm
to the touch are unpleasant, if all too familiar, sensations. They&#39;re signs that
the hardware inside of a device is being pushed to its limit, and the only
options are dissipating the associated heat, or deliberately slowing down the
speed of the processors so that they&#39;ll run cooler. Most installed applications
are able to detect when a device is under this type of CPU stress, and can
selectively disable features or reduce their workloads in response.
Increasingly, there are web applications that would benefit from the same
information.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/oyiptong/compute-pressure/&quot; rel=&quot;noopener&quot;&gt;Compute Pressure&lt;/a&gt; is a new,
experimental API allows web applications to gain insight into the CPU
utilization of the browser&#39;s device. The API provides a callback
that receives periodic updates, allowing developers to observe changes in CPU
utilization over time. A web app that uses this API can enable or
disable heavyweight features in response to these
observations. It&#39;s a feedback mechanism that unlocks new doors for adaptive
behavior, which can in turn lead to smoother, cooler experiences across a range
of hardware devices.&lt;/p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#use-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The motivating use cases are helping video conferencing and video game web
applications adapt to CPU utilization. The initial experimental implementation
of the API aims to support the decisions listed here.&lt;/p&gt;
&lt;h3 id=&quot;video-conferencing&quot;&gt;Video conferencing &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#video-conferencing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dynamically adjusting the number of live video feeds displayed on the screen at
once.&lt;/li&gt;
&lt;li&gt;Adjusting the video resolution or frame rate.&lt;/li&gt;
&lt;li&gt;Skipping non-essential video processing, such as cosmetic filters.&lt;/li&gt;
&lt;li&gt;Disabling non-essential audio processing, such as noise suppression.&lt;/li&gt;
&lt;li&gt;Skewing the quality-vs-speed and size-vs-speed knobs towards &amp;quot;speed&amp;quot; in video and
audio encoding.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;video-games&quot;&gt;Video games &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#video-games&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Using lower-quality video and audio assets as needed.&lt;/li&gt;
&lt;li&gt;Disabling optional effects like reflections, glare, or particle animations that
don&#39;t affect gameplay.&lt;/li&gt;
&lt;li&gt;Tweaking quality-vs-speed knobs in the game&#39;s rendering engine, affecting areas
like shadow quality, texture filtering, and view distance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The secondary use case is measuring the CPU resource consumption of a feature.
This ultimately supports the main goal of avoiding driving user devices into
high CPU utilization. The API helps developers make the types of decisions
listed here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comparing the CPU consumption of alternative implementations of the same
feature to find out which is more efficient. The API supports measuring CPU
utilization in the field via
&lt;a href=&quot;https://en.wikipedia.org/wiki/A/B_testing&quot; rel=&quot;noopener&quot;&gt;A/B tests&lt;/a&gt; because a feature&#39;s
CPU utilization depends on the hardware it&#39;s running on. Most developers
cannot afford performance measurement labs covering all the devices owned by
their users.&lt;/li&gt;
&lt;li&gt;Estimating the impact on CPU consumption of enabling a feature. This cost
estimate feeds into the decisions outlined in the primary use case.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cpu-utilization&quot;&gt;CPU utilization &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#cpu-utilization&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The CPU utilization of a device is the average of the utilization of all the
device&#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Multi-core_processor&quot; rel=&quot;noopener&quot;&gt;CPU cores&lt;/a&gt;,
represented in the API as a number between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A CPU core&#39;s utilization is the fraction of time that the core has been
executing code belonging to a thread, as opposed to being in an idle state.&lt;/p&gt;
&lt;p&gt;A CPU utilization close to &lt;code&gt;0.0&lt;/code&gt; indicates that the processor has been almost
entirely idle. A CPU utilization close to &lt;code&gt;1.0&lt;/code&gt; is very likely to
generate excessive heat. Web applications can help avoiding bad
user experiences by reducing their compute demands when the CPU utilization is
high.&lt;/p&gt;
&lt;h2 id=&quot;cpu-clock-speed&quot;&gt;CPU clock speed &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#cpu-clock-speed&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Modern CPU cores support a set of clock speeds. The device&#39;s firmware or
operating system can set the core clock speed in order to trade off the
available CPU computational resources with power consumption.&lt;/p&gt;
&lt;p&gt;From a user experience standpoint, the following are the most interesting clock
speeds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The minimum clock speed, which results in the lowest power consumption.&lt;/li&gt;
&lt;li&gt;The base clock speed, which results in a moderate level of power consumption
and heat generation. This tends to be the speed advertised in marketing
materials.&lt;/li&gt;
&lt;li&gt;The maximum clock speed, sometimes marketed as &amp;quot;turbo boost.&amp;quot; Running at this
speed causes unsustainable amounts of heating. It can only be used for short
periods of time, to satisfy bursts in demand for computing power.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a device&#39;s CPU utilization gets high, the device may increase clock speeds
across its CPU cores, in an attempt to meet the demand for computing power. As
the speeds exceed the base clock speed, the elevated power consumption increases
the CPU&#39;s temperature. At some point, the device enters a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_frequency_scaling&quot; rel=&quot;noopener&quot;&gt;thermal throttling regime&lt;/a&gt;,
where the CPU clock speed is reduced in order to bring the temperature down.&lt;/p&gt;
&lt;p&gt;As with CPU utilization, values from &lt;code&gt;0.0&lt;/code&gt; (minimal) to &lt;code&gt;1.0&lt;/code&gt; (boosted) are used
to normalize clock speeds. A value of &lt;code&gt;0.5&lt;/code&gt; represents the base clock speed for
a given CPU.&lt;/p&gt;
&lt;h2 id=&quot;using-the-api&quot;&gt;Using the API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#using-the-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following code creates a &lt;code&gt;ComputePressureObserver&lt;/code&gt;, configured with specific
triggering thresholds, along with an associated callback function that may be
invoked when a threshold is crossed. The callback is intentionally rate-limited,
with the current implementation maxing out at one invocation per second for a
page in the foreground, and once per ten seconds for background pages.&lt;/p&gt;
&lt;p&gt;Inside the callback function, your web application can respond to the changing
utilization and clock speed levels by enabling or disabling CPU-intensive
functionality.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;update&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cpuSpeed &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// The CPU is running at faster than base speed.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// The CPU is running at normal or reduced speed.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;update&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cpuUtilization &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// CPU utilization is over 90%.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;update&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cpuUtilization &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// CPU utilization is over 75%.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;update&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cpuUtilization &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// CPU utilization is over 50%.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// CPU utilization is under 50%.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; observer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ComputePressureObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Thresholds divide the interval [0.0 .. 1.0] into ranges.&lt;/span&gt;&lt;br /&gt;  cpuUtilizationThresholds&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The minimum clock speed is 0.0, and the maximum speed is 1.0.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// 0.5 represents the base clock speed.&lt;/span&gt;&lt;br /&gt;  cpuSpeedThresholds&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Begin observing changes and triggering callbacks:&lt;/span&gt;&lt;br /&gt;observer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ...later on, to stop observing changes:&lt;/span&gt;&lt;br /&gt;observer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unobserve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;exposing-limited-information-via-thresholds-and-buckets&quot;&gt;Exposing limited information via thresholds and buckets &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#exposing-limited-information-via-thresholds-and-buckets&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the key API design goals is to provide enough information for an
application to make useful decisions based on compute pressure, while not
exposing information that might
&lt;a href=&quot;https://github.com/oyiptong/compute-pressure/blob/main/security-privacy-self-assessment.md&quot; rel=&quot;noopener&quot;&gt;harm a user&#39;s privacy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this in mind, the API reports normalized, unitless values between
&lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; instead of more identifiable values like clock speeds in GHz.
The values passed to the callback fall into one of the &amp;quot;buckets&amp;quot; defined by the
thresholds used to configure the observer. The actual value will be the midpoint
between the upper and lower bounds for the bucket. In other words, they will be
values determined by how you configure the observer, and not based on the actual
device.&lt;/p&gt;
&lt;p&gt;To give an example, the configuration in the preceding section uses
&lt;code&gt;cpuUtilizationThresholds: [0.5, 0.75, 0.9]&lt;/code&gt;. This configuration sets up a total
of four possible buckets that the reported values might fall into, covering the
ranges 0.0 to 0.5, 0.5 to 0.75, 0.75 to 0.9, and 0.9 to 1.0. To represent bucket
membership, the value reported to the callback is the average between
the lower and upper bounds for the bucket.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A diagram illustrating the bucketing for different actual CPU utilizations&quot; decoding=&quot;async&quot; height=&quot;549&quot; loading=&quot;lazy&quot; src=&quot;https://web-dev.imgix.net/image/FNkVSAX8UDTTQWQkKftSgGe9clO2/VUrr3MykViLDtHuTkjYG.svg&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    This diagram illustrates the relationship between three thresholds and the
    four buckets that they form.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here&#39;s how some &amp;quot;real&amp;quot; CPU utilization values, as reported by the operating
system to the browser, would be represented as values passed to your callback:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Real&amp;quot; 0% utilization would map to the 0.0 to 0.5 bucket, and would be
reported as &lt;code&gt;cpuUtilization: 0.25&lt;/code&gt;, since 0.25 is the average of 0.0 and 0.5.&lt;/li&gt;
&lt;li&gt;&amp;quot;Real&amp;quot; 40% utilization would similarly map to the 0.0 to 0.5 bucket, and be
reported as &lt;code&gt;cpuUtilization: 0.25&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;Real&amp;quot; 60% utilization would map to the 0.5 to 0.75 bucket, and be reported as
&lt;code&gt;cpuUtilization: 0.625&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;Real&amp;quot; 80% utilization would map to the 0.75 to 0.9 bucket, and be reported as
&lt;code&gt;cpuUtilization: 0.825&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The same threshold and bucket system applies to the exposed CPU speed values.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The values reported by the API reflect the overall state of the CPU,
due to utilization across all applications currently running. Therefore, even if
your own web application is almost entirely idle, you may see high utilization
and clock speed values reported, due to the activities of other applications.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;try-a-demo&quot;&gt;Try a demo &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#try-a-demo&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When accessed on a browser that supports the origin trial (currently Chrome 92
or later), &lt;a href=&quot;https://googlechrome.github.io/samples/compute-pressure/index.html&quot; rel=&quot;noopener&quot;&gt;this demo&lt;/a&gt;
will display an ongoing readout of your device&#39;s CPU utilization and speed.&lt;/p&gt;
&lt;h2 id=&quot;api-status&quot;&gt;API status &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#api-status&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. Create explainer&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/oyiptong/compute-pressure/blob/main/README.md&quot; rel=&quot;noopener&quot;&gt;Complete&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. Create initial draft of specification&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://oyiptong.github.io/compute-pressure/&quot; rel=&quot;noopener&quot;&gt;In Progress&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3. Gather feedback &amp;amp; iterate on design&lt;/td&gt;
&lt;td&gt;In progress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4. &lt;strong&gt;Origin trial&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/compute-pressure/#ot&quot;&gt;In progress&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5. Launch&lt;/td&gt;
&lt;td&gt;Not started&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;api-availability&quot;&gt;API Availability &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#api-availability&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;ot&quot;&gt;Enabling support during the origin trial phase &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#ot&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting in Chrome 92, the Compute Pressure API can be used as part of an origin
trial.&lt;/p&gt;
&lt;p&gt;Origin trials allow you to try new features and give feedback on their
usability, practicality, and effectiveness to the web standards community. For
more information, see the &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md&quot; rel=&quot;noopener&quot;&gt;Origin Trials Guide for Web Developers&lt;/a&gt;.
To sign up for this or another origin trial, visit the &lt;a href=&quot;https://developers.chrome.com/origintrials/#/trials/active&quot; rel=&quot;noopener&quot;&gt;registration page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;register-for-ot&quot;&gt;Register for the origin trial &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#register-for-ot&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/origintrials/#/view_trial/1838594547874004993&quot; rel=&quot;noopener&quot;&gt;Request a token&lt;/a&gt; for your origin.&lt;/li&gt;
&lt;li&gt;Add the token to your pages. There are two ways to do that:
&lt;ul&gt;
&lt;li&gt;Add an &lt;code&gt;origin-trial&lt;/code&gt; &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag to the head of each page. For example,
this may look something like: &lt;br /&gt;
&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;origin-trial&amp;quot; content=&amp;quot;TOKEN_GOES_HERE&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you can configure your server, you can also add the token
using an &lt;code&gt;Origin-Trial&lt;/code&gt; HTTP header. The resulting response header should
look something like:&lt;br /&gt;
&lt;code&gt;Origin-Trial: TOKEN_GOES_HERE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;enabling-via-about:flags&quot;&gt;Enabling via about://flags &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#enabling-via-about:flags&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To experiment with the API locally, without an origin trial token, enable the
&lt;code&gt;#enable-experimental-web-platform-features&lt;/code&gt; flag in about://flags.&lt;/p&gt;
&lt;h3 id=&quot;feature-detection&quot;&gt;Feature detection &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#feature-detection&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You should check for the presence of &lt;code&gt;ComputePressureObserver&lt;/code&gt; in the &lt;code&gt;window&lt;/code&gt;
scope to see if the feature is available:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ComputePressureObserver&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The Compute Pressure API is available.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/compute-pressure/#acknowledgements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This blog post is derived on the sample code and
&lt;a href=&quot;https://github.com/oyiptong/compute-pressure/blob/main/README.md&quot; rel=&quot;noopener&quot;&gt;API explainer&lt;/a&gt;
created by Olivier Yiptong and Victor Costan.&lt;/p&gt;
&lt;p&gt;The hero image was created by Robert Anasch on
&lt;a href=&quot;https://unsplash.com/photos/-C7IKRBZHrg&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;. The diagram illustrating
bucketing was created by &lt;a href=&quot;https://web.dev/authors/adamargyle/&quot;&gt;Adam Argyle&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>ES modules in service workers</title>
    <link href="https://web.dev/es-modules-in-sw/"/>
    <updated>2021-05-13T00:00:00Z</updated>
    <id>https://web.dev/es-modules-in-sw/</id>
    <content type="text/html" mode="escaped">&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/es-modules-in-sw/#background&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules&quot; rel=&quot;noopener&quot;&gt;ES modules&lt;/a&gt;
have been a developer favorite for a while now. In addition to a
&lt;a href=&quot;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&quot; rel=&quot;noopener&quot;&gt;number of other benefits&lt;/a&gt;,
they offer the promise of a universal module format where shared code can be
released once and run in browsers and in alternative runtimes like
&lt;a href=&quot;https://nodejs.org/en/&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt;. While
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#import&quot; rel=&quot;noopener&quot;&gt;all modern browsers&lt;/a&gt;
offer some ES module support, they don&#39;t all offer support &lt;em&gt;everywhere&lt;/em&gt; that
code can be run. Specifically, support for importing ES modules inside of a
browser&#39;s
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers&quot; rel=&quot;noopener&quot;&gt;service worker&lt;/a&gt;
is just starting to become more widely available.&lt;/p&gt;
&lt;p&gt;This article details the current state of ES module support in service workers
across common browsers, along with some gotchas to avoid, and best practices for
shipping backwards-compatible service worker code.&lt;/p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/es-modules-in-sw/#use-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The ideal use case for ES modules inside of service workers is for loading a
modern library or configuration code that&#39;s shared with other runtimes that
support ES modules.&lt;/p&gt;
&lt;p&gt;Attempting to share code in this way prior to ES modules entailed using older
&amp;quot;universal&amp;quot; module formats like &lt;a href=&quot;https://github.com/umdjs/umd&quot; rel=&quot;noopener&quot;&gt;UMD&lt;/a&gt; that include
unneeded boilerplate, and writing code that made changes to globally exposed
variables.&lt;/p&gt;
&lt;p&gt;Scripts imported via ES modules can trigger the service worker
&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#updates&quot; rel=&quot;noopener&quot;&gt;update&lt;/a&gt;
flow if their contents change, matching the
&lt;a href=&quot;https://developers.google.com/web/updates/2019/09/fresher-sw#checks_for_updates_to_imported_scripts&quot; rel=&quot;noopener&quot;&gt;behavior&lt;/a&gt;
of
&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts&quot; rel=&quot;noopener&quot;&gt;importScripts()&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;current-limitations&quot;&gt;Current limitations &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/es-modules-in-sw/#current-limitations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;static-imports-only&quot;&gt;Static imports only &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/es-modules-in-sw/#static-imports-only&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ES modules can be imported in one of two ways: either
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot; rel=&quot;noopener&quot;&gt;statically&lt;/a&gt;,
using the &lt;code&gt;import ... from &#39;...&#39;&lt;/code&gt; syntax, or
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports&quot; rel=&quot;noopener&quot;&gt;dynamically&lt;/a&gt;,
using the &lt;code&gt;import()&lt;/code&gt; method. Inside of a service worker, only the static
syntax is currently supported.&lt;/p&gt;
&lt;p&gt;This limitation is analogous to a
&lt;a href=&quot;https://developers.google.com/web/updates/2018/10/tweaks-to-addAll-importScripts&quot; rel=&quot;noopener&quot;&gt;similar restriction&lt;/a&gt;
placed on &lt;code&gt;importScripts()&lt;/code&gt; usage. Dynamic calls to &lt;code&gt;importScripts()&lt;/code&gt; do not
work inside of a service worker, and all &lt;code&gt;importScripts()&lt;/code&gt; calls, which are
inherently synchronous, must complete before the service worker completes its
&lt;code&gt;install&lt;/code&gt; phase. This restriction ensures that the browser knows about, and is
able to implicitly cache, all JavaScript code needed for a service worker&#39;s
implementation during installation.&lt;/p&gt;
&lt;p&gt;Eventually, this restriction might be lifted, and dynamic ES
module imports
&lt;a href=&quot;https://github.com/w3c/ServiceWorker/issues/1356#issuecomment-783220858&quot; rel=&quot;noopener&quot;&gt;may be allowed&lt;/a&gt;.
For now, ensure that you only use the static syntax inside of
a service worker.&lt;/p&gt;
&lt;h4 id=&quot;what-about-other-workers&quot;&gt;What about other workers? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/es-modules-in-sw/#what-about-other-workers&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Support for
&lt;a href=&quot;https://web.dev/module-workers/&quot;&gt;ES modules in &amp;quot;dedicated&amp;quot; workers&lt;/a&gt;—those
constructed with &lt;code&gt;new Worker(&#39;...&#39;, {type: &#39;module&#39;})&lt;/code&gt;—is more widespread, and
has been supported in Chrome and Edge since
&lt;a href=&quot;https://chromestatus.com/feature/5761300827209728&quot; rel=&quot;noopener&quot;&gt;version 80&lt;/a&gt;, as well as
&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=164860&quot; rel=&quot;noopener&quot;&gt;recent versions&lt;/a&gt; of Safari.
Both static and dynamic ES module imports are supported in dedicated workers.&lt;/p&gt;
&lt;p&gt;Chrome and Edge have supported ES modules in
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker&quot; rel=&quot;noopener&quot;&gt;shared workers&lt;/a&gt;
since &lt;a href=&quot;https://chromestatus.com/feature/5169440012369920&quot; rel=&quot;noopener&quot;&gt;version 83&lt;/a&gt;, but no
other browser offers support at this time.&lt;/p&gt;
&lt;h3 id=&quot;no-support-for-import-maps&quot;&gt;No support for import maps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/es-modules-in-sw/#no-support-for-import-maps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/WICG/import-maps/blob/main/README.md&quot; rel=&quot;noopener&quot;&gt;Import maps&lt;/a&gt; allow
runtime environments to rewrite module specifiers, to, for example, prepend the
URL of a preferred CDN from which the ES modules can be loaded.&lt;/p&gt;
&lt;p&gt;While Chrome and Edge
&lt;a href=&quot;https://www.chromestatus.com/feature/5315286962012160&quot; rel=&quot;noopener&quot;&gt;version 89&lt;/a&gt; and above
support import maps, they currently
&lt;a href=&quot;https://github.com/WICG/import-maps/issues/2&quot; rel=&quot;noopener&quot;&gt;cannot be used&lt;/a&gt; with service
workers.&lt;/p&gt;
&lt;h2 id=&quot;browser-support&quot;&gt;Browser support &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/es-modules-in-sw/#browser-support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ES modules in service workers are supported in Chrome and Edge starting with
&lt;a href=&quot;https://chromestatus.com/feature/4609574738853888&quot; rel=&quot;noopener&quot;&gt;version 91&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Safari added support in the
&lt;a href=&quot;https://webkit.org/blog/11577/release-notes-for-safari-technology-preview-122/#:~:text=Added%20support%20for%20modules%20in%20Service%20Workers&quot; rel=&quot;noopener&quot;&gt;Technology Preview 122 Release&lt;/a&gt;,
and developers should expect to see this functionality released in the stable
version of Safari in the future.&lt;/p&gt;
&lt;p&gt;Firefox does not currently support this functionality, and updates on their
position can be found in this
&lt;a href=&quot;https://github.com/mozilla/standards-positions/issues/499&quot; rel=&quot;noopener&quot;&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;example-code&quot;&gt;Example code &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/es-modules-in-sw/#example-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a basic example of using a shared ES module in a web app&#39;s &lt;code&gt;window&lt;/code&gt;
context, while also registering a service worker that uses the same ES module:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Inside config.js:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cacheName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;my-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Inside your web app:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;cacheName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./config.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Do something with cacheName.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;es-module-sw.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;module&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Inside es-module-sw.js:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;cacheName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./config.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;install&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;backwards-compatibility&quot;&gt;Backwards compatibility &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/es-modules-in-sw/#backwards-compatibility&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above example would work fine if all browsers supported ES modules in
service workers, but as of this writing, that&#39;s not the case.&lt;/p&gt;
&lt;p&gt;To accommodate browsers that don&#39;t have built-in support, you can run your
service worker script through an
&lt;a href=&quot;https://bundlers.tooling.report/&quot; rel=&quot;noopener&quot;&gt;ES module-compatible bundler&lt;/a&gt; to create a
service worker that includes all of the module code inline, and will work in
older browsers. Alternatively, if the modules you&#39;re attempting to import are
already available bundled in
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot; rel=&quot;noopener&quot;&gt;IIFE&lt;/a&gt; or
&lt;a href=&quot;https://github.com/umdjs/umd&quot; rel=&quot;noopener&quot;&gt;UMD&lt;/a&gt; formats, you can import them using
&lt;code&gt;importScripts()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you have two versions of your service worker available—one that uses ES
modules, and the other that doesn&#39;t—you&#39;ll need to detect what the current
browser supports, and register the corresponding service worker script. The best
practices for detecting support are currently in flux, but you can follow the
discussion in this
&lt;a href=&quot;https://github.com/w3c/ServiceWorker/issues/1582&quot; rel=&quot;noopener&quot;&gt;GitHub issue&lt;/a&gt; for
recommendations.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Photo by &lt;a href=&quot;https://unsplash.com/@vlado?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot;&gt;Vlado
Paunovic&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/@vlado?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Experimenting with WebTransport</title>
    <link href="https://web.dev/webtransport/"/>
    <updated>2020-06-08T00:00:00Z</updated>
    <id>https://web.dev/webtransport/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--caution&quot;&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;:
This proposal continues to change during the origin trial period. There
may be a divergence between the browser implementation and the information in this
article.&lt;/p&gt;
&lt;p&gt;For the latest on this evolving proposal, please read refer to the
&lt;a href=&quot;https://w3c.github.io/webtransport/&quot; rel=&quot;noopener&quot;&gt;editor&#39;s draft of WebTransport&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the proposal stabilizes, we will update this article and associated code
samples with up to date information.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#background&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;what&#39;s-webtransport&quot;&gt;What&#39;s WebTransport? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#what&#39;s-webtransport&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://w3c.github.io/webtransport/&quot; rel=&quot;noopener&quot;&gt;WebTransport&lt;/a&gt; is a web API that uses the &lt;a href=&quot;https://quicwg.org/base-drafts/draft-ietf-quic-http.html&quot; rel=&quot;noopener&quot;&gt;HTTP/3&lt;/a&gt; protocol as a bidirectional transport. It&#39;s intended for two-way communications between a web client and an HTTP/3 server. It supports sending data both unreliably via its &lt;a href=&quot;https://web.dev/webtransport/#datagram&quot;&gt;datagram APIs&lt;/a&gt;, and reliably via its &lt;a href=&quot;https://web.dev/webtransport/#stream&quot;&gt;streams APIs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-datagram-00&quot; rel=&quot;noopener&quot;&gt;Datagrams&lt;/a&gt; are ideal for sending and receiving data that do not need strong delivery guarantees. Individual packets of data are limited in size by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_transmission_unit&quot; rel=&quot;noopener&quot;&gt;maximum transmission unit (MTU)&lt;/a&gt; of the underlying connection, and may or may not be transmitted successfully, and if they are transferred, they may arrive in an arbitrary order. These characteristics make the datagram APIs ideal for low-latency, best-effort data transmission. You can think of datagrams as &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot; rel=&quot;noopener&quot;&gt;user datagram protocol (UDP)&lt;/a&gt; messages, but encrypted and congestion-controlled.&lt;/p&gt;
&lt;p&gt;The streams APIs, in contrast, provide &lt;a href=&quot;https://en.wikipedia.org/wiki/Reliability_(computer_networking)&quot; rel=&quot;noopener&quot;&gt;reliable&lt;/a&gt;, ordered data transfer. They&#39;re &lt;a href=&quot;https://quicwg.org/base-drafts/draft-ietf-quic-transport.html#name-streams&quot; rel=&quot;noopener&quot;&gt;well-suited&lt;/a&gt; to scenarios where you need to send or receive one or more streams of ordered data. Using multiple WebTransport streams is analogous to establishing multiple &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot; rel=&quot;noopener&quot;&gt;TCP&lt;/a&gt; connections, but since HTTP/3 uses the lighter-weight &lt;a href=&quot;https://www.chromium.org/quic&quot; rel=&quot;noopener&quot;&gt;QUIC&lt;/a&gt; protocol under the hood, they can be opened and closed without as much overhead.&lt;/p&gt;
&lt;h3 id=&quot;use-cases&quot;&gt;Use cases &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#use-cases&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This a small list of possible ways developers might use WebTransport.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sending game state at a regular interval with minimal latency to a server via small, unreliable, out-of-order messages.&lt;/li&gt;
&lt;li&gt;Receiving media streams pushed from a server with minimal latency, independent of other data streams.&lt;/li&gt;
&lt;li&gt;Receiving notifications pushed from a server while a web page is open.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As part of the origin trial process, we&#39;re interested in &lt;a href=&quot;https://web.dev/webtransport/#feedback&quot;&gt;hearing more&lt;/a&gt; about how you plan to use WebTransport.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Many of the concepts in this proposal were previously experimented with as part of the earlier QuicTransport origin trial, which did not end up being released as part of Chrome.&lt;/p&gt;
&lt;p&gt;WebTransport helps with similar use cases as QuicTransport, with the primary difference being that &lt;a href=&quot;https://quicwg.org/base-drafts/draft-ietf-quic-http.html&quot; rel=&quot;noopener&quot;&gt;HTTP/3&lt;/a&gt; instead of &lt;a href=&quot;https://www.chromium.org/quic&quot; rel=&quot;noopener&quot;&gt;QUIC&lt;/a&gt; is the underlying transport protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;status&quot;&gt;Current status &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#status&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. Create explainer&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/w3c/webtransport/blob/main/explainer.md&quot; rel=&quot;noopener&quot;&gt;Complete&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. Create initial draft of specification&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://w3c.github.io/webtransport/&quot; rel=&quot;noopener&quot;&gt;Complete&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3. Gather feedback and iterate design&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/webtransport/#feedback&quot;&gt;&lt;strong&gt;In Progress&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4. Origin trial&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/webtransport/#register-for-ot&quot;&gt;&lt;strong&gt;In Progress&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5. Launch&lt;/td&gt;
&lt;td&gt;Not Started&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;webtransport&#39;s-relationship-to-other-technologies&quot;&gt;WebTransport&#39;s relationship to other technologies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#webtransport&#39;s-relationship-to-other-technologies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;is-webtransport-a-replacement-for-websockets&quot;&gt;Is WebTransport a replacement for WebSockets? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#is-webtransport-a-replacement-for-websockets&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Maybe. There are use cases where either &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API&quot; rel=&quot;noopener&quot;&gt;WebSockets&lt;/a&gt; or WebTransport might be valid communication protocols to use.&lt;/p&gt;
&lt;p&gt;WebSockets communications are modeled around a single, reliable, ordered stream of messages, which is fine for some types of communication needs. If you need those characteristics, then WebTransport&#39;s streams APIs can provide them as well. In comparison, WebTransport&#39;s datagram APIs provide low-latency delivery, without guarantees about reliability or ordering, so they&#39;re not a direct replacement for WebSockets.&lt;/p&gt;
&lt;p&gt;Using WebTransport, via the datagram APIs or via multiple concurrent Streams API instances, means that you don&#39;t have to worry about &lt;a href=&quot;https://en.wikipedia.org/wiki/Head-of-line_blocking&quot; rel=&quot;noopener&quot;&gt;head-of-line blocking&lt;/a&gt;, which can be an issue with WebSockets. Additionally, there are performance benefits when establishing new connections, as the underlying &lt;a href=&quot;https://www.fastly.com/blog/quic-handshake-tls-compression-certificates-extension-study&quot; rel=&quot;noopener&quot;&gt;QUIC handshake&lt;/a&gt; is faster than starting up TCP over TLS.&lt;/p&gt;
&lt;p&gt;WebTransport is part of a new draft specification, and as such the WebSocket ecosystem around client and server libraries is currently much more robust. If you need something that works &amp;quot;out of the box&amp;quot; with common server setups, and with broad web client support, WebSockets is a better choice today.&lt;/p&gt;
&lt;h3 id=&quot;is-webtransport-the-same-as-a-udp-socket-api&quot;&gt;Is WebTransport the same as a UDP Socket API? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#is-webtransport-the-same-as-a-udp-socket-api&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;No. WebTransport is not a &lt;a href=&quot;https://www.w3.org/TR/raw-sockets/&quot; rel=&quot;noopener&quot;&gt;UDP Socket API&lt;/a&gt;. While WebTransport uses HTTP/3, which in turn uses UDP &amp;quot;under the hood,&amp;quot; WebTransport has requirements around encryption and congestion control that make it more than a basic UDP Socket API.&lt;/p&gt;
&lt;h3 id=&quot;is-webtransport-an-alternative-to-webrtc-data-channels&quot;&gt;Is WebTransport an alternative to WebRTC data channels? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#is-webtransport-an-alternative-to-webrtc-data-channels&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, for client-server connections. WebTransport shares many of the same properties as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel&quot; rel=&quot;noopener&quot;&gt;WebRTC data channels&lt;/a&gt;, although the underlying protocols are different.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;WebRTC data channels support peer-to-peer communications, but WebTransport only supports client-server connection. If you have multiple clients that need to talk directly to each other, then WebTransport isn&#39;t a viable alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Generally, running a HTTP/3-compatible server requires less setup and configuration than maintaining a WebRTC server, which involves understanding multiple protocols (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Connectivity#ICE_candidates&quot; rel=&quot;noopener&quot;&gt;ICE&lt;/a&gt;, &lt;a href=&quot;https://webrtc-security.github.io/#4.3.1.&quot; rel=&quot;noopener&quot;&gt;DTLS&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCSctpTransport&quot; rel=&quot;noopener&quot;&gt;SCTP&lt;/a&gt;) in order to get a working transport. WebRTC entails many more moving pieces that could lead to failed client/server negotiations.&lt;/p&gt;
&lt;p&gt;The WebTransport API was designed with the web developer use cases in mind, and should feel more like writing modern web platform code than using WebRTC&#39;s data channel interfaces. &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=302019&quot; rel=&quot;noopener&quot;&gt;Unlike WebRTC&lt;/a&gt;, WebTransport is supported inside of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&quot; rel=&quot;noopener&quot;&gt;Web Workers&lt;/a&gt;, which allows you to perform client-server communications independent of a given HTML page. Because WebTransport exposes a &lt;a href=&quot;https://streams.spec.whatwg.org/&quot; rel=&quot;noopener&quot;&gt;Streams&lt;/a&gt;-compliant interface, it supports optimizations around &lt;a href=&quot;https://streams.spec.whatwg.org/#backpressure&quot; rel=&quot;noopener&quot;&gt;backpressure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, if you already have a working WebRTC client/server setup that you&#39;re happy with, switching to WebTransport may not offer many advantages.&lt;/p&gt;
&lt;h2 id=&quot;try-it-out&quot;&gt;Try it out &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#try-it-out&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The best way to experiment with WebTransport is to start up a compatible HTTP/3 server locally. (Unfortunately, a public reference server compatible with the latest specification is not currently available.) You can then use this page with a &lt;a href=&quot;https://googlechrome.github.io/samples/webtransport/client.html&quot; rel=&quot;noopener&quot;&gt;basic JavaScript client&lt;/a&gt; to try out client/server communications.&lt;/p&gt;
&lt;h2 id=&quot;using-the-api&quot;&gt;Using the API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#using-the-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebTransport was designed on top of modern web platform primitives, like the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Streams_API&quot; rel=&quot;noopener&quot;&gt;Streams API&lt;/a&gt;. It relies heavily on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot; rel=&quot;noopener&quot;&gt;promises&lt;/a&gt;, and works well with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The WebTransport &lt;a href=&quot;https://web.dev/webtransport/#register-for-ot&quot;&gt;origin trial&lt;/a&gt; supports three distinct types of traffic: datagrams, as well as both unidirectional and bidirectional streams.&lt;/p&gt;
&lt;h3 id=&quot;connecting-to-a-server&quot;&gt;Connecting to a server &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#connecting-to-a-server&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can connect to a HTTP/3 server by creating a &lt;code&gt;WebTransport&lt;/code&gt; instance. The scheme of the URL should be &lt;code&gt;https&lt;/code&gt;. You need to explicitly specify the port number.&lt;/p&gt;
&lt;p&gt;You should use the &lt;code&gt;ready&lt;/code&gt; promise to wait for the connection to be established. This promise will not be fulfilled until the setup is complete, and will reject if the connection fails at the QUIC/TLS stage.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;closed&lt;/code&gt; promise fulfills when the connection closes normally, and rejects if the closure was unexpected.&lt;/p&gt;
&lt;p&gt;If the server rejects the connection due to a &lt;a href=&quot;https://tools.ietf.org/html/draft-vvv-webtransport-quic-01#section-3.2&quot; rel=&quot;noopener&quot;&gt;client indication&lt;/a&gt; error (e.g. the path of the URL is invalid), then that causes &lt;code&gt;closed&lt;/code&gt; to reject, while &lt;code&gt;ready&lt;/code&gt; remains unresolved.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://example.com:4999/foo/bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transport &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebTransport&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Optionally, set up functions to respond to&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// the connection closing:&lt;/span&gt;&lt;br /&gt;transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;closed&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The HTTP/3 connection to &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; closed gracefully.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The HTTP/3 connection to ${url} closed due to ${error}.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Once .ready fulfills, the connection can be used.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ready&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;datagram&quot;&gt;Datagram APIs &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#datagram&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you have a WebTransport instance that&#39;s connected to a server, you can use it to send and receive discrete bits of data, known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Datagram&quot; rel=&quot;noopener&quot;&gt;datagrams&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;writeable&lt;/code&gt; getter returns a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WritableStream&quot; rel=&quot;noopener&quot;&gt;WritableStream&lt;/a&gt;&lt;/code&gt;, which a web client can use to send data to the server. The &lt;code&gt;readable&lt;/code&gt; getter returns a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream&quot; rel=&quot;noopener&quot;&gt;ReadableStream&lt;/a&gt;&lt;/code&gt;, allowing you to listen for data from the server. Both streams are inherently unreliable, so it is possible that the data you write will not be received by the server, and vice versa.&lt;/p&gt;
&lt;p&gt;Both types of streams use &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot; rel=&quot;noopener&quot;&gt;Uint8Array&lt;/a&gt;&lt;/code&gt; instances for data transfer.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Send two datagrams to the server.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; writer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datagrams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Read datagrams from the server.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datagrams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; done&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// value is a Uint8Array.&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Chrome does not &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=929585&quot; rel=&quot;noopener&quot;&gt;currently&lt;/a&gt; expose an &lt;a href=&quot;https://github.com/whatwg/streams/issues/778&quot; rel=&quot;noopener&quot;&gt;async iterator&lt;/a&gt; for a &lt;code&gt;ReadableStream&lt;/code&gt;. For the time being, using the &lt;code&gt;getReader()&lt;/code&gt; method combined with a &lt;code&gt;while()&lt;/code&gt; loop is the best way to read from the stream.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;stream&quot;&gt;Streams APIs  &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#stream&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you&#39;ve connected to the server, you could also use WebTransport to send and receive data via its Streams APIs.&lt;/p&gt;
&lt;p&gt;Each chunk of all streams is a &lt;code&gt;Uint8Array&lt;/code&gt;. Unlike with the Datagram APIs, these streams are reliable. But each stream is independent, so data order across streams is not guaranteed.&lt;/p&gt;
&lt;h4 id=&quot;sendstream&quot;&gt;SendStream &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#sendstream&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;&lt;a href=&quot;https://wicg.github.io/web-transport/#sendstream&quot; rel=&quot;noopener&quot;&gt;SendStream&lt;/a&gt;&lt;/code&gt; is created by the web client using the &lt;code&gt;createSendStream()&lt;/code&gt; method of a &lt;code&gt;WebTransport&lt;/code&gt; instance, which returns a promise for the &lt;code&gt;SendStream&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/close&quot; rel=&quot;noopener&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter&quot; rel=&quot;noopener&quot;&gt;WritableStreamDefaultWriter&lt;/a&gt;&lt;/code&gt; to close the associated HTTP/3 connection. The browser tries to send all pending data before actually closing the associated connection.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Send two Uint8Arrays to the server.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createSendStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; writer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;All data has been sent.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;An error occurred: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;error&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Similarly, use the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/abort&quot; rel=&quot;noopener&quot;&gt;abort()&lt;/a&gt;&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter&quot; rel=&quot;noopener&quot;&gt;WritableStreamDefaultWriter&lt;/a&gt;&lt;/code&gt; to send a &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-transport-27#section-19.4&quot; rel=&quot;noopener&quot;&gt;QUIC RESET_STREAM&lt;/a&gt; to the server. When using &lt;code&gt;abort()&lt;/code&gt;, the browser may discard any pending data that hasn&#39;t yet been sent.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ws &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createSendStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; writer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Not all the data may have been written.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;receivestream&quot;&gt;ReceiveStream &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#receivestream&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;&lt;a href=&quot;https://wicg.github.io/web-transport/#receivestream&quot; rel=&quot;noopener&quot;&gt;ReceiveStream&lt;/a&gt;&lt;/code&gt; is initiated by the server. Obtaining a &lt;code&gt;ReceiveStream&lt;/code&gt; is a two-step process for a web client. First, it calls the &lt;code&gt;receiveStreams()&lt;/code&gt; method of a &lt;code&gt;WebTransport&lt;/code&gt; instance, which returns a &lt;code&gt;ReadableStream&lt;/code&gt;. Each chunk of that &lt;code&gt;ReadableStream&lt;/code&gt;, is, in turn, a &lt;code&gt;ReceiveStream&lt;/code&gt; that can be used to read &lt;code&gt;Uint8Array&lt;/code&gt; instances sent by the server.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;receiveStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; receiveStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// value is a Uint8Array&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;receiveStreams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// value is an instance of ReceiveStream&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You can detect stream closure using the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader/closed&quot; rel=&quot;noopener&quot;&gt;closed&lt;/a&gt;&lt;/code&gt; promise of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader&quot; rel=&quot;noopener&quot;&gt;ReadableStreamDefaultReader&lt;/a&gt;&lt;/code&gt;. When the underlying HTTP/3 connection is &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-transport-27#section-19.8&quot; rel=&quot;noopener&quot;&gt;closed with the FIN bit&lt;/a&gt;, the &lt;code&gt;closed&lt;/code&gt; promise is fulfilled after all the data is read. When the HTTP/3 connection is closed abruptly (for example, by &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-transport-27#section-19.4&quot; rel=&quot;noopener&quot;&gt;STREAM_RESET&lt;/a&gt;&lt;/code&gt;), then the &lt;code&gt;closed&lt;/code&gt; promise rejects.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Assume an active receiveStream&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; receiveStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;closed&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The receiveStream closed gracefully.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The receiveStream closed abruptly.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;bidirectionalstream&quot;&gt;BidirectionalStream &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#bidirectionalstream&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;&lt;a href=&quot;https://wicg.github.io/web-transport/#bidirectional-stream&quot; rel=&quot;noopener&quot;&gt;BidirectionalStream&lt;/a&gt;&lt;/code&gt; might be created either by the server or the client.&lt;/p&gt;
&lt;p&gt;Web clients can create one using the &lt;code&gt;createBidirectionalStream()&lt;/code&gt; method of a &lt;code&gt;WebTransport&lt;/code&gt; instance, which returns a promise for a &lt;code&gt;BidirectionalStream&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createBidirectionalStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// stream is a BidirectionalStream&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// stream.readable is a ReadableStream&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// stream.writable is a WritableStream&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You can listen for a &lt;code&gt;BidirectionalStream&lt;/code&gt; created by the server with the &lt;code&gt;receiveBidirectionalStreams()&lt;/code&gt; method of a &lt;code&gt;WebTransport&lt;/code&gt; instance, which returns a &lt;code&gt;ReadableStream&lt;/code&gt;. Each chunk of that &lt;code&gt;ReadableStream&lt;/code&gt;, is, in turn, a &lt;code&gt;BidirectionalStream&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;receiveBidrectionalStreams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// value is a BidirectionalStream&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// value.readable is a ReadableStream&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// value.writable is a WritableStream&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;A &lt;code&gt;BidirectionalStream&lt;/code&gt; is just a combination of a &lt;code&gt;SendStream&lt;/code&gt; and &lt;code&gt;ReceiveStream&lt;/code&gt;. The examples from the previous two sections explain how to use each of them.&lt;/p&gt;
&lt;h3 id=&quot;more-examples&quot;&gt;More examples &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#more-examples&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://wicg.github.io/web-transport/&quot; rel=&quot;noopener&quot;&gt;WebTransport draft specification&lt;/a&gt; includes a number of additional inline examples, along with full documentation for all of the methods and properties.&lt;/p&gt;
&lt;h2 id=&quot;register-for-ot&quot;&gt;Enabling support during the origin trial &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#register-for-ot&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/origintrials/#/view_trial/793759434324049921&quot; rel=&quot;noopener&quot;&gt;Request a token&lt;/a&gt; for your origin.&lt;/li&gt;
&lt;li&gt;Add the token to your pages. There are two ways to do that:
&lt;ul&gt;
&lt;li&gt;Add an &lt;code&gt;origin-trial&lt;/code&gt; &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag to the head of each page. For example,
this may look something like: &lt;br /&gt;
&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;origin-trial&amp;quot; content=&amp;quot;TOKEN_GOES_HERE&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you can configure your server, you can also add the token
using an &lt;code&gt;Origin-Trial&lt;/code&gt; HTTP header. The resulting response header should
look something like:&lt;br /&gt;
&lt;code&gt;Origin-Trial: TOKEN_GOES_HERE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;webtransport-in-chrome&#39;s-devtools&quot;&gt;WebTransport in Chrome&#39;s DevTools &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#webtransport-in-chrome&#39;s-devtools&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Unfortunately, &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools&quot; rel=&quot;noopener&quot;&gt;Chrome&#39;s DevTools&lt;/a&gt; support for WebTransport is not ready for the start of the origin trial. You can &amp;quot;star&amp;quot; &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=1069742&quot; rel=&quot;noopener&quot;&gt;this Chrome issue&lt;/a&gt; to be notified about updates on the DevTools interface.&lt;/p&gt;
&lt;h2 id=&quot;privacy-and-security-considerations&quot;&gt;Privacy and security considerations &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#privacy-and-security-considerations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;See the &lt;a href=&quot;https://wicg.github.io/web-transport/#privacy-security&quot; rel=&quot;noopener&quot;&gt;corresponding section&lt;/a&gt; of the draft specification for authoritative guidance.&lt;/p&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback  &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#feedback&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Chrome team wants to hear your thoughts and experiences using this API throughout the origin trial process.&lt;/p&gt;
&lt;h3 id=&quot;feedback-about-the-api-design&quot;&gt;Feedback about the API design &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#feedback-about-the-api-design&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Is there something about the API that&#39;s awkward or doesn&#39;t work as expected? Or are there missing pieces that you need to implement your idea?&lt;/p&gt;
&lt;p&gt;File an issue on the &lt;a href=&quot;https://github.com/WICG/web-transport/issues&quot; rel=&quot;noopener&quot;&gt;Web Transport GitHub repo&lt;/a&gt;, or add your thoughts to an existing issue.&lt;/p&gt;
&lt;h3 id=&quot;problem-with-the-implementation&quot;&gt;Problem with the implementation? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#problem-with-the-implementation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Did you find a bug with Chrome&#39;s implementation?&lt;/p&gt;
&lt;p&gt;File a bug at &lt;a href=&quot;https://new.crbug.com/&quot; rel=&quot;noopener&quot;&gt;https://new.crbug.com&lt;/a&gt;. Include as much detail as you can, along with simple instructions for reproducing.&lt;/p&gt;
&lt;h3 id=&quot;planning-to-use-the-api&quot;&gt;Planning to use the API? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#planning-to-use-the-api&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Your public support helps Chrome prioritize features, and shows other browser vendors how critical it is to support them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be sure you have signed up for the &lt;a href=&quot;https://developer.chrome.com/origintrials/#/view_trial/793759434324049921&quot; rel=&quot;noopener&quot;&gt;origin trial&lt;/a&gt; to show your interest and provide your domain and contact info.&lt;/li&gt;
&lt;li&gt;Send a tweet to &lt;a href=&quot;https://twitter.com/chromiumdev&quot; rel=&quot;noopener&quot;&gt;@ChromiumDev&lt;/a&gt; using the hashtag
&lt;a href=&quot;https://twitter.com/search?q=%23WebTransport&amp;amp;src=typed_query&amp;amp;f=live&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;#WebTransport&lt;/code&gt;&lt;/a&gt;
and details on where and how you&#39;re using it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;general-discussion&quot;&gt;General discussion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#general-discussion&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use the &lt;a href=&quot;https://groups.google.com/a/chromium.org/g/web-transport-dev&quot; rel=&quot;noopener&quot;&gt;web-transport-dev Google Group&lt;/a&gt; for general questions or problems that don&#39;t fit into one of the other categories.&lt;/p&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#acknowledgements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article incorporates information from the &lt;a href=&quot;https://github.com/wicg/web-transport/blob/master/explainer.md&quot; rel=&quot;noopener&quot;&gt;WebTransport Explainer&lt;/a&gt;, &lt;a href=&quot;https://wicg.github.io/web-transport/&quot; rel=&quot;noopener&quot;&gt;draft specification&lt;/a&gt;, and &lt;a href=&quot;https://docs.google.com/document/d/1UgviRBnZkMUq4OKcsAJvIQFX6UCXeCbOtX_wMgwD_es/edit#&quot; rel=&quot;noopener&quot;&gt;related design docs&lt;/a&gt;. Thank you to the respective authors for providing that foundation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The hero image on this post is by &lt;a href=&quot;https://unsplash.com/photos/dPgPoiUIiXk&quot; rel=&quot;noopener&quot;&gt;Robin Pierre&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Preparing for AppCache removal</title>
    <link href="https://web.dev/appcache-removal/"/>
    <updated>2020-05-18T00:00:00Z</updated>
    <id>https://web.dev/appcache-removal/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Following up on &lt;a href=&quot;https://blog.chromium.org/2020/01/appcache-scope-restricted.html&quot; rel=&quot;noopener&quot;&gt;previous announcements&lt;/a&gt;, support for &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTML/Using_the_application_cache&quot; rel=&quot;noopener&quot;&gt;AppCache&lt;/a&gt; will be removed from Chrome and other Chromium-based browsers. We encourage developers to migrate off of AppCache now, rather than waiting any longer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers&quot; rel=&quot;noopener&quot;&gt;Service workers&lt;/a&gt;,
which are widely supported in current browsers, offer an alternative to providing the offline
experience that AppCache had offered. See &lt;a href=&quot;https://web.dev/appcache-removal/#migration-strategies&quot;&gt;Migration strategies&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;timeline&quot;&gt;Timeline &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#timeline&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.chromium.org/2020/03/chrome-and-chrome-os-release-updates.html&quot; rel=&quot;noopener&quot;&gt;Recent changes&lt;/a&gt; to the Chrome release schedule means that the timing of some of these steps may vary. We will attempt to keep this timeline up-to-date, but at this point, please migrate off of AppCache as soon as possible, instead of waiting for specific milestones.&lt;/p&gt;
&lt;p&gt;A &amp;quot;deprecated&amp;quot; feature still exists, but logs warning messages discouraging use. A &amp;quot;removed&amp;quot; feature no longer exists in the browser.&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
    &lt;td&gt;&lt;a href=&quot;https://groups.google.com/a/chromium.org/g/blink-dev/c/UKF8cK0EwMI/m/NLhsIrs-AQAJ&quot;&gt;Deprecation in non-secure contexts&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;Chrome 50 (April 2016)
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;&lt;a href=&quot;https://groups.google.com/a/chromium.org/g/blink-dev/c/ANnafFBhReY/m/1Xdr53KxBAAJ?pli=1&quot;&gt;Removal from non-secure contexts&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;Chrome 70 (October 2018)
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;&lt;a href=&quot;https://groups.google.com/a/chromium.org/g/blink-dev/c/FvM-qo7BfkI/m/0daqyD8kCQAJ&quot;&gt;Deprecation in secure contexts&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;Chrome 79 (December 2019)
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;&lt;a href=&quot;https://blog.chromium.org/2020/01/appcache-scope-restricted.html&quot;&gt;AppCache scope restriction&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;Chrome 80 (February 2020)
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;&quot;Reverse&quot; origin trial begins
    &lt;/td&gt;
    &lt;td&gt;Chrome 84 (&lt;a href=&quot;https://chromiumdash.appspot.com/schedule&quot;&gt;estimated July 2020&lt;/a&gt;)
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;&lt;a href=&quot;https://groups.google.com/a/chromium.org/g/blink-dev/c/FvM-qo7BfkI/m/AvxoE6JpBgAJ&quot;&gt;Removal from secure contexts&lt;/a&gt;, except for those opted-in to the origin trial
    &lt;/td&gt;
    &lt;td&gt;Chrome 85 (&lt;a href=&quot;https://chromiumdash.appspot.com/schedule&quot;&gt;estimated August 2020&lt;/a&gt;)
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;Complete removal from secure contexts for everyone, with completion of origin trial
    &lt;/td&gt;
    &lt;td&gt;Chrome 93 (&lt;a href=&quot;https://chromiumdash.appspot.com/schedule&quot;&gt;estimated October 2021&lt;/a&gt;)
    &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This timeline applies to Chrome on &lt;strong&gt;all platforms other than iOS&lt;/strong&gt;. There is also an adjusted timeline for AppCache used within an Android &lt;a href=&quot;https://developer.android.com/reference/android/webkit/WebView&quot; rel=&quot;noopener&quot;&gt;WebView&lt;/a&gt;. For more info, see &lt;a href=&quot;https://web.dev/appcache-removal/#the-cross-platform-story&quot;&gt;The cross-platform story&lt;/a&gt; later in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;origin-trial&quot;&gt;Origin trial &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#origin-trial&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The timeline lists two upcoming milestones for removal. Beginning with Chrome 85, AppCache will no longer be available in Chrome by default. Developers who require additional time to migrate off of AppCache can &lt;a href=&quot;https://developers.chrome.com/origintrials/#/register_trial/1776670052997660673&quot; rel=&quot;noopener&quot;&gt;sign up&lt;/a&gt; for a &amp;quot;reverse&amp;quot; &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md&quot; rel=&quot;noopener&quot;&gt;origin trial&lt;/a&gt; to extend the availability of AppCache for their web apps. The origin trial will start in Chrome 84 (in advance of the default removal in Chrome 85), and will be active through Chrome 89. Starting with Chrome 90, AppCache will be fully removed for everyone, even those who had signed up for the origin trial.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Why are we calling this a &amp;quot;reverse&amp;quot; origin trial? Normally, an origin trial allows developers to opt-in to early access to new functionality before it has shipped by default in Chrome. In this case, we&#39;re allowing developers to opt-in to using legacy technology even after it&#39;s been removed from Chrome, but only temporarily.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To participate in the &amp;quot;reverse&amp;quot; origin trial:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;https://developers.chrome.com/origintrials/#/register_trial/1776670052997660673&quot;&gt;Request a token&lt;/a&gt; for your origin.
&lt;/li&gt;
&lt;li&gt;
Add the token to your HTML pages. There are &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md#how-do-i-enable-an-experimental-feature-on-my-origin&quot;&gt;two ways&lt;/a&gt; to do that:
&lt;ul&gt;
&lt;li&gt;
Add an &lt;code&gt;origin-trial&lt;/code&gt; &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag to the head of each page. For example: &lt;code&gt;&amp;lt;meta http-equiv=&quot;origin-trial&quot; content=&quot;TOKEN_GOES_HERE&quot;&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
Alternatively, configure your server to return responses containing the &lt;code&gt;Origin-Trial&lt;/code&gt; HTTP header. The resulting response header should look something like: &lt;code&gt;Origin-Trial: TOKEN_GOES_HERE&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
Add the same token to your AppCache manifests. Do this via a new field in your manifest, with the format:
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ORIGIN-TRIAL:&lt;br /&gt;TOKEN_GOES_HERE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;(There needs to be a new line between &lt;code&gt;ORIGIN-TRIAL&lt;/code&gt; and your token.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The token for a manifest &lt;strong&gt;must&lt;/strong&gt; be in an &lt;code&gt;ORIGIN-TRIAL&lt;/code&gt; field of the manifest itself. Unlike an HTML page&#39;s token, it can&#39;t be provided via an HTTP header.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can see a sample project embedded below that demonstrates adding the correct origin trial tokens into both the &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;manifest.appcache&lt;/code&gt; files.&lt;/p&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 480px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/appcache-reverse-ot?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=manfiest.appcache&amp;previewSize=100&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;appcache-reverse-ot on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h3 id=&quot;why-are-tokens-needed-in-multiple-places&quot;&gt;Why are tokens needed in multiple places? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#why-are-tokens-needed-in-multiple-places&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;same origin trial token&lt;/strong&gt; needs to be associated with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;All of your HTML pages&lt;/strong&gt; that use AppCache.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All of your AppCache manifests&lt;/strong&gt; via the &lt;code&gt;ORIGIN-TRIAL&lt;/code&gt; manifest field.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&#39;ve participated in origin trials in the past, you might have added the token just to your HTML pages. The AppCache &amp;quot;reverse&amp;quot; origin trial is special in that you need to associate a token with each of your AppCache manifests as well.&lt;/p&gt;
&lt;p&gt;Adding the origin trial token to your HTML pages enables the &lt;code&gt;window.applicationCache&lt;/code&gt; interface from within your web apps. Pages that are not associated with a token won&#39;t be able to use &lt;code&gt;window.applicationCache&lt;/code&gt; methods and events. Pages without a token also won&#39;t be able to load resources from the AppCache. Starting with Chrome 85, they will behave as if AppCache did not exist.&lt;/p&gt;
&lt;p&gt;Adding the origin trial token to your AppCache manifests indicates that each manifest is still valid. Starting with Chrome 85, any manifests that does not have an &lt;code&gt;ORIGIN-TRIAL&lt;/code&gt; field will be treated as malformed, and the rules within the manifest will be ignored.&lt;/p&gt;
&lt;h3 id=&quot;origin-trial-deployment-timing-and-logistics&quot;&gt;Origin trial deployment timing and logistics &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#origin-trial-deployment-timing-and-logistics&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While the &amp;quot;reverse&amp;quot; origin trial officially starts with Chrome 84, you can &lt;a href=&quot;https://developers.chrome.com/origintrials/#/register_trial/1776670052997660673&quot; rel=&quot;noopener&quot;&gt;sign up&lt;/a&gt; for the origin trial today and add the tokens to your HTML and AppCache manifests. As your web app&#39;s audience gradually upgrades to Chrome 84, any tokens that you&#39;ve already added will go into effect.&lt;/p&gt;
&lt;p&gt;Once you&#39;ve added a token to your AppCache manifest, visit &lt;code&gt;about://appcache-internals&lt;/code&gt; to confirm that your local instance of Chrome (version 84 or later) has properly associated the origin trial token with your manifest&#39;s cached entries. If your origin trial is recognized, you should see a field with &lt;code&gt;Token Expires: Tue Apr 06 2021...&lt;/code&gt; on that page, associated with your manifest:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;about://appcache-internals interface showing a recognized token.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;203&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 550px) 550px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/Xid94kdPT5yGbQzBL4at.jpg?auto=format&amp;w=1100 1100w&quot; width=&quot;550&quot; /&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;testing-prior-to-removal&quot;&gt;Testing prior to removal &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#testing-prior-to-removal&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We strongly encourage you to migrate off of AppCache as soon as is feasible. If you want to test removal of AppCache on your web apps, use the &lt;code&gt;about://flags/#app-cache&lt;/code&gt; &lt;a href=&quot;https://www.chromium.org/developers/how-tos/run-chromium-with-flags&quot; rel=&quot;noopener&quot;&gt;flag&lt;/a&gt; to simulate its removal. This flag is available starting with Chrome 84.&lt;/p&gt;
&lt;h2 id=&quot;migration-strategies&quot;&gt;Migration strategies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#migration-strategies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Service workers, which are &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/ServiceWorker#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;widely supported in current browsers&lt;/a&gt;, offer an alternative to the offline experience provided by AppCache.&lt;/p&gt;
&lt;p&gt;We&#39;ve provided a &lt;a href=&quot;https://github.com/GoogleChromeLabs/sw-appcache-behavior&quot; rel=&quot;noopener&quot;&gt;polyfill&lt;/a&gt; that uses a service worker to replicate some of the functionality of AppCache, though it does not replicate the entire AppCache interface. In particular, it does not provide a replacement for the &lt;code&gt;window.applicationCache&lt;/code&gt; interface or the related AppCache events.&lt;/p&gt;
&lt;p&gt;For more complex cases, libraries like &lt;a href=&quot;https://developers.google.com/web/tools/workbox/&quot; rel=&quot;noopener&quot;&gt;Workbox&lt;/a&gt; provide an easy way to create a modern service worker for your web app.&lt;/p&gt;
&lt;h3 id=&quot;service-workers-and-appcache-are-mutually-exclusive&quot;&gt;Service workers and AppCache are mutually exclusive &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#service-workers-and-appcache-are-mutually-exclusive&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While working on your migration strategy, please keep in mind that Chrome will disable AppCache functionality on any page that&#39;s loaded under the &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#scope_and_control&quot; rel=&quot;noopener&quot;&gt;control&lt;/a&gt; of a service worker. In other words, as soon as you deploy a service worker that controls a given page, you&#39;re no longer able to use AppCache on that page.&lt;/p&gt;
&lt;p&gt;Because of this, we recommend that you do not attempt to migrate to service workers piece-by-piece. It would be a mistake to deploy a service worker that only contains some of your caching logic. You cannot fall back on AppCache to &amp;quot;fill in the gaps.&amp;quot;&lt;/p&gt;
&lt;p&gt;Similarly, if you deploy a service worker prior to AppCache removal, and then discover that you need to roll back to your previous AppCache implementation, you need to ensure that you &lt;a href=&quot;https://stackoverflow.com/a/33705250/385997&quot; rel=&quot;noopener&quot;&gt;unregister&lt;/a&gt; that service worker. As long as there&#39;s a registered service worker in scope for a given page, AppCache will not be used.&lt;/p&gt;
&lt;h2 id=&quot;the-cross-platform-story&quot;&gt;The cross-platform story &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#the-cross-platform-story&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We encourage you to follow up with a specific browser vendor if you&#39;d like more information about their plans for AppCache removal.&lt;/p&gt;
&lt;h3 id=&quot;firefox-on-all-platforms&quot;&gt;Firefox on all platforms &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#firefox-on-all-platforms&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Firefox &lt;a href=&quot;https://www.fxsitecompat.dev/en-CA/docs/2015/application-cache-api-has-been-deprecated/&quot; rel=&quot;noopener&quot;&gt;deprecated&lt;/a&gt; AppCache in release 44 (September 2015), and has &lt;a href=&quot;https://www.fxsitecompat.dev/en-CA/docs/2019/application-cache-storage-has-been-removed-in-nightly-and-early-beta/&quot; rel=&quot;noopener&quot;&gt;removed&lt;/a&gt; support for it in its Beta and Nightly builds as of September 2019.&lt;/p&gt;
&lt;h3 id=&quot;safari-on-ios-and-macos&quot;&gt;Safari on iOS and macOS &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#safari-on-ios-and-macos&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Safari &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=181764&quot; rel=&quot;noopener&quot;&gt;deprecated&lt;/a&gt; AppCache in early 2018.&lt;/p&gt;
&lt;h3 id=&quot;chrome-on-ios&quot;&gt;Chrome on iOS &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#chrome-on-ios&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Chrome for iOS is a special case, as it uses a different browser engine than Chrome on other platforms: the &lt;a href=&quot;https://developer.apple.com/documentation/webkit/wkwebview&quot; rel=&quot;noopener&quot;&gt;WKWebView&lt;/a&gt;. Service workers are not currently supported in iOS apps using WKWebView, and Chrome&#39;s AppCache removal announcement does not cover the &lt;a href=&quot;https://webkit.org/status/#specification-application-cache&quot; rel=&quot;noopener&quot;&gt;availability of AppCache on Chrome for iOS&lt;/a&gt;. Please keep this in mind if you know that your web app has a significant Chrome for iOS audience.&lt;/p&gt;
&lt;h3 id=&quot;android-webviews&quot;&gt;Android WebViews &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#android-webviews&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some developers of Android applications use Chrome &lt;a href=&quot;https://developer.android.com/reference/android/webkit/WebView&quot; rel=&quot;noopener&quot;&gt;WebView&lt;/a&gt; to display web content, and might also use AppCache. However, it&#39;s not possible to enable an origin trial for a WebView. In light of that, Chrome WebView will support AppCache without an origin trial until the final removal takes place, expected in Chrome 90.&lt;/p&gt;
&lt;h2 id=&quot;learn-more&quot;&gt;Learn more &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#learn-more&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are some resources for developers migrating from AppCache to service workers.&lt;/p&gt;
&lt;h3 id=&quot;articles&quot;&gt;Articles &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#articles&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers&quot; rel=&quot;noopener&quot;&gt;Service Workers: an Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle&quot; rel=&quot;noopener&quot;&gt;The Service Worker Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/ilt/pwa&quot; rel=&quot;noopener&quot;&gt;Progressive Web Apps Training&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/reliable/&quot;&gt;Network Reliability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tools&quot;&gt;Tools &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#tools&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChromeLabs/sw-appcache-behavior&quot; rel=&quot;noopener&quot;&gt;AppCache Polyfill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/workbox/&quot; rel=&quot;noopener&quot;&gt;Workbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pwabuilder.com/&quot; rel=&quot;noopener&quot;&gt;PWA Builder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;getting-help&quot;&gt;Getting help &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/appcache-removal/#getting-help&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you run into an issue using a specific tool, open an issue in its GitHub repository.&lt;/p&gt;
&lt;p&gt;You can ask a general question about migrating off of AppCache on &lt;a href=&quot;https://stackoverflow.com/&quot; rel=&quot;noopener&quot;&gt;Stack Overflow&lt;/a&gt;, using the tag &lt;code&gt;&lt;a href=&quot;https://stackoverflow.com/questions/tagged/html5-appcache&quot; rel=&quot;noopener&quot;&gt;html5-appcache&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you encounter a bug related to Chrome&#39;s AppCache removal, please &lt;a href=&quot;https://crbug.com/new&quot; rel=&quot;noopener&quot;&gt;report it&lt;/a&gt; using the Chromium issue tracker.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hero image based on &lt;a href=&quot;https://www.si.edu/object/usnm-storage-drawer:siris_arc_391797&quot; rel=&quot;noopener&quot;&gt;Smithsonian Institution Archives, Acc. 11-007, Box 020, Image No. MNH-4477&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Extending Workbox</title>
    <link href="https://web.dev/extending-workbox/"/>
    <updated>2020-12-10T00:00:00Z</updated>
    <id>https://web.dev/extending-workbox/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;In this article, we&#39;re going to take a quick tour of some ways of extending
&lt;a href=&quot;https://developers.google.com/web/tools/workbox&quot; rel=&quot;noopener&quot;&gt;Workbox&lt;/a&gt;. By the end, you&#39;ll
be writing your own strategies and plugins, and hopefully sharing them with the
world.&lt;/p&gt;
&lt;p&gt;If you&#39;re more of a visual person, you can watch a recording of a Chrome
Dev Summit talk covering the same material:&lt;/p&gt;
&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;jR9-aDWZeSE&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;h2 id=&quot;what&#39;s-workbox&quot;&gt;What&#39;s Workbox? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#what&#39;s-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At its core, Workbox is a set of libraries to help with common service worker
caching scenarios. And when we&#39;ve written about Workbox in the past, the
emphasis has been on &amp;quot;common&amp;quot; scenarios. For most developers, the
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies&quot; rel=&quot;noopener&quot;&gt;caching strategies&lt;/a&gt;
that Workbox already provides will handle your caching needs.&lt;/p&gt;
&lt;p&gt;The built-in strategies include
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#stale-while-revalidate&quot; rel=&quot;noopener&quot;&gt;stale-while-revalidate&lt;/a&gt;,
where a cached response is used to respond to a request immediately, while the
cache is also updated so that it&#39;s fresh the next time around. They also include
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#network_first_network_falling_back_to_cache&quot; rel=&quot;noopener&quot;&gt;network-first&lt;/a&gt;,
falling back to the cache when the network is unavailable, and a few more.&lt;/p&gt;
&lt;h2 id=&quot;custom-strategies&quot;&gt;Custom strategies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#custom-strategies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But what if you wanted to go beyond those common caching scenarios? Let&#39;s cover
writing your own custom caching strategies.
&lt;a href=&quot;https://github.com/GoogleChrome/workbox/releases/tag/v6.0.0&quot; rel=&quot;noopener&quot;&gt;Workbox v6&lt;/a&gt; offers
a new &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-strategies.Strategy&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Strategy&lt;/code&gt; base class&lt;/a&gt; that sits in front of lower-level APIs, like
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot; rel=&quot;noopener&quot;&gt;Fetch&lt;/a&gt; and
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage&quot; rel=&quot;noopener&quot;&gt;Cache Storage&lt;/a&gt;.
You can extend the &lt;code&gt;Strategy&lt;/code&gt; base class, and then implement your own logic in
the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-strategies.Strategy#_handle&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;_handle()&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;handle-simultaneous-duplicate-requests-with-dedupenetworkfirst&quot;&gt;Handle simultaneous, duplicate requests with DedupeNetworkFirst &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#handle-simultaneous-duplicate-requests-with-dedupenetworkfirst&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For instance, imagine that you want to implement a strategy that can handle
multiple, simultaneous requests for the same URL by deduplicating them. A copy
of the response is then used to fulfill all of the in-flight requests, saving
bandwidth that would otherwise be wasted.&lt;/p&gt;
&lt;p&gt;Here&#39;s the code you can use to implement that, by extending the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-strategies.NetworkFirst&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;NetworkFirst&lt;/code&gt;
strategy&lt;/a&gt; (which itself extends the &lt;code&gt;Strategy&lt;/code&gt; base):&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// See https://developers.google.com/web/tools/workbox/guides/using-bundlers&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NetworkFirst&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-strategies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DedupeNetworkFirst&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NetworkFirst&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// This maps inflight requests to response promises.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_requests &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// _handle is the standard entry point for our logic.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; responsePromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;responsePromise&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// If there&#39;s already an inflight request, return a copy&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// of the eventual response.&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; responsePromise&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// If there isn&#39;t already an inflight request, then use&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// the _handle() method of NetworkFirst to kick one off.&lt;/span&gt;&lt;br /&gt;      responsePromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;_handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; responsePromise&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; responsePromise&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Make sure to clean up after a batch of inflight&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// requests are fulfilled!&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This code assumes that all requests for the same URL can be
satisfied with the same response, which won&#39;t always be the case if cookies or
session state information comes into play.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;create-a-race-between-the-cache-and-network-with-cachenetworkrace&quot;&gt;Create a race between the cache and network with CacheNetworkRace &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#create-a-race-between-the-cache-and-network-with-cachenetworkrace&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&#39;s another example of a custom strategy—one that&#39;s a twist on
stale-while-revalidate, where both the network and cache are checked at the same
time, with a race to see which will return a response first.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// See https://developers.google.com/web/tools/workbox/guides/using-bundlers&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Strategy&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-strategies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Instead of extending an existing strategy,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// this extends the generic Strategy base class.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CacheNetworkRace&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Strategy&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// _handle is the standard entry point for our logic.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;_handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// handler is an instance of the StrategyHandler class,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// and exposes helper methods for interacting with the&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// cache and network.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetchDone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchAndCachePut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; matchDone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cacheMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// The actual response generation logic relies on a &quot;race&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// between the network and cache promises.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      fetchDone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      matchDone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Promise.allSettled() is implemented in recent browsers.&lt;/span&gt;&lt;br /&gt;      Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;allSettled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fetchDone&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; matchDone&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rejected&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reason&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;stategyhandler:-the-recommended-approach-for-creating-custom-strategies&quot;&gt;StategyHandler: the recommended approach for creating custom strategies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#stategyhandler:-the-recommended-approach-for-creating-custom-strategies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although it&#39;s not required, it&#39;s strongly recommended that when interacting with
the network or cache, you use the instance of the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-strategies.StrategyHandler&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;StrategyHandler&lt;/code&gt; class&lt;/a&gt; that&#39;s
passed to your &lt;code&gt;_handle()&lt;/code&gt; method. It&#39;s the second parameter, called &lt;code&gt;handler&lt;/code&gt;
in the example code.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;StrategyHandler&lt;/code&gt; instance will automatically pick up the cache name you&#39;ve
configured for the strategy, and calling its methods will invoke the expected
plugin lifecycle callbacks that we&#39;ll describe soon.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;StrategyHandler&lt;/code&gt; instance supports the following methods:&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Method&lt;/th&gt;
        &lt;th&gt;Purpose&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Calls &lt;code&gt;fetch()&lt;/code&gt;, invokes lifecycle events.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cachePut&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Calls &lt;code&gt;cache.put()&lt;/code&gt; on the configured cache, invokes lifecycle events.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cacheMatch&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Calls &lt;code&gt;cache.match()&lt;/code&gt; on the configured cache, invokes lifecycle events.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;fetchAndCachePut&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Calls &lt;code&gt;fetch()&lt;/code&gt; and then &lt;code&gt;cache.put()&lt;/code&gt; on the configured cache, invokes
        lifecycle events.&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&quot;drop-in-support-for-routing&quot;&gt;Drop-in support for routing &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#drop-in-support-for-routing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Writing a Workbox strategy class is a great way to package up response logic in
a reusable, and shareable, form. But once you&#39;ve written one, how do you use it
within your larger Workbox service worker? That&#39;s the best part—you can drop any
of these strategies directly into your existing Workbox
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/route-requests&quot; rel=&quot;noopener&quot;&gt;routing rules&lt;/a&gt;,
just like any of the &amp;quot;official&amp;quot; strategies.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// See https://developers.google.com/web/tools/workbox/guides/using-bundlers&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;ExpirationPlugin&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-expiration&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;registerRoute&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-routing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// DedupeNetworkFirst can be defined inline, or imported.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pathname&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// DedupeNetworkFirst supports the standard strategy&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// configuration options, like cacheName and plugins.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DedupeNetworkFirst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;my-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExpirationPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;A properly written strategy should automatically work with all plugins as well.
This applies to the standard plugins that Workbox provides, like the one that
handles
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-expiration&quot; rel=&quot;noopener&quot;&gt;cache expiration&lt;/a&gt;.
But you&#39;re not limited to using the standard set of plugins! Another great way
to extend Workbox is to write your own reusable plugins.&lt;/p&gt;
&lt;h2 id=&quot;custom-plugins&quot;&gt;Custom plugins &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#custom-plugins&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking a step back, what is a Workbox plugin, and why would you write your own?
A plugin doesn&#39;t fundamentally change the order of network and cache operations
performed by a strategy. Instead, it allows you to add in extra code that will
be run at critical points in the lifetime of a request, like when a network
request fails, or when a cached response is about to be returned to the page.&lt;/p&gt;
&lt;h3 id=&quot;lifecycle-event-overview&quot;&gt;Lifecycle event overview &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#lifecycle-event-overview&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&#39;s an overview of all the events that a plugin could listen to. Technical
details about implementing callbacks for these events is in the
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/using-plugins&quot; rel=&quot;noopener&quot;&gt;Workbox documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Lifecycle Event&lt;/th&gt;
        &lt;th&gt;Purpose&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cacheWillUpdate&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Change response before it&#39;s written to cache.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cacheDidUpdate&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Do something following a cache write.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cacheKeyWillBeUsed&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Override the cache key used for reads or writes.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cachedResponseWillBeUsed&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Change response read from cache before it&#39;s used.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;requestWillFetch&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Change request before it&#39;s sent to the network.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;fetchDidFail&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Do something when a network request fails.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;fetchDidSucceed&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Do something when a network request succeeds.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;handlerWillStart&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Take note of when a handler starts up.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;handlerWillRespond&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Take note of when a handler is about to respond.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;handlerDidRespond&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Take note of when a handler finishes responding.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;handlerDidComplete&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Take note of when a handler has run all its code.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;handlerDidError&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Provide a fallback response if a handler throws an error.&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;When writing your own plugin, you&#39;ll only implement callbacks for the limited
number of events that match your purpose—there&#39;s no need to add in callbacks for
&lt;em&gt;all&lt;/em&gt; of the possible events. Additionally, it&#39;s up to you whether you implement
your plugin as an
&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot; rel=&quot;noopener&quot;&gt;Object&lt;/a&gt;&lt;/code&gt;
with properties that match the lifecycle event names, or as a class that exposes
methods with those names.&lt;/p&gt;
&lt;h3 id=&quot;lifecycle-events-example:-fallbackonerrorplugin&quot;&gt;Lifecycle events example: FallbackOnErrorPlugin &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#lifecycle-events-example:-fallbackonerrorplugin&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For instance, here&#39;s a custom plugin class that implements callback methods for
two events: &lt;code&gt;fetchDidSucceed&lt;/code&gt;, and &lt;code&gt;handlerDidError&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FallbackOnErrorPlugin&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fallbackURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Pass in a URL that you know is cached.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fallbackURL &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fallbackURL&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;fetchDidSucceed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If the network request returned a 2xx response,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// just use it as-is.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ok&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Otherwise, throw an error to trigger handlerDidError.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error response (&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Invoked whenever the strategy throws an error during handling.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;handlerDidError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// This will match the cached URL regardless of whether&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// there&#39;s any query parameters, i.e. those added&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// by Workbox precaching.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fallbackURL&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      ignoreSearch&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This plugin class provides a &amp;quot;fallback&amp;quot; whenever a strategy would otherwise
generate an error response. It can be added to any strategy class, and if
running that strategy does not result in a &lt;code&gt;2xx OK&lt;/code&gt; response, it will use a
backup response from the cache instead.&lt;/p&gt;
&lt;h2 id=&quot;custom-strategy-or-custom-plugin&quot;&gt;Custom strategy or custom plugin? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#custom-strategy-or-custom-plugin&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that you know more about custom strategies and plugins, you might be
wondering which one to write for a given use case.&lt;/p&gt;
&lt;p&gt;A good rule of thumb is to sketch out a diagram of your desired request and
response flow, taking into account the network and cache interactions. Then,
compare that to the
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies&quot; rel=&quot;noopener&quot;&gt;diagrams&lt;/a&gt;
of the built-in strategies. If your diagram has a set of connections then that&#39;s
fundamentally different, that&#39;s a sign that a custom strategy is the best
solution.&lt;/p&gt;
&lt;p&gt;Conversely, if your diagram ends up looking mostly like a standard strategy but
with a few extra pieces of logic injected at keys points, then you should
probably write a custom plugin.&lt;/p&gt;
&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#takeaways&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Whichever approach to customizing Workbox you go with, I hope this article has
inspired you write your own strategies and plugins, and then release them on
&lt;a href=&quot;https://www.npmjs.com/&quot; rel=&quot;noopener&quot;&gt;npm&lt;/a&gt;, tagged with &lt;code&gt;workbox-strategy&lt;/code&gt; or
&lt;code&gt;workbox-plugin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using those tags, you can search npm for
&lt;a href=&quot;https://www.npmjs.com/search?q=workbox-strategy&quot; rel=&quot;noopener&quot;&gt;strategies&lt;/a&gt; and
&lt;a href=&quot;https://www.npmjs.com/search?q=workbox-plugin&quot; rel=&quot;noopener&quot;&gt;plugins&lt;/a&gt; that have already been
released.&lt;/p&gt;
&lt;p&gt;Go out there and extend Workbox, and then share what you build!&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>What is network reliability and how do you measure it?</title>
    <link href="https://web.dev/network-connections-unreliable/"/>
    <updated>2018-11-05T00:00:00Z</updated>
    <id>https://web.dev/network-connections-unreliable/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;The modern web is enjoyed by a wide swath of people, using a range of different
devices and types of network connections. Your creations can reach users all
across the world, but delivering a &lt;em&gt;reliable&lt;/em&gt; experience on the web for all of
your users can be challenging. It can be a challenge just to understand what
reliability means.&lt;/p&gt;
&lt;h2 id=&quot;reliable-while-offline&quot;&gt;Reliable while offline &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/network-connections-unreliable/#reliable-while-offline&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One way of thinking about reliability is whether your web app will work without
a network connection. This is a type of reliability that users take for granted
with platform-specific apps installed on a mobile device from an app store. When you see
an icon for one of these apps, you expect to be able to tap on it and open up some
sort of experience, regardless of whether you&#39;re currently connected to the
Internet.&lt;/p&gt;
&lt;p&gt;Until recently, it&#39;s been a challenge to build web applications that are
reliable without a network connection.&lt;/p&gt;
&lt;h2 id=&quot;reliably-fast&quot;&gt;Reliably fast &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/network-connections-unreliable/#reliably-fast&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another way of thinking about reliability is whether your users can rely on your
web app loading at a fast enough speed when they have a network connection that
might be less than ideal. Will returning users have the same experience
interacting with your web app when they&#39;re on a cellular connection as they do
when they&#39;re on wi-fi? And what about users who have a high-latency, or
&amp;quot;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi&quot; rel=&quot;noopener&quot;&gt;lie-fi&lt;/a&gt;&amp;quot;
connection. Will your web app be reliably fast even in those scenarios?&lt;/p&gt;
&lt;p&gt;It&#39;s not enough to  be fast under the best circumstances. Your users will view
your web app&#39;s performance through the lens of how it behaves in all network
conditions.&lt;/p&gt;
&lt;h2 id=&quot;reliable-is-achievable&quot;&gt;Reliable is achievable &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/network-connections-unreliable/#reliable-is-achievable&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The good news is that the modern web platform provides technologies—such as
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot; rel=&quot;noopener&quot;&gt;service workers&lt;/a&gt; and the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage&quot; rel=&quot;noopener&quot;&gt;Cache Storage API&lt;/a&gt;—that
can serve as the building blocks for creating reliable web applications. They
allow you to write code which sits between your web app and the network. In
many cases, you can bypass the network entirely, and instead use previously
cached content to fulfill your web app&#39;s requests.&lt;/p&gt;
&lt;h2 id=&quot;your-guiding-light:-responds-with-a-200-ok-while-offline&quot;&gt;Your guiding light: Responds with a 200 OK while offline &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/network-connections-unreliable/#your-guiding-light:-responds-with-a-200-ok-while-offline&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once you start building out a service worker and serving content from caches,
it&#39;s hard to know if you&#39;re doing it effectively. How do you know that the
service worker you implement really does help your web app avoid the network?
How do you prevent a small change to your caching strategy from breaking your
carefully crafted offline experience?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot; rel=&quot;noopener&quot;&gt;Lighthouse&lt;/a&gt; provides one
specific test that is of particular interest when building a reliable web app:
&lt;strong&gt;Responds with a 200 OK while offline&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Lighthouse&amp;#x27;s progressive web app report showing a passing responds with a 200 when offline audit.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;253&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5bc5TNicZiBgDdWkgAXg.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The actual interface may differ depending on which version of Lighthouse
you&#39;re running.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;What&#39;s actually being tested here? It boils down to simulating a loss of network
connectivity within your browser, followed by an attempt to load whichever URL
on your site is being audited. This tests one aspect of building a reliable
site—being &lt;em&gt;reliable while offline&lt;/em&gt;—using a controlled, repeatable sequence of
actions.&lt;/p&gt;
&lt;h2 id=&quot;it&#39;s-a-journey&quot;&gt;It&#39;s a journey &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/network-connections-unreliable/#it&#39;s-a-journey&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&#39;re just starting out, then there&#39;s a very good chance that you&#39;ll get
back a negative result for the Responds with a 200 while offline check. That&#39;s
okay!  Unless you&#39;re using a customized starter project, web applications don&#39;t
have that type of reliability by default. The next few guides will introduce the
techniques you need to identify what your web app is loading, and teach you how
to use Lighthouse to make that loading experience reliable.&lt;/p&gt;
&lt;p&gt;Throughout this process, you&#39;re encouraged to keep re-running the Lighthouse
audits. They serve as a guiding light throughout your journey, starting with a new
web application and ending with a reliable progressive web app.&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Handling range requests in a service worker</title>
    <link href="https://web.dev/sw-range-requests/"/>
    <updated>2020-10-06T00:00:00Z</updated>
    <id>https://web.dev/sw-range-requests/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Some HTTP requests contain a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Range:&lt;/code&gt; header&lt;/a&gt;, indicating that only a portion of the full resource should be returned. They&#39;re commonly used for streaming audio or video content to allow smaller chunks of media to be loaded on demand, instead of requesting the entirety of the remote file all at once.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers&quot; rel=&quot;noopener&quot;&gt;service worker&lt;/a&gt; is JavaScript code that sits in between your web app and the network, potentially intercepting outgoing network requests and generating responses for them.&lt;/p&gt;
&lt;p&gt;Historically, range requests and service workers haven&#39;t played nicely together. It&#39;s been necessary to take special steps to avoid bad outcomes in your service worker. Fortunately, this is starting to change. In browsers exhibiting the correct behavior, range requests will &amp;quot;just work&amp;quot; when passing through a service worker.&lt;/p&gt;
&lt;h2 id=&quot;what&#39;s-the-issue&quot;&gt;What&#39;s the issue? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/sw-range-requests/#what&#39;s-the-issue&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Consider a service worker with the following &lt;code&gt;fetch&lt;/code&gt; event listener, which takes every incoming request and passes it to the network:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The Range: header will not pass through in&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// browsers that behave incorrectly.&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This sort of trivial &lt;code&gt;fetch&lt;/code&gt; event listener should &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#never_use_a_passthrough_fetch_handler&quot; rel=&quot;noopener&quot;&gt;normally be avoided&lt;/a&gt;; it&#39;s used here for illustrative purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In browsers with the incorrect behavior, if &lt;code&gt;event.request&lt;/code&gt; included a &lt;code&gt;Range:&lt;/code&gt; header, that header would be silently dropped. The request that was received by the remote server would not include &lt;code&gt;Range:&lt;/code&gt; at all. This would not necessarily &amp;quot;break&amp;quot; anything, since a server is &lt;em&gt;technically&lt;/em&gt; allowed to return the full response body, with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;200&lt;/code&gt; status code&lt;/a&gt;, even when a &lt;code&gt;Range:&lt;/code&gt; header is present in the original request. But it would result in more data being transferred than is strictly needed from the perspective of the browser.&lt;/p&gt;
&lt;p&gt;Developers who were aware of this behavior could work around it by explicitly checking for the presence of a &lt;code&gt;Range:&lt;/code&gt; header, and not calling &lt;code&gt;event.respondWith()&lt;/code&gt; if one is present. By doing this, the service worker effectively removes itself from the response generation picture, and the default browser networking logic, which knows how to preserve range requests, is used instead.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Return without calling event.respondWith()&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// if this is a range request.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;range&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;It&#39;s safe to say that most developers were not aware of the need to do this, though. And it wasn&#39;t clear &lt;em&gt;why&lt;/em&gt; that should be required. Ultimately, this limitation was due to &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=847428&quot; rel=&quot;noopener&quot;&gt;browsers&lt;/a&gt; needing to catch up to &lt;a href=&quot;https://github.com/whatwg/fetch/pull/560&quot; rel=&quot;noopener&quot;&gt;changes in the underlying specification&lt;/a&gt;, which added support for this functionality.&lt;/p&gt;
&lt;h2 id=&quot;what&#39;s-been-fixed&quot;&gt;What&#39;s been fixed? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/sw-range-requests/#what&#39;s-been-fixed&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Browsers that behave correctly preserve the &lt;code&gt;Range:&lt;/code&gt; header when &lt;code&gt;event.request&lt;/code&gt; is passed to &lt;code&gt;fetch()&lt;/code&gt;. This means the service worker code in my initial example will allow the remote server to see the &lt;code&gt;Range:&lt;/code&gt; header, if it was set by the browser:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The Range: header will pass through in browsers&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// that behave correctly.&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The server now gets a chance to properly handle the range request and return a partial response with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;206&lt;/code&gt; status code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;which-browsers-behave-correctly&quot;&gt;Which browsers behave correctly? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/sw-range-requests/#which-browsers-behave-correctly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recent versions of Safari have the &lt;a href=&quot;https://trac.webkit.org/changeset/252047/webkit&quot; rel=&quot;noopener&quot;&gt;correct functionality&lt;/a&gt;. Chrome and Edge, starting with &lt;a href=&quot;https://chromestatus.com/feature/5648276147666944&quot; rel=&quot;noopener&quot;&gt;version 87&lt;/a&gt;, behave correctly as well.&lt;/p&gt;
&lt;p&gt;As of this October 2020, Firefox has not yet fixed this behavior, so you may still need to account for it while deploying your service worker&#39;s code to production.&lt;/p&gt;
&lt;p&gt;Checking the &amp;quot;Include range header in network request&amp;quot; row of the &lt;a href=&quot;https://wpt.fyi/results/fetch/range/sw.https.window.html?label=master&amp;amp;label=experimental&amp;amp;aligned&quot; rel=&quot;noopener&quot;&gt;Web Platform Tests dashboard&lt;/a&gt; is the best way to confirm whether or not a given browser has corrected this behavior.&lt;/p&gt;
&lt;h2 id=&quot;what-about-serving-range-requests-from-the-cache&quot;&gt;What about serving range requests from the cache? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/sw-range-requests/#what-about-serving-range-requests-from-the-cache&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Service workers can do much more than just pass a request through to the network. A common use case is to add resources, like audio and video files, to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage&quot; rel=&quot;noopener&quot;&gt;local cache&lt;/a&gt;. A service worker can then fulfill requests from that cache, bypassing the network entirely.&lt;/p&gt;
&lt;p&gt;All browsers, including Firefox, support inspecting a request inside a &lt;code&gt;fetch&lt;/code&gt; handler, checking for the presence of the &lt;code&gt;Range:&lt;/code&gt; header, and then locally fulfilling the request with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;206&lt;/code&gt; response&lt;/a&gt; that comes from a cache. The service worker code to properly parse the &lt;code&gt;Range:&lt;/code&gt; header and return only the appropriate segment of the complete cached response is not trivial, though.&lt;/p&gt;
&lt;p&gt;Fortunately, developers who want some help can turn to &lt;a href=&quot;https://developers.google.com/web/tools/workbox/&quot; rel=&quot;noopener&quot;&gt;Workbox&lt;/a&gt;, which is a set of libraries that simplifies common service worker use cases. The &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-range-requests&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;workbox-range-request module&lt;/code&gt;&lt;/a&gt; implements all the logic necessary to serve partial responses directly from the cache. A full recipe for this use case can be found &lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/advanced-recipes#cached-av&quot; rel=&quot;noopener&quot;&gt;in the Workbox documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The hero image on this post is by &lt;a href=&quot;https://unsplash.com/photos/OnAwTs0tu3k&quot; rel=&quot;noopener&quot;&gt;Natalie Rhea Riggs&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Adaptive loading with service workers</title>
    <link href="https://web.dev/adaptive-loading-with-service-workers/"/>
    <updated>2020-06-23T00:00:00Z</updated>
    <id>https://web.dev/adaptive-loading-with-service-workers/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;fhqCwDP69PI&quot; videoStartAt=&quot;161&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;Users access websites through a wide variety of devices and network connections. Even in major cities, where mobile networks are fast and reliable, one can end up experiencing slower load times, for example, when commuting in the subway, in a car, or just when moving around.
In regions like emerging markets, this phenomenon is even more common, not only due to unreliable networks, but also because devices tend to have less memory and CPU processing power.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/adaptive-loading-cds-2019/&quot;&gt;Adaptive loading&lt;/a&gt; is a web performance pattern that lets you adapt your site based on the user&#39;s network and device conditions.&lt;/p&gt;
&lt;p&gt;The adaptive loading pattern is made possible by &lt;a href=&quot;https://web.dev/service-workers-cache-storage/&quot;&gt;service workers&lt;/a&gt;, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt;, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency&quot; rel=&quot;noopener&quot;&gt;Hardware Concurrency API&lt;/a&gt;, and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory&quot; rel=&quot;noopener&quot;&gt;Device Memory API&lt;/a&gt;. In this guide we explore how you can use service workers and the Network Information API to achieve an adaptive loading strategy.&lt;/p&gt;
&lt;h2 id=&quot;production-case&quot;&gt;Production case &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/adaptive-loading-with-service-workers/#production-case&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.terra.com.br/&quot; rel=&quot;noopener&quot;&gt;Terra&lt;/a&gt; is one of the biggest media companies in Brazil. It has a large user base, coming from a wide variety of devices and networks.&lt;/p&gt;
&lt;p&gt;To provide a more reliable experience to all their users, Terra combines service workers and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt; to deliver lower quality images to users on 2G or 3G connections.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of Terra&amp;#x27;s home page connected to different image qualities according to the connection type.&quot; decoding=&quot;async&quot; height=&quot;381&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 734px) 734px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=1468 1468w&quot; width=&quot;734&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The company also found that the scripts and assets (like banners) loaded by ad networks were especially detrimental to users navigating in 3G or slower connections.&lt;/p&gt;
&lt;p&gt;As is the case with many publishers, Terra serves &lt;a href=&quot;https://amp.dev/&quot; rel=&quot;noopener&quot;&gt;AMP&lt;/a&gt; versions of their pages to users coming from search engines and other link sharing platforms. AMP pages are usually lightweight and help mitigate the impact of ads in performance by deprioritizing their load with respect to the main content of the page.&lt;/p&gt;
&lt;p&gt;Taking that into consideration, Terra decided to start serving AMP versions of their pages not only to users coming from search engines, but also to those navigating their site in 3G connections or slower.&lt;/p&gt;
&lt;p&gt;To achieve that, they use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt; in the service worker to detect if the request comes from 3G or slower. If that&#39;s the case, they change the URL of the page to request the AMP version of the page instead.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of Terra&amp;#x27;s article page connected to different image qualities according to the connection type.&quot; decoding=&quot;async&quot; height=&quot;379&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 741px) 741px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=1482 1482w&quot; width=&quot;741&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Thanks to this technique, they send &lt;strong&gt;70% less bytes&lt;/strong&gt; to users on slower connections. The &lt;strong&gt;time spent&lt;/strong&gt; in AMP pages is higher for 3G users and ads in AMP pages have a better &lt;strong&gt;CTR (click-through-rate)&lt;/strong&gt; for that group.&lt;/p&gt;
&lt;h2 id=&quot;implement-adaptive-loading-with-workbox&quot;&gt;Implement adaptive loading with Workbox &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/adaptive-loading-with-service-workers/#implement-adaptive-loading-with-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section we&#39;ll explore how &lt;a href=&quot;https://web.dev/workbox/&quot;&gt;Workbox&lt;/a&gt; can be used to implement adaptive loading strategies.&lt;/p&gt;
&lt;p&gt;Workbox provides several &lt;a href=&quot;https://web.dev/runtime-caching-with-workbox/&quot;&gt;runtime caching strategies&lt;/a&gt; out of the box. They are used to indicate how the service worker generates a response after receiving a &lt;code&gt;fetch&lt;/code&gt; event.&lt;/p&gt;
&lt;p&gt;For example, in a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#cache_first_cache_falling_back_to_network&quot; rel=&quot;noopener&quot;&gt;Cache First&lt;/a&gt; strategy the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; will be fulfilled using the cached response (if available). If there isn&#39;t a cached response, the &lt;code&gt;Request&lt;/code&gt; will be fulfilled by a network request and the response will be cached.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;registerRoute&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-routing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;CacheFirst&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-strategies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/img/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CacheFirst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Caching strategies can be customized with &lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/using-plugins&quot; rel=&quot;noopener&quot;&gt;Workbox plugins&lt;/a&gt;. These allow you to add additional behaviors by manipulating requests and responses during the lifecycle of a request. Workbox has several built-in plugins for common cases and APIs, but you can also define a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/using-plugins#custom_plugins&quot; rel=&quot;noopener&quot;&gt;custom plugin&lt;/a&gt;, and introduce some custom logic of your choice.&lt;/p&gt;
&lt;p&gt;To achieve adapting loading, define a custom plugin, called, for example, &lt;code&gt;adaptiveLoadingPlugin&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; adaptiveLoadingPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;requestWillFetch&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; urlParts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; imageQuality&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      navigator &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;effectiveType&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3g&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        imageQuality &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;q_30&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; urlParts&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;urlParts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; imageQuality&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newRequest &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newUrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newRequest&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The previous code does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implements a &lt;code&gt;requestWillFetch()&lt;/code&gt; callback: This is called whenever a network request is about to be made, so you can alter the &lt;code&gt;Request&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Checks the connection type, by using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt;. Based on the status of the network, it creates a new URL part, indicating the quality of the image to fetch (e.g. &lt;code&gt;q_30&lt;/code&gt; for 3G users).&lt;/li&gt;
&lt;li&gt;Creates a new URL based on the dynamic &lt;code&gt;newPart&lt;/code&gt; value, and returns the new &lt;code&gt;Request&lt;/code&gt; to be made, based on that URL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, pass the plugin to a &lt;code&gt;cacheFirst&lt;/code&gt; strategy containing a regular expression to match image URLs (e.g. &lt;code&gt;/img/&lt;/code&gt;):&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;routing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/img/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cacheFirst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;images&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      adaptiveLoadingPlugin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expiration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        maxEntries&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        purgeOnQuotaError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;As a result, when requests for images are intercepted, the runtime caching strategy will try to fulfill the request from the cache. If it&#39;s not available, it will run the logic in the plugin, to decide which image quality to fetch from the network.&lt;/p&gt;
&lt;p&gt;Finally the response will be persisted in the cache, and sent back to the page.&lt;/p&gt;
&lt;h2 id=&quot;cloudinary-workbox-plugin&quot;&gt;Cloudinary Workbox Plugin &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/adaptive-loading-with-service-workers/#cloudinary-workbox-plugin&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cloudinary, a video and image hosting service, has a &lt;a href=&quot;https://www.npmjs.com/package/cloudinary-workbox-plugin&quot; rel=&quot;noopener&quot;&gt;Workbox Plugin&lt;/a&gt; that encapsulates the functionality explained in the previous section, making it even easier to implement.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Cloudinary and Workbox logos.&quot; decoding=&quot;async&quot; height=&quot;269&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 637px) 637px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=1274 1274w&quot; width=&quot;637&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The plugin is designed to work with the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin&quot; rel=&quot;noopener&quot;&gt;Workbox webpack plugin&lt;/a&gt;. To implement it, use the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-webpack-plugin.GenerateSW&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;GenerateSW()&lt;/code&gt;&lt;/a&gt; class:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workboxPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GenerateSW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  swDest&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sw.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  importScripts&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./cloudinaryPlugin.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  runtimeCaching&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      urlPattern&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;^https://res.cloudinary.com/.*/image/upload/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      handler&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CacheFirst&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cloudinary-images&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function-variable function&quot;&gt;requestWillFetch&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;              cloudinaryPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestWillFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The previous code does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses the &lt;code&gt;GenerateSW()&lt;/code&gt; class to configure webpack to generate a service worker in the destination indicated in &lt;code&gt;swDest&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Imports the cloudinary plugin script.&lt;/li&gt;
&lt;li&gt;Defines a Cache First runtime caching strategy for requests for images to the Cloudinary CDN.&lt;/li&gt;
&lt;li&gt;Passes the &lt;a href=&quot;https://www.npmjs.com/package/cloudinary-workbox-plugin&quot; rel=&quot;noopener&quot;&gt;Cloudinary Workbox Plugin&lt;/a&gt; to adjust the image quality according to the network conditions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;explore-more-adaptive-loading-strategies&quot;&gt;Explore more adaptive loading strategies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/adaptive-loading-with-service-workers/#explore-more-adaptive-loading-strategies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can go beyond this, by mapping device signals, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency&quot; rel=&quot;noopener&quot;&gt;hardware concurrency&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory&quot; rel=&quot;noopener&quot;&gt;device memory&lt;/a&gt; to device categories and then serving different assets depending on the device type (low-, mid- or high-end).&lt;/p&gt;
</content>
    <author>
      <name>Demian Renzulli</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>App shell UX with service workers and streams</title>
    <link href="https://web.dev/app-shell-ux-with-service-workers/"/>
    <updated>2020-06-23T00:00:00Z</updated>
    <id>https://web.dev/app-shell-ux-with-service-workers/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;fhqCwDP69PI&quot; videoStartAt=&quot;438&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot; rel=&quot;noopener&quot;&gt;Single-page app (SPA)&lt;/a&gt; is an architectural pattern in which the browser runs JavaScript code to update the existing page when the user visits a different section of the site, as opposed to loading an entire new page.&lt;/p&gt;
&lt;p&gt;This means that the web app doesn&#39;t perform an actual page reload. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot; rel=&quot;noopener&quot;&gt;History API&lt;/a&gt; is used instead to navigate back and forth through the user&#39;s history and manipulate the contents of the history stack.&lt;/p&gt;
&lt;p&gt;Using this type of architecture can provide an &lt;a href=&quot;https://developers.google.com/web/fundamentals/architecture/app-shell&quot; rel=&quot;noopener&quot;&gt;app shell UX&lt;/a&gt; that&#39;s fast, reliable, and usually consumes less data when navigating.&lt;/p&gt;
&lt;p&gt;In multi-page apps (MPAs) each time a user navigates to a new URL, the browser progressively renders HTML specific to that page. This means a full page refresh every time you visit a new page.&lt;/p&gt;
&lt;p&gt;While both are equally valid models to use, you might want to bring some of the benefits of the app shell UX of SPAs to your existing MPA site.
In this article we&#39;ll analyze how you can achieve an SPA-like architecture in multi-page apps by combining partials, service workers, and streams.&lt;/p&gt;
&lt;h2 id=&quot;production-case&quot;&gt;Production case &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#production-case&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/&quot; rel=&quot;noopener&quot;&gt;DEV&lt;/a&gt; is a community where software developers write articles, take part in discussions, and build their professional profiles.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of https://dev.to&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;482&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Their architecture is a multi-page app based on traditional backend templating through Ruby on Rails. Their team was interested in some of the benefits of an app shell model, but didn&#39;t want to undertake a major architectural change or move away from their original tech stack.&lt;/p&gt;
&lt;p&gt;Here&#39;s how their solution works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, they create partials of their home page for the header and the footer (&lt;code&gt;shell_top.html&lt;/code&gt; and &lt;code&gt;shell_bottom.html&lt;/code&gt;) and deliver them as standalone HTML snippets with an endpoint. These assets are added to the cache at the service worker &lt;code&gt;install&lt;/code&gt; event (what&#39;s commonly referred to as &lt;a href=&quot;https://web.dev/precache-with-workbox/&quot;&gt;precaching&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;When a navigation request is intercepted by the service worker, they create a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream&quot; rel=&quot;noopener&quot;&gt;streamed response&lt;/a&gt; by combining the cached header and footer with the main page content that just came from the server. The body is the only actual part of the page that requires fetching data from the network.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Dev&amp;#x27;s architecture consisting on static headers and footers that are cached and a body requested from the network.&quot; decoding=&quot;async&quot; height=&quot;363&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The key element of this solution is the usage of &lt;a href=&quot;https://developers.google.com/web/updates/2016/06/sw-readablestreams&quot; rel=&quot;noopener&quot;&gt;streams&lt;/a&gt;, which enables &lt;a href=&quot;https://streams.spec.whatwg.org/#intro&quot; rel=&quot;noopener&quot;&gt;incremental creations and updates&lt;/a&gt; of data sources. The Streams API also provides an interface for reading or writing asynchronous chunks of data, only a subset of which might be available in memory at any given time.
This way, the header of the page can be rendered as soon as it&#39;s picked from the cache, while the rest of the content is being fetched from the network. As a result, the navigation experience is so fast that users don&#39;t perceive an actual page refresh, only the new content (the body) being updated.&lt;/p&gt;
&lt;p&gt;The resulting UX is similar to the app shell UX pattern of SPAs, implemented on a MPA site.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The previous section contains a quick summary of DEV&#39;s solution. For a more detailed explanation check out their &lt;a href=&quot;https://dev.to/devteam/instant-webpages-and-terabytes-of-data-savings-through-the-magic-of-service-workers-1mkc&quot; rel=&quot;noopener&quot;&gt;blog post&lt;/a&gt; on this topic.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;implement-an-app-shell-ux-architecture-in-mpas-with-workbox&quot;&gt;Implement an app shell UX architecture in MPAs with Workbox &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#implement-an-app-shell-ux-architecture-in-mpas-with-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section we&#39;ll cover a summary of the different parts involved in implementing an app shell UX architecture in MPAs.
For a more detailed post on how to implement this on a real site, check out &lt;a href=&quot;https://developers.google.com/web/updates/2018/05/beyond-spa&quot; rel=&quot;noopener&quot;&gt;Beyond SPAs: alternative architectures for your PWA&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-server&quot;&gt;The server &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#the-server&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;partials&quot;&gt;Partials &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#partials&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first step is to adopt a site structure based on HTML partials. These are just modular pieces of your pages that can be reused across your site and also delivered as standalone HTML snippets.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;head partial&lt;/strong&gt; can contain all the logic needed to style and render the header of the page. The &lt;strong&gt;navbar partial&lt;/strong&gt; can contain the logic for the navigation bar, the &lt;strong&gt;footer partial&lt;/strong&gt; the code that needs to execute there, and so forth.&lt;/p&gt;
&lt;p&gt;The first time the user visits the site, your server generates a response by assembling the different parts of the page:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;routes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headPartial &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; navbarPartial&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tag &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEFAULT_TAG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;requestData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;templates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;footPartial&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;By using the &lt;code&gt;res&lt;/code&gt; (response) object&#39;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_response_write_chunk_encoding_callback&quot; rel=&quot;noopener&quot;&gt;write() method&lt;/a&gt;, and referencing locally stored partial templates, the response can be &lt;a href=&quot;https://github.com/substack/stream-handbook&quot; rel=&quot;noopener&quot;&gt;streamed&lt;/a&gt; immediately, without getting blocked by any external data source. The browser takes this initial HTML and renders a meaningful interface and loading message right away.&lt;/p&gt;
&lt;p&gt;The next portion of the page uses API data, which involves a network request. The web app can&#39;t render anything else until it gets a response back and processes it, but at least users aren&#39;t staring at a blank screen while they wait.&lt;/p&gt;
&lt;h3 id=&quot;the-service-worker&quot;&gt;The service worker &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#the-service-worker&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first time a user visits a site, the header of the page will be rendered faster, without having to wait for the body of the page. The browser still needs to go to the network to fetch the rest of the page.&lt;/p&gt;
&lt;p&gt;After the first page load, the service worker is registered, allowing you to fetch the partials for the different static parts of the page (header, navbar, footer, etc.) from the cache.&lt;/p&gt;
&lt;h4 id=&quot;precaching-static-assets&quot;&gt;Precaching static assets &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#precaching-static-assets&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first step is to cache the partial HTML templates, so they are immediately available.
With &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-precaching&quot; rel=&quot;noopener&quot;&gt;Workbox precaching&lt;/a&gt; you can store these files at the &lt;code&gt;install&lt;/code&gt; event of the service worker and keep them up to date when changes are deployed to the web app.&lt;/p&gt;
&lt;p&gt;Depending on the build process, Workbox has different solutions to generate a service worker and indicate the list of files to precache, including &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin&quot; rel=&quot;noopener&quot;&gt;webpack&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/codelabs/gulp&quot; rel=&quot;noopener&quot;&gt;gulp&lt;/a&gt; plugins, a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-build&quot; rel=&quot;noopener&quot;&gt;generic node module&lt;/a&gt; and a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-cli&quot; rel=&quot;noopener&quot;&gt;command line interface&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a partials configuration like the one described earlier, the resulting service worker file should contain something similar to the following:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;precaching&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;precacheAndRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;partials/about.html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    revision&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;518747aad9d7e&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;partials/foot.html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    revision&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;69bf746a9ecc6&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// etc.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;streaming&quot;&gt;Streaming &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#streaming&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Next, add the service worker logic so that the precached partial HTML can be sent back to the web app immediately. This is a crucial part of being reliably fast. Using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Streams_API&quot; rel=&quot;noopener&quot;&gt;Streams API&lt;/a&gt; within our service worker makes that possible.
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-streams&quot; rel=&quot;noopener&quot;&gt;Workbox Streams&lt;/a&gt; abstracts the details of how streaming works. The package lets you pass to the library a mix of streaming sources, both from caches and runtime data that might come from the network. Workbox takes care of coordinating the individual sources and stitching them together into a single, streaming response.&lt;/p&gt;
&lt;p&gt;First, set up the strategies in Workbox to handle the different sources that will make up the streaming response.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cacheStrategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cacheFirst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;core&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cacheNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;precache&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; apiStrategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;staleWhileRevalidate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_CACHE_NAME&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expiration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;maxEntries&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The first strategy reads data that&#39;s been precached, like the partial HTML templates.&lt;/li&gt;
&lt;li&gt;The second strategy implements the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#stale-while-revalidate&quot; rel=&quot;noopener&quot;&gt;stale-while-revalidate&lt;/a&gt; caching logic, along with &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-expiration#restrict_the_number_of_cache_entries&quot; rel=&quot;noopener&quot;&gt;least-recently-used cache expiration&lt;/a&gt; logic once we reach 50 entries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, tell Workbox how to use the strategies to construct a complete, streaming response, by passing in an array of sources as functions to execute immediately:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;streams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; cacheStrategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      request&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCacheKeyForURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/head.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; cacheStrategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      request&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCacheKeyForURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/navbar.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchParams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;tag&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEFAULT_TAG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; listResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; apiStrategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; listResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; templates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; cacheStrategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      request&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCacheKeyForURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/foot.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The first two sources are precached partial templates read directly from the service worker&#39;s cache, so they&#39;ll always be available immediately.&lt;/li&gt;
&lt;li&gt;The next source function fetches data from the network, and processes the response into the HTML that the web app expects.&lt;/li&gt;
&lt;li&gt;Finally, a cached copy of the footer and closing HTML tags is streamed to complete the response.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Workbox takes the result from each source and streams it to the web app, in sequence, only delaying if the next function in the array hasn&#39;t completed yet.
As a result, the user immediately sees the page being painted. The experience is so fast that when navigating the header stays in its position without making the user perceive the full page refresh. This is very similar to the UX that the app shell SPA model provides.&lt;/p&gt;
</content>
    <author>
      <name>Demian Renzulli</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Instant navigation experiences</title>
    <link href="https://web.dev/instant-navigation-experiences/"/>
    <updated>2020-06-23T00:00:00Z</updated>
    <id>https://web.dev/instant-navigation-experiences/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;fhqCwDP69PI&quot; videoStartAt=&quot;285&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;Performing a task on a site commonly involves several steps. For example, purchasing a product in an e-commerce website might involve searching for a product, picking an item from the list of results, adding the item to the cart, and completing the operation by checking out.&lt;/p&gt;
&lt;p&gt;In technical terms, moving through different pages means making a &lt;strong&gt;navigation request&lt;/strong&gt;. As a general rule, you &lt;strong&gt;don&#39;t&lt;/strong&gt; want to use long-lived &lt;code&gt;Cache-Control&lt;/code&gt; headers to cache the HTML response for a navigation request. They should normally be satisfied via the network, with &lt;code&gt;Cache-Control: no-cache&lt;/code&gt;, to ensure that the HTML, along with the chain of subsequent network requests, is (reasonably) fresh.
Having to go against the network each time the user navigates to a new page unfortunately means that each navigation might be slow—at the very least, it means that it won&#39;t be &lt;em&gt;reliably&lt;/em&gt; fast.&lt;/p&gt;
&lt;p&gt;To speed up these requests, if you can anticipate the user&#39;s action, you can request these pages and assets beforehand and keep them in the cache for a short period of time until the user clicks on these links. This technique is called &lt;a href=&quot;https://web.dev/link-prefetch/&quot;&gt;prefetching&lt;/a&gt; and it&#39;s commonly implemented by adding &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tags to pages, indicating the resource to prefetch.&lt;/p&gt;
&lt;p&gt;In this guide we&#39;ll explore different ways in which &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot; rel=&quot;noopener&quot;&gt;service workers&lt;/a&gt; can be used as a complement of traditional prefetching techniques.&lt;/p&gt;
&lt;h2 id=&quot;production-cases&quot;&gt;Production cases &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#production-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mercadolibre.com.ar/&quot; rel=&quot;noopener&quot;&gt;MercadoLibre&lt;/a&gt; is the biggest e-commerce site in Latin America. To speed up navigations, they dynamically inject &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tags in some parts of the flow. For example, in listing pages, they fetch the next result page as soon as the user scrolls to the bottom of the listing:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of MercadoLibre&amp;#x27;s listing pages one and two and a Link Prefetch tag connecting both.&quot; decoding=&quot;async&quot; height=&quot;397&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 682px) 682px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=1364 1364w&quot; width=&quot;682&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Prefetched files are requested at the &amp;quot;Lowest&amp;quot; priority and stored in the &lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;HTTP cache&lt;/a&gt; or the &lt;a href=&quot;https://calendar.perfplanet.com/2016/a-tale-of-four-caches/&quot; rel=&quot;noopener&quot;&gt;memory cache&lt;/a&gt; (depending on whether the resource is cacheable or not), for an amount of time that varies by browsers. For example, as of Chrome 85, this value is 5 minutes. Resources are kept around for five minutes, after which the normal &lt;code&gt;Cache-Control&lt;/code&gt; rules for the resource apply.&lt;/p&gt;
&lt;p&gt;Using service worker caching can help you extend the lifetime of prefetch resources beyond the five-minute window.&lt;/p&gt;
&lt;p&gt;For example, Italian sports portal &lt;a href=&quot;https://sport.virgilio.it/&quot; rel=&quot;noopener&quot;&gt;Virgilio Sport&lt;/a&gt; uses service workers to prefetch the most popular posts in their home page. They also use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt; to avoid prefetching for users that are on a 2G connection.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Virgilio Sport logo.&quot; decoding=&quot;async&quot; height=&quot;100&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 340px) 340px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=680 680w&quot; width=&quot;340&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;As a result of this, over 3 weeks of observation Virgilio Sport witnessed load times for navigation to articles improve &lt;strong&gt;78%&lt;/strong&gt;, and the number of article impressions increase &lt;strong&gt;45%&lt;/strong&gt;.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of Virgilio Sport home and article pages, with impact metrics after prefetching.&quot; decoding=&quot;async&quot; height=&quot;442&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 536px) 536px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=1072 1072w&quot; width=&quot;536&quot; /&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;implement-precaching-with-workbox&quot;&gt;Implement precaching with Workbox &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#implement-precaching-with-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the following section we&#39;ll use &lt;a href=&quot;https://web.dev/workbox/&quot;&gt;Workbox&lt;/a&gt; to show how to implement different caching techniques in the service worker that can be used as a complement to &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt;, or even a replacement for it, by delegating this task completely to the service worker.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--caution&quot;&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;:  You must take steps to ensure that adding a service worker to your site doesn&#39;t end up actually slowing down your navigations. Starting up the service worker without using it to respond to a navigation request will introduce a small amount of latency (as explained in &lt;a href=&quot;https://www.youtube.com/watch?v=25aCD5XL1Jk&quot; rel=&quot;noopener&quot;&gt;Building Faster, More Resilient Apps with Service Workers&lt;/a&gt;). You can mitigate this overhead by enabling a feature called &lt;a href=&quot;https://developers.google.com/web/updates/2017/02/navigation-preload&quot; rel=&quot;noopener&quot;&gt;navigation preload&lt;/a&gt;, and then using the &lt;a href=&quot;https://developers.google.com/web/updates/2017/02/navigation-preload#using_the_preloaded_response&quot; rel=&quot;noopener&quot;&gt;network response&lt;/a&gt; that&#39;s been preloaded inside of your fetch event handler.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;1.-precache-static-pages-and-page-subresources&quot;&gt;1. Precache static pages and page subresources &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#1.-precache-static-pages-and-page-subresources&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/precache-with-workbox/&quot;&gt;Precaching&lt;/a&gt; is the ability of the service worker to save files to the cache while it&#39;s installing.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Precaching sounds similar to prefetching, but it&#39;s a different technique. In the first one, the service worker fetches and stores resources (typically static files) while it&#39;s installing and keeps them in the cache until a new version of the file is available. In the second, resources are requested ahead of time to have it in the cache for brief periods of time in order to speed up subsequent navigations.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the following cases precaching is used to achieve a similar goal as prefetching: making navigations faster.&lt;/p&gt;
&lt;h4 id=&quot;precaching-static-pages&quot;&gt;Precaching static pages &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#precaching-static-pages&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For pages that are generated at build time (e.g. &lt;code&gt;about.html&lt;/code&gt;, &lt;code&gt;contact.html&lt;/code&gt;), or in completely static sites, one can just add the site&#39;s documents to the precache list, so they are already available in the cache every time the user accesses them:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;precaching&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;precacheAndRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/about.html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; revision&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;abcd1234&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// ... other entries ...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;precaching-page-subresources&quot;&gt;Precaching page subresources &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#precaching-page-subresources&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Precaching static assets that the different sections of the site might use (e.g. JavaScript, CSS, etc.), is a general best practice and can give an extra boost in prefetching scenarios.&lt;/p&gt;
&lt;p&gt;To speed up navigations in an e-commerce site, you can use  &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tags in listing pages to prefetch product detail pages for the first few products of a listing page. If you have already precached the product page subresources, this can make the navigation even faster.&lt;/p&gt;
&lt;p&gt;To implement this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tag to the page:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;prefetch&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/phones/smartphone-5x.html&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Add the page subresources to the precache list in the service worker:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;precaching&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;precacheAndRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;/styles/product-page.ac29.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// ... other entries ...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;2.-extend-the-lifetime-of-prefetch-resources&quot;&gt;2. Extend the lifetime of prefetch resources &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#2.-extend-the-lifetime-of-prefetch-resources&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned earlier, &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; fetches and keeps resources in the HTTP cache for a limited amount of time, after which point the &lt;code&gt;Cache-Control&lt;/code&gt; rules for a resource apply. As of Chrome 85, this value is 5 minutes.&lt;/p&gt;
&lt;p&gt;Service workers allow you to extend the lifetime of the prefetch pages, while providing the added benefit of making those resources available for offline usage.&lt;/p&gt;
&lt;p&gt;In the previous example, one could complement the &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; used to prefetch a product page with a &lt;a href=&quot;https://web.dev/runtime-caching-with-workbox/&quot;&gt;Workbox runtime caching strategy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To implement that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tag to the page:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;prefetch&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/phones/smartphone-5x.html&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Implement a runtime caching strategy in the service worker for these types of requests:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StaleWhileRevalidate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;document-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expiration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      maxAgeSeconds&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 30 Days&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;In this case, we have opted to use a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#stale-while-revalidate&quot; rel=&quot;noopener&quot;&gt;stale-while-revalidate strategy&lt;/a&gt;. In this strategy, pages can be requested from both the cache and the network, in parallel. The response comes from the cache if available, otherwise from the network. The cache is always kept up to date with the network response with each successful request.&lt;/p&gt;
&lt;h3 id=&quot;3.-delegate-prefetching-to-the-service-worker&quot;&gt;3. Delegate prefetching to the service worker &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#3.-delegate-prefetching-to-the-service-worker&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In most cases the best approach is to use &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt;. The tag is a &lt;a href=&quot;https://www.w3.org/TR/resource-hints/&quot; rel=&quot;noopener&quot;&gt;resource hint&lt;/a&gt; designed to make prefetching as efficient as possible.&lt;/p&gt;
&lt;p&gt;In some cases, though, it might be better to delegate this task completely to the service worker.
For example: to prefetch the first few products in a client-side rendered product listing page, one might need to inject several &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tags dynamically in the page, based on an API response. This can momentarily consume time on the page&#39;s main thread and make the implementation more difficult.&lt;/p&gt;
&lt;p&gt;In cases like this, use a &amp;quot;page to service worker communication strategy&amp;quot;, to delegate the task of prefetching completely to the service worker. This type of communication can be achieved by using &lt;a href=&quot;https://html.spec.whatwg.org/multipage/workers.html#dom-worker-postmessage&quot; rel=&quot;noopener&quot;&gt;worker.postMessage()&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;An icon of a page making two way communication with a service worker.&quot; decoding=&quot;async&quot; height=&quot;205&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 626px) 626px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=1252 1252w&quot; width=&quot;626&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-window&quot; rel=&quot;noopener&quot;&gt;Workbox Window package&lt;/a&gt; simplifies this type of communication, abstracting many details of the underlying call being done.&lt;/p&gt;
&lt;p&gt;Prefetching with Workbox Window can be implemented in the following way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the page: call the service worker passing it the type of message, and the list of URLs to prefetch:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; wb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Workbox&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/sw.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;wb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prefetchResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; wb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;messageSW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;PREFETCH_URLS&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; urls&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;In the service worker: implement a message handler to issue a &lt;code&gt;fetch()&lt;/code&gt; request for each URL to prefetch:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;PREFETCH_URLS&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Fetch URLs and store them in the cache&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>
    <author>
      <name>Demian Renzulli</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author><author>
      <name>Gilberto Cocchi</name>
    </author>
  </entry>
  
  <entry>
    <title>Resilient search experiences</title>
    <link href="https://web.dev/resilient-search-experiences/"/>
    <updated>2020-06-23T00:00:00Z</updated>
    <id>https://web.dev/resilient-search-experiences/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;fhqCwDP69PI&quot; videoStartAt=&quot;35&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;Even in locations with fast networks a user might lose connection or connect to a flaky network, at some moments of the day.
For example: a user is on the subway searching on the phone for a product on an e-commerce website. They type the product name, click the &amp;quot;search&amp;quot; button, and while waiting for the results, the connection is lost, leading to the standard browser offline page.&lt;/p&gt;
&lt;p&gt;As a result, unless the user decides to come back to the site later, and repeat the same task, the site might lose a potential transaction and customer.&lt;/p&gt;
&lt;p&gt;To provide a more resilient search experience in these cases you can use the &lt;a href=&quot;https://developers.google.com/web/updates/2015/12/background-sync&quot; rel=&quot;noopener&quot;&gt;Background Sync API&lt;/a&gt;, which persists failed queries so they can be retried once the connection is recovered. This technique, in combination with &lt;a href=&quot;https://developers.google.com/web/fundamentals/push-notifications&quot; rel=&quot;noopener&quot;&gt;Web Push Notifications&lt;/a&gt; lets you inform the user of the search results, allowing you to keep them engaged with your service.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--codelab&quot;&gt;
&lt;p&gt;&lt;strong&gt;Try it&lt;/strong&gt;!
Try the &lt;a href=&quot;https://web.dev/codelab-building-resilient-search-experiences&quot;&gt;Building resilient search experiences with Workbox&lt;/a&gt;
for a hands-on demonstration of the ideas explained in this guide.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;production-case&quot;&gt;Production case &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resilient-search-experiences/#production-case&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For concrete application of this technique let&#39;s take a look at Google Search for Chrome in Android.
When visiting the Google Search web app and going offline, instead of showing the standard network error page, the site serves a custom offline response, but allows users to enter their search query immediately.
The page also prompts the user to opt-in for notifications, to receive a link to the search results page once the connection is recovered.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of the background retry interface in Google Search.&quot; decoding=&quot;async&quot; height=&quot;475&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 257px) 257px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=514 514w&quot; width=&quot;257&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;When the user performs a search, the service worker allows the query to be deferred and sent to Google&#39;s servers as soon as the device goes back online by using the &lt;a href=&quot;https://developers.google.com/web/updates/2015/12/background-sync&quot; rel=&quot;noopener&quot;&gt;Background Sync API&lt;/a&gt;, and to inform the user of the result by using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API&quot; rel=&quot;noopener&quot;&gt;Push API&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;A screenshot of the offline flow in Google Search.&quot; decoding=&quot;async&quot; height=&quot;436&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;Service workers allow Google Search to provide a &lt;a href=&quot;https://web.dev/google-search-sw/#meaningful-offline-experience&quot;&gt;meaningful offline experience&lt;/a&gt; and keep the user engaged, letting them complete their task.&lt;/p&gt;
&lt;h2 id=&quot;implement-resilient-search-experiences-with-workbox&quot;&gt;Implement resilient search experiences with Workbox &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resilient-search-experiences/#implement-resilient-search-experiences-with-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While Google Search implements this functionality without using Workbox, the &lt;a href=&quot;https://developers.google.com/web/tools/workbox&quot; rel=&quot;noopener&quot;&gt;Workbox library&lt;/a&gt; makes it easier by providing a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-background-sync&quot; rel=&quot;noopener&quot;&gt;Background Sync module&lt;/a&gt;, which takes care of many implementation details for us.&lt;/p&gt;
&lt;img alt=&quot;A service worker and a cache object communicating with each other.&quot; decoding=&quot;async&quot; height=&quot;383&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;To implement a resilient search experience in Workbox, first, import the following modules in your service worker:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;BackgroundSyncPlugin&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-background-sync&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;registerRoute&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-routing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NetworkOnly&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-strategies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Next, create an instance of the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/v4/workbox.backgroundSync.Plugin&quot; rel=&quot;noopener&quot;&gt;workbox.backgroundSync plugin&lt;/a&gt;, to automatically add failed requests to a queue, so they can be retried later:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bgSyncPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundSync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;offlineQueryQueue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  maxRetentionTime&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;onSync&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shiftRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;offline-search-responses&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; offlineUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;amp;notification=true&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offlineUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;showNotification&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offlineUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unshiftRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The plugin receives the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offlineQueryQueue&lt;/code&gt;: The name of the queue that will be used to persist the failed requests in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API&quot; rel=&quot;noopener&quot;&gt;IndexedDB&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxRetentionTime&lt;/code&gt;: The amount of time in minutes a request may be retried, after which point they will be discarded.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onSync&lt;/code&gt;: The callback that will be triggered when the connection is recovered. At that point, each failed request can be dequeued and processed, by calling &lt;code&gt;queue.shiftRequest()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, define a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#network_only&quot; rel=&quot;noopener&quot;&gt;networkOnly&lt;/a&gt; runtime caching strategy for requests to the search URL (e.g. &lt;code&gt;/search_action&lt;/code&gt;) and pass it the &lt;code&gt;bgSyncPlugin&lt;/code&gt; defined previously:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;routing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  matchSearchUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NetworkOnly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bgSyncPlugin&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This tells Workbox to always go to the network when the service worker intercepts a request for the search endpoint, and to delegate to the Background Sync plugin the task of managing offline scenarios.&lt;/p&gt;
&lt;p&gt;As a result, when the user goes offline while searching, the query is automatically saved. When the connection is recovered the offline logic is triggered to process the request and inform the user of the result.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resilient-search-experiences/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this article you learned how to implement a search experience capable of responding gracefully to offline scenarios, by combining the &lt;a href=&quot;https://developers.google.com/web/updates/2015/12/background-sync&quot; rel=&quot;noopener&quot;&gt;Background Sync API&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API&quot; rel=&quot;noopener&quot;&gt;Push API&lt;/a&gt;.
We used Workbox to show how to implement this feature, as it simplifies the process, but the same can be achieved by writing vanilla service worker code.&lt;/p&gt;
&lt;p&gt;In the code samples we focused on the core part of the feature: how requests are intercepted and managed by the service worker. For a step-by-step guide on how to implement this functionality, including the offline page and the notification logic, check out the codelab at the end of this article.&lt;/p&gt;
</content>
    <author>
      <name>Demian Renzulli</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Richer offline experiences with the Periodic Background Sync API</title>
    <link href="https://web.dev/periodic-background-sync/"/>
    <updated>2019-11-10T00:00:00Z</updated>
    <id>https://web.dev/periodic-background-sync/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Web apps should be able to do anything iOS/Android/desktop apps can. The
&lt;a href=&quot;https://developers.google.com/web/updates/capabilities&quot; rel=&quot;noopener&quot;&gt;Capabilities project&lt;/a&gt;,
of which Periodic Background Sync is only a part, aims
to do just that. To learn about other capabilities and to keep up with their
progress, follow &lt;a href=&quot;https://developers.google.com/web/updates/capabilities&quot; rel=&quot;noopener&quot;&gt;Unlocking new capabilities for the
web&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Have you ever been in any of the following situations?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Riding a train or subway with flaky or no connectivity&lt;/li&gt;
&lt;li&gt;Been throttled by your carrier after watching too many videos&lt;/li&gt;
&lt;li&gt;Living in a country where bandwidth struggles to keep up with the demand&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have, then you&#39;ve surely felt the frustration of getting
certain things done on the web, and wondered why platform-specific apps so often do better
in these scenarios. Platform-specific apps can fetch fresh content such as news articles or weather
information ahead of time. Even if there&#39;s no network in the subway, you can still read the
news.&lt;/p&gt;
&lt;p&gt;Periodic Background Sync enables web applications to periodically synchronize
data in the background, bringing web apps closer to the behavior of a platform-specific
app.&lt;/p&gt;
&lt;h2 id=&quot;current-status&quot;&gt;Current status &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#current-status&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The table below explains the current status of the Periodic Background Sync API.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th markdown=&quot;block&quot;&gt;
Step
&lt;/th&gt;
&lt;th markdown=&quot;block&quot;&gt;
Status
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td markdown=&quot;block&quot;&gt;
1. Create explainer
&lt;/td&gt;
&lt;td markdown=&quot;block&quot;&gt;
&lt;a href=&quot;https://github.com/WICG/BackgroundSync/tree/master/explainers&quot;&gt;Complete&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td markdown=&quot;block&quot;&gt;
2. Create initial draft of specification
&lt;/td&gt;
&lt;td markdown=&quot;block&quot;&gt;
&lt;a href=&quot;https://wicg.github.io/periodic-background-sync/&quot; rel=&quot;noopener&quot;&gt;Complete&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td markdown=&quot;block&quot;&gt;
3. Gather feedback and iterate on design
&lt;/td&gt;
&lt;td markdown=&quot;block&quot;&gt;
In Progress
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td markdown=&quot;block&quot;&gt;
4. Origin trial
&lt;/td&gt;
&lt;td markdown=&quot;block&quot;&gt;
Complete
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td markdown=&quot;block&quot;&gt;
&lt;strong&gt;5. Launch&lt;/strong&gt;
&lt;/td&gt;
&lt;td markdown=&quot;block&quot;&gt;
&lt;strong&gt;Chrome 80&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&quot;try-it&quot;&gt;Try it &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#try-it&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can try periodic background sync with the &lt;a href=&quot;https://webplatformapis.com/periodic_sync/periodicSync_improved.html&quot; rel=&quot;noopener&quot;&gt;live demo
app&lt;/a&gt;.
Before using it, make sure that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You&#39;re using Chrome 80 or later.&lt;/li&gt;
&lt;li&gt;You
&lt;a href=&quot;https://developers.google.com/web/fundamentals/app-install-banners/&quot; rel=&quot;noopener&quot;&gt;install&lt;/a&gt;
the web app before enabling periodic background sync.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;concepts-and-usage&quot;&gt;Concepts and usage &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#concepts-and-usage&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Periodic background sync lets you show fresh content when a progressive web app
or service worker-backed page is launched. It does this by downloading data in
the background when the app or page is not being used. This prevents the app&#39;s
content from refreshing after launch while it&#39;s being viewed. Better yet, it
prevents the app from showing a content spinner before refreshing.&lt;/p&gt;
&lt;p&gt;Without periodic background sync, web apps must use alternative methods to
download data. A common example is using a push notification to wake a service
worker. The user is interrupted by a message such as &#39;new data available&#39;.
Updating the data is essentially a side effect. You still have the option of
using push notifications for truly important updates, such as significant
breaking news.&lt;/p&gt;
&lt;p&gt;Periodic background sync is easily confused with background sync. Though they
have similar names, their use cases are different. Among other things,
background sync is most commonly used for resending data to a server when a
previous request has failed.&lt;/p&gt;
&lt;h3 id=&quot;getting-user-engagement-right&quot;&gt;Getting user engagement right &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#getting-user-engagement-right&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Done incorrectly, periodic background sync could be wasteful of users&#39;
resources. Before releasing it, Chrome put it through a trial period to make
sure it was right. This section explains some of the design decisions Chrome
took to make this feature as helpful as possible.&lt;/p&gt;
&lt;p&gt;The first design decision Chrome made is that a web app can only use periodic
background sync after a person has installed it on their device, and has
launched it as a distinct application. Periodic background sync is not available
in the context of a regular tab in Chrome.&lt;/p&gt;
&lt;p&gt;Furthermore, since Chrome doesn&#39;t want unused or seldom used web apps to gratuitously
consume battery or data, Chrome designed periodic background sync such that
developers will have to earn it by providing value to their users. Concretely,
Chrome is using a &lt;a href=&quot;https://www.chromium.org/developers/design-documents/site-engagement&quot; rel=&quot;noopener&quot;&gt;site engagement score&lt;/a&gt;
(&lt;code&gt;about://site-engagement/&lt;/code&gt;) to determine if and how often periodic background syncs can happen
for a given web app. In other words, a &lt;code&gt;periodicsync&lt;/code&gt; event won&#39;t be fired at all unless the engagement
score is greater than zero, and its value affects the frequency at which the
&lt;code&gt;periodicsync&lt;/code&gt; event fires. This ensures that the only apps syncing in the
background are the ones you are actively using.&lt;/p&gt;
&lt;p&gt;Periodic background sync shares some similarities with existing APIs and
practices on popular platforms. For instance, one-off background sync as well as
push notifications allow a web app&#39;s logic to live a little longer (via its
service worker) after a person has closed the page. On most platforms, it&#39;s
common for people to have installed apps that periodically access the network in
the background to provide a better user experience for critical updates,
prefetching content, syncing data, and so on. Similarly, periodic background sync also
extends the lifetime of a web app&#39;s logic to run at regular periods for what
might be a few minutes at a time.&lt;/p&gt;
&lt;p&gt;If the browser allowed this to occur frequently and without restrictions, it
could result in some privacy concerns. Here&#39;s how Chrome has addressed this
risk for periodic background sync:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The background sync activity only occurs on a network that the device has
previously connected to. Chrome recommends to only connect to networks operated by
trustworthy parties.&lt;/li&gt;
&lt;li&gt;As with all internet communications, periodic background sync reveals the IP
addresses of the client, the server it&#39;s talking to, and the name of the
server. To reduce this exposure to roughly what it would be if the app only
synced when it was in the foreground, the browser limits the frequency of an
app&#39;s background syncs to align with how often the person uses that app. If
the person stops frequently interacting with the app, periodic background sync
will stop triggering. This is a net improvement over the status quo in platform-specific
apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;when-can-it-be-used&quot;&gt;When can it be used? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#when-can-it-be-used&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Rules for use vary by browser. To summarize from above, Chrome puts the
following requirements on periodic background sync:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A particular user engagement score.&lt;/li&gt;
&lt;li&gt;Presence of a previously used network.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The timing of synchronizations are not controlled by developers. The
synchronization frequency will align with how often the app is used. (Note that
platform-specific apps currently don&#39;t do this.) It also takes into the device&#39;s power and
connectivity state.&lt;/p&gt;
&lt;h3 id=&quot;when-should-it-be-used&quot;&gt;When should it be used? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#when-should-it-be-used&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When your service worker wakes up to handle a &lt;code&gt;periodicsync&lt;/code&gt; event, you have the
&lt;em&gt;opportunity&lt;/em&gt; to request data, but not the &lt;em&gt;obligation&lt;/em&gt; to do so. When handling
the event you should take network conditions and available storage into
consideration and download different amounts of data in response. You can use
the following resources to help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/save-data/#detecting_the_save-data_setting&quot; rel=&quot;noopener&quot;&gt;Detecting data saver mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2017/08/estimating-available-storage-space&quot; rel=&quot;noopener&quot;&gt;Estimating available storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;permissions&quot;&gt;Permissions &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#permissions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After the service worker is installed, use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API&quot; rel=&quot;noopener&quot;&gt;Permissions
API&lt;/a&gt; to query
for &lt;code&gt;periodic-background-sync&lt;/code&gt;. You can do this from either a window or a
service worker context.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;permissions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;periodic-background-sync&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;granted&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Periodic background sync can be used.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Periodic background sync cannot be used.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;registering-a-periodic-sync&quot;&gt;Registering a periodic sync &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#registering-a-periodic-sync&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As already stated, periodic background sync requires a service worker. Retrieve
a &lt;code&gt;PeriodicSyncManager&lt;/code&gt; using &lt;code&gt;ServiceWorkerRegistration.periodicSync&lt;/code&gt; and call
&lt;code&gt;register()&lt;/code&gt; on it. Registering requires both a tag and a minimum
synchronization interval (&lt;code&gt;minInterval&lt;/code&gt;). The tag identifies the registered sync
so that multiple syncs can be registered. In the example below, the tag name is
&lt;code&gt;&#39;content-sync&#39;&lt;/code&gt; and the &lt;code&gt;minInterval&lt;/code&gt; is one day.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; registration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ready&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;periodicSync&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;periodicSync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;content-sync&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token comment&quot;&gt;// An interval of one day.&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      minInterval&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Periodic background sync cannot be used.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;verifying-a-registration&quot;&gt;Verifying a registration &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#verifying-a-registration&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Call &lt;code&gt;periodicSync.getTags()&lt;/code&gt; to retrieve an array of registration tags. The
example below uses tag names to confirm that cache updating is active to avoid
updating again.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; registration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ready&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;periodicSync&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;periodicSync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Only update content if sync isn&#39;t set up.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;content-sync&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;updateContentOnPageLoad&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// If periodic background sync isn&#39;t supported, always update.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;updateContentOnPageLoad&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You can also use &lt;code&gt;getTags()&lt;/code&gt; to show a list of active registrations in your web
app&#39;s settings page so that users can enable or disable specific types of
updates.&lt;/p&gt;
&lt;h3 id=&quot;responding-to-a-periodic-background-sync-event&quot;&gt;Responding to a periodic background sync event &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#responding-to-a-periodic-background-sync-event&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To respond to a periodic background sync event add a &lt;code&gt;periodicsync&lt;/code&gt; event
handler to your service worker. The &lt;code&gt;event&lt;/code&gt; object passed to it will contain a
&lt;code&gt;tag&lt;/code&gt; parameter matching the value used during registration. For example if a
periodic background sync was registered with the name &lt;code&gt;&#39;content-sync&#39;&lt;/code&gt;, then
&lt;code&gt;event.tag&lt;/code&gt; will be &lt;code&gt;&#39;content-sync&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;periodicsync&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tag &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;content-sync&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// See the &quot;Think before you sync&quot; section for&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// checks you could perform before syncing.&lt;/span&gt;&lt;br /&gt;    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;syncContent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Other logic for different tags as needed.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;unregistering-a-sync&quot;&gt;Unregistering a sync &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#unregistering-a-sync&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To end a registered sync, call &lt;code&gt;periodicSync.unregister()&lt;/code&gt; with the name of the
sync you want to unregister.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; registration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ready&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;periodicSync&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;periodicSync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unregister&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;content-sync&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;interfaces&quot;&gt;Interfaces &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#interfaces&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here&#39;s a quick run down of the interfaces provided by the Periodic Background
Sync API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PeriodicSyncEvent&lt;/code&gt;. Passed to the &lt;code&gt;ServiceWorkerGlobalScope.onperiodicsync&lt;/code&gt; event handler at a
time of the browser&#39;s choosing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PeriodicSyncManager&lt;/code&gt;. Registers and unregisters periodic syncs and provides tags for registered
syncs. Retrieve an instance of this class from the ServiceWorkerRegistration.periodicSync`
property.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServiceWorkerGlobalScope.onperiodicsync&lt;/code&gt;. Registers a handler to receive the &lt;code&gt;PeriodicSyncEvent&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServiceWorkerRegistration.periodicSync&lt;/code&gt;. Returns a reference to the &lt;code&gt;PeriodicSyncManager&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;example&quot;&gt;Example &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;updating-content&quot;&gt;Updating content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#updating-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The following example uses periodic background sync to download and cache up-to-date articles for a news site or blog. Notice the tag name, which indicates the kind of sync this is (&lt;code&gt;&#39;update-articles&#39;&lt;/code&gt;). The call to &lt;code&gt;updateArticles()&lt;/code&gt; is wrapped in &lt;code&gt;event.waitUntil()&lt;/code&gt; so that the service worker won&#39;t terminate before the articles are downloaded and stored.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateArticles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; articlesCache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;articles&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; articlesCache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/articles&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;periodicsync&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tag &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;update-articles&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;updateArticles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;adding-periodic-background-sync-to-an-existing-web-app&quot;&gt;Adding periodic background sync to an existing web app &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#adding-periodic-background-sync-to-an-existing-web-app&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleChromeLabs/so-pwa/pull/11&quot; rel=&quot;noopener&quot;&gt;This set of changes&lt;/a&gt; were needed to add
periodic background sync to an &lt;a href=&quot;https://so-pwa.firebaseapp.com/&quot; rel=&quot;noopener&quot;&gt;existing PWA&lt;/a&gt;. This example includes a number of helpful logging statements that describe the
state of periodic background sync in the web app.&lt;/p&gt;
&lt;h2 id=&quot;debugging&quot;&gt;Debugging &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#debugging&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It can be a challenge to get and end-to-end view of periodic background sync
while testing locally. Information about active registrations, approximate sync
intervals, and logs of past sync events provide valuable context while debugging
your web app&#39;s behavior. Fortunately, you can find all of that information
through an experimental feature in Chrome DevTools.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Periodic background sync debugging is enabled in Chrome 81 and later.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;recording-local-activity&quot;&gt;Recording local activity &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#recording-local-activity&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;Periodic Background Sync&lt;/strong&gt; section of DevTools is organized around key events
in the periodic background sync lifecycle: registering for sync, performing a
background sync, and unregistering. To obtain information about these events,
click &lt;strong&gt;Start recording&lt;/strong&gt;.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The record button in DevTools&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;90&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 708px) 708px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/wcl5Bm6Pe9xn5Dps6IN6.png?auto=format&amp;w=1416 1416w&quot; width=&quot;708&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    The record button in DevTools
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;While recording, entries will appear in DevTools corresponding to events, with
context and metadata logged for each.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;An example of recorded periodic background sync data&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;357&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/m92Art0OwiM0VyI7czFB.png?auto=format&amp;w=1600 1600w&quot; style=&quot;max-width: 75%&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    An example of recorded periodic background sync data
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After enabling recording once, it will stay enabled for up to three days,
allowing DevTools to capture local debugging information about background syncs
that might take place, even hours in the future.&lt;/p&gt;
&lt;h3 id=&quot;simulating-events&quot;&gt;Simulating events &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#simulating-events&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While recording background activity can be helpful, there are times when you&#39;ll
want to test your &lt;code&gt;periodicsync&lt;/code&gt; handler immediately, without waiting for an
event to fire on its normal cadence.&lt;/p&gt;
&lt;p&gt;You can do this via the &lt;strong&gt;Service Workers&lt;/strong&gt; section within the Application panel in
Chrome DevTools. The &lt;strong&gt;Periodic Sync&lt;/strong&gt; field allows you to provide a tag for the
event to use, and to trigger it as many times as you&#39;d like.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Manually triggering a &lt;code&gt;periodicsync&lt;/code&gt; event requires Chrome 81 or later.&lt;/p&gt;
&lt;/div&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The &amp;#x27;Service Workers&amp;#x27; section of the Application panel shows a &amp;#x27;Periodic Sync&amp;#x27; text field and button.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;321&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BQ5QdjwaRDP42cHqW98W.png?auto=format&amp;w=1600 1600w&quot; style=&quot;max-width: 90%&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;using-the-devtools-interface&quot;&gt;Using the DevTools interface &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/periodic-background-sync/#using-the-devtools-interface&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting in Chrome 81, you&#39;ll see a &lt;strong&gt;Periodic Background Sync&lt;/strong&gt; section in the
DevTools &lt;em&gt;Application&lt;/em&gt; panel.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The Application panel showing the Periodic Background Sync section&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;253&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 382px) 382px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/eYJtJfZ9Qo145lUQe4Ur.png?auto=format&amp;w=764 764w&quot; style=&quot;max-width: 75%&quot; width=&quot;382&quot; /&gt;
&lt;/figure&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author><author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>Handling navigation requests</title>
    <link href="https://web.dev/handling-navigation-requests/"/>
    <updated>2020-07-13T00:00:00Z</updated>
    <id>https://web.dev/handling-navigation-requests/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Navigation requests are requests for HTML documents made by your browser whenever you enter a new
URL in the navigation bar, or follow a link on a page taking you to a new URL. This is where service
workers make their biggest impact on performance: if you use a service worker to respond to
navigation requests without waiting for the network, you can ensure that navigations are reliably
fast, in addition to being resilient when the network is unavailable. This is the single biggest
performance win that comes from a service worker, versus what&#39;s possible with &lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;HTTP
caching&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As detailed in the &lt;a href=&quot;https://web.dev/identify-resources-via-network-panel/&quot;&gt;Identify resources loaded from the
network&lt;/a&gt; guide, a navigation request is the first of
potentially many requests made in the
&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network/reference#waterfall&quot; rel=&quot;noopener&quot;&gt;&amp;quot;waterfall&amp;quot;&lt;/a&gt;
of network traffic. The HTML that you load via a navigation request kicks off the flow of all other
requests for subresources like images, scripts, and styles.&lt;/p&gt;
&lt;p&gt;Inside of a service worker&#39;s &lt;code&gt;fetch&lt;/code&gt; event handler, you can determine whether a request is a
navigation by checking the &lt;code&gt;request.mode&lt;/code&gt; property on the &lt;code&gt;FetchEvent&lt;/code&gt;. If it&#39;s set to &lt;code&gt;&#39;navigate&#39;&lt;/code&gt;,
then it&#39;s a navigation request.&lt;/p&gt;
&lt;p&gt;As a general rule, do not use long-lived &lt;code&gt;&lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;Cache-Control headers&lt;/a&gt;&lt;/code&gt; to cache
the HTML response for a navigation request. They should normally be satisfied via the network, with
&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;, to ensure that the HTML, along with the chain of subsequent
network requests, is (reasonably) fresh. Going against the network each time the user navigates to a
new page unfortunately means that each navigation &lt;em&gt;might&lt;/em&gt; be slow. At the very least, it
means that it won&#39;t be &lt;em&gt;reliably&lt;/em&gt; fast.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;&lt;code&gt;Cache-Control: no-cache&lt;/code&gt; means the browser must check (or &amp;quot;revalidate&amp;quot;) with the server before
using a previously cached resource. This requires a round-trip network communication to complete
before the resource can be used.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;different-approaches-for-architectures&quot;&gt;Different approaches for architectures &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/handling-navigation-requests/#different-approaches-for-architectures&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Figuring out &lt;em&gt;how&lt;/em&gt; to respond to navigation requests while avoiding the network can be tricky. The
right approach depends very much on your web site&#39;s architecture and the number of unique URLs that
users might navigate to.&lt;/p&gt;
&lt;p&gt;While there&#39;s no one-size-fits all solution, the following general guidelines should help you decide
which approach is the most viable.&lt;/p&gt;
&lt;h3 id=&quot;small-static-sites&quot;&gt;Small static sites &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/handling-navigation-requests/#small-static-sites&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your web app consists of a relatively small number (think: a couple of dozen) unique URLs, and
each of those URLs corresponds to a different static HTML file, then one viable approach is to just
cache all of those HTML files, and respond to navigation requests with the appropriate cached HTML.&lt;/p&gt;
&lt;p&gt;Using &lt;a href=&quot;https://web.dev/precache-with-workbox/&quot;&gt;precaching&lt;/a&gt;, you can cache the HTML in advance, as soon as the
service worker is installed, and update the cached HTML each time you rebuild your site and redeploy
your service worker.&lt;/p&gt;
&lt;p&gt;Alternatively, if you would rather avoid precaching all of your HTML—perhaps because users tend to
navigate to only a subset of URLs on your site—you can use a
&lt;a href=&quot;https://web.dev/runtime-caching-with-workbox/#stale-while-revalidate&quot;&gt;stale-while-revalidate&lt;/a&gt; runtime caching
strategy. Be careful about this approach, though, as each individual HTML document is cached and
updated separately. Using runtime caching for HTML is most appropriate if you have a small number of
URLs that are revisited &lt;strong&gt;frequently&lt;/strong&gt; by the same set of users, and if you feel comfortable about
those URLs being revalidated independently of each other.&lt;/p&gt;
&lt;h3 id=&quot;single-page-apps&quot;&gt;Single-page apps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/handling-navigation-requests/#single-page-apps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A single-page architecture is frequently used by modern web applications. In it, client-side
JavaScript modifies the HTML in response to user actions. This model uses the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot; rel=&quot;noopener&quot;&gt;History
API&lt;/a&gt; to modify the current URL as the
user interacts with the web app, leading to what&#39;s effectively a &amp;quot;simulated&amp;quot; navigation. While
subsequent navigations might be &amp;quot;fake&amp;quot;, the initial navigation is real, and it&#39;s still important to
make sure that it isn&#39;t blocked on the network.&lt;/p&gt;
&lt;p&gt;Fortunately, if you&#39;re using the single-page architecture, there&#39;s a straightforward pattern to
follow for serving the initial navigation from the cache: the &lt;a href=&quot;https://developers.google.com/web/fundamentals/architecture/app-shell&quot; rel=&quot;noopener&quot;&gt;application
shell&lt;/a&gt;. In this model, your
service worker responds to navigation requests by returning the same, single HTML file that has
already been precached—regardless of the URL being requested. This HTML should be bare-bones,
consisting of, perhaps, a generic loading indicator or &lt;a href=&quot;https://css-tricks.com/building-skeleton-screens-css-custom-properties/&quot; rel=&quot;noopener&quot;&gt;skeleton
content&lt;/a&gt;. Once the browser
has loaded this HTML from the cache, your existing client-side JavaScript takes over, and renders
the correct HTML content for the URL from the original navigation request.&lt;/p&gt;
&lt;p&gt;Workbox provides the tools that you need to implement this approach; the &lt;code&gt;&lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.generateSW&quot; rel=&quot;noopener&quot;&gt;navigateFallback
option&lt;/a&gt;&lt;/code&gt;
allows you to specify which HTML document to use as your app shell, along with an optional allow and
deny list to limit this behavior to a subset of your URLs.&lt;/p&gt;
&lt;h3 id=&quot;multi-page-apps&quot;&gt;Multi-page apps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/handling-navigation-requests/#multi-page-apps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your web server generates your site&#39;s HTML dynamically, or if you have more than a few dozen
unique pages,  then it&#39;s much harder to avoid the network when handling navigation requests. The
advice in &lt;a href=&quot;https://web.dev/handling-navigation-requests/#everything-else&quot;&gt;Everything else&lt;/a&gt; will likely apply to you.&lt;/p&gt;
&lt;p&gt;But for a certain subset of multi-page apps, you might be able to implement a service worker that
fully replicates the logic used in your web server to generate HTML. This works best if you can
share routing and templating information between the server and service worker environments, and in
particular, if your web server uses JavaScript (without relying on
&lt;a href=&quot;https://nodejs.org/&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt;-specific features, like file system access).&lt;/p&gt;
&lt;p&gt;If your web server falls into that category and you would like to explore one approach to moving
HTML generation off the network and into your service worker, the guidance in &lt;a href=&quot;https://developers.google.com/web/updates/2018/05/beyond-spa&quot; rel=&quot;noopener&quot;&gt;Beyond SPAs:
alternative architectures for your
PWA&lt;/a&gt; can get you started.&lt;/p&gt;
&lt;h3 id=&quot;everything-else&quot;&gt;Everything else &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/handling-navigation-requests/#everything-else&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you can&#39;t respond to navigation requests with cached HTML, you must take steps to ensure that
adding a service worker to your site (to handle other, non-HTML requests) doesn&#39;t end up slowing
down your navigations. Starting up the service worker without using it to respond to a navigation
request will introduce a small amount of latency (as explained in &lt;a href=&quot;https://youtu.be/25aCD5XL1Jk&quot; rel=&quot;noopener&quot;&gt;Building Faster, More Resilient
Apps with Service Worker&lt;/a&gt;). You can mitigate this overhead by enabling
a feature called &lt;a href=&quot;https://developers.google.com/web/updates/2017/02/navigation-preload&quot; rel=&quot;noopener&quot;&gt;navigation
preload&lt;/a&gt;, and then &lt;a href=&quot;https://developers.google.com/web/updates/2017/02/navigation-preload#using_the_preloaded_response&quot; rel=&quot;noopener&quot;&gt;using the
network
response&lt;/a&gt;
that&#39;s been preloaded inside of your &lt;code&gt;fetch&lt;/code&gt; event handler.&lt;/p&gt;
&lt;p&gt;Workbox &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-navigation-preload&quot; rel=&quot;noopener&quot;&gt;provides a helper
library&lt;/a&gt; that
feature-detects whether navigation preload is supported, and if so, simplifies the process of
telling your service worker to use the network response.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@aaronburden?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Aaron Burden&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/navigate?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;,&lt;/em&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Building resilient search experiences with Workbox</title>
    <link href="https://web.dev/codelab-building-resilient-search-experiences/"/>
    <updated>2020-06-23T00:00:00Z</updated>
    <id>https://web.dev/codelab-building-resilient-search-experiences/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;This codelab shows you how to implement a resilient search experience with Workbox. The demo app it uses contains a search box that calls a server endpoint, and redirects the user to a basic HTML page.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This codelab uses &lt;a href=&quot;https://www.google.com/chrome/&quot; rel=&quot;noopener&quot;&gt;Chrome DevTools&lt;/a&gt;. Download Chrome if you don&#39;t already have it.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;measure&quot;&gt;Measure &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-building-resilient-search-experiences/#measure&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before adding optimizations, it&#39;s always a good idea to first analyze the current state of the application.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;Remix to Edit&lt;/strong&gt; to make the project editable.&lt;/li&gt;
&lt;li&gt;To preview the site, press &lt;strong&gt;View App&lt;/strong&gt;. Then press
&lt;strong&gt;Fullscreen&lt;/strong&gt;
&lt;img src=&quot;https://web.dev/images/glitch/fullscreen.svg&quot; alt=&quot;fullscreen&quot; style=&quot;padding: 4px 8px; opacity: .5; border: 1px solid #c3c3c3; border-radius: 5px;&quot; /&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the new tab that just opened, check how the website behaves when going offline:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;Control+Shift+J&lt;/code&gt; (or &lt;code&gt;Command+Option+J&lt;/code&gt; on Mac) to open DevTools.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Network&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;Open Chrome DevTools and select the Network panel.&lt;/li&gt;
&lt;li&gt;In the &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network/reference#throttling&quot; rel=&quot;noopener&quot;&gt;Throttling drop-down list&lt;/a&gt;, select &lt;strong&gt;Offline&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the demo app enter a search query, then click the &lt;strong&gt;Search&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The standard browser error page is shown:&lt;/p&gt;
&lt;img alt=&quot;A screenshot of the default offline UX in the browser.&quot; decoding=&quot;async&quot; height=&quot;465&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/g4Naxj1RnipuqxqzC62x.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;h2 id=&quot;provide-a-fallback-response&quot;&gt;Provide a fallback response &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-building-resilient-search-experiences/#provide-a-fallback-response&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The service worker contains the code to add the offline page to the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-precaching#explanation_of_the_precache_list&quot; rel=&quot;noopener&quot;&gt;precache list&lt;/a&gt;, so it can always be cached at the service worker &lt;code&gt;install&lt;/code&gt; event.&lt;/p&gt;
&lt;p&gt;Usually you would need to instruct Workbox to add this file to the precache list at build time, by integrating the library with your build tool of choice (e.g. &lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;noopener&quot;&gt;webpack&lt;/a&gt; or &lt;a href=&quot;https://gulpjs.com/&quot; rel=&quot;noopener&quot;&gt;gulp&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For simplicity, we&#39;ve already done it for you. The following code at &lt;code&gt;public/sw.js&lt;/code&gt; does that:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FALLBACK_HTML_URL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ‘&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;index_offline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html’&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;…&lt;br /&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;precaching&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;precacheAndRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALLBACK_HTML_URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;To learn more about how to integrate Workbox with build tools, check out the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin&quot; rel=&quot;noopener&quot;&gt;webpack Workbox plugin&lt;/a&gt; and the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/codelabs/gulp&quot; rel=&quot;noopener&quot;&gt;Gulp Workbox plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Next, add code to use the offline page as a fallback response:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To view the source, press &lt;strong&gt;View Source&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Add the following code to the bottom of &lt;code&gt;public/sw.js&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;routing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setDefaultHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NetworkOnly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;routing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setCatchHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;document&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALLBACK_HTML_URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The Glitch UI says &lt;code&gt;workbox is not defined&lt;/code&gt; because it doesn&#39;t realize that the
&lt;code&gt;importScripts()&lt;/code&gt; call on line 1 is importing the library.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The code does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defines a default &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#network_only&quot; rel=&quot;noopener&quot;&gt;Network Only strategy&lt;/a&gt; that will apply to all requests.&lt;/li&gt;
&lt;li&gt;Declares a global error handler, by calling &lt;code&gt;workbox.routing.setCatchHandler()&lt;/code&gt; to manage failed requests. When requests are for documents, a fallback offline HTML page will be returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To test this functionality:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go back to the other tab that is running your app.&lt;/li&gt;
&lt;li&gt;Set the &lt;strong&gt;Throttling&lt;/strong&gt; drop-down list back to &lt;strong&gt;Online&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Press Chrome&#39;s &lt;strong&gt;Back&lt;/strong&gt; button to navigate back to the search page.&lt;/li&gt;
&lt;li&gt;Make sure that the &lt;strong&gt;Disable cache&lt;/strong&gt; checkbox in DevTools is disabled.&lt;/li&gt;
&lt;li&gt;Long-press Chrome&#39;s &lt;strong&gt;Reload&lt;/strong&gt; button and select
&lt;a href=&quot;https://stackoverflow.com/q/14969315/1669860&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Empty cache and hard reload&lt;/strong&gt;&lt;/a&gt;
to ensure that your service worker is updated.&lt;/li&gt;
&lt;li&gt;Set the &lt;strong&gt;Throttling&lt;/strong&gt; drop-down list back to &lt;strong&gt;Offline&lt;/strong&gt; again.&lt;/li&gt;
&lt;li&gt;Enter a search query, and click the &lt;strong&gt;Search&lt;/strong&gt; button again.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The fallback HTML page is shown:&lt;/p&gt;
&lt;img alt=&quot;A screenshot of the custom offline UX in the browser.&quot; decoding=&quot;async&quot; height=&quot;456&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/2o0feM6Ib4GnLdKQqV9G.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;h2 id=&quot;request-notification-permission&quot;&gt;Request notification permission &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-building-resilient-search-experiences/#request-notification-permission&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For simplicity, the offline page at &lt;code&gt;views/index_offline.html&lt;/code&gt; already contains the code to request notification permissions in a script block at the bottom:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;requestNotificationPermission&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  Notification&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestPermission&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;showOfflineText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The code does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the user clicks &lt;strong&gt;subscribe to notifications&lt;/strong&gt; the &lt;code&gt;requestNotificationPermission()&lt;/code&gt; function is called, which calls &lt;code&gt;Notification.requestPermission()&lt;/code&gt;, to show the default browser permission prompt. The promise resolves with the permission picked by the user, which can be either &lt;code&gt;granted&lt;/code&gt;, &lt;code&gt;denied&lt;/code&gt;, or &lt;code&gt;default&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Passes the resolved permission to  &lt;code&gt;showOfflineText()&lt;/code&gt; to show the appropriate text to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;persist-offline-queries-and-retry-when-back-online&quot;&gt;Persist offline queries and retry when back online &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-building-resilient-search-experiences/#persist-offline-queries-and-retry-when-back-online&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, implement &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-background-sync&quot; rel=&quot;noopener&quot;&gt;Workbox Background Sync&lt;/a&gt; to persist offline queries, so they can be retried when the browser detects that connectivity has returned.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;public/sw.js&lt;/code&gt; for edit.&lt;/li&gt;
&lt;li&gt;Add the following code at the end of the file:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bgSyncPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundSync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;offlineQueryQueue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  maxRetentionTime&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;onSync&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shiftRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;offline-search-responses&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; offlineUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;amp;notification=true&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offlineUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;showNotification&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offlineUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unshiftRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The code does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;workbox.backgroundSync.Plugin&lt;/code&gt; contains the logic to add failed requests to a queue so they can be retried later. These requests will be persisted in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API&quot; rel=&quot;noopener&quot;&gt;IndexedDB&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxRetentionTime&lt;/code&gt; indicates the amount of time a request may be retried. In this case we have chosen 60 minutes (after which it will be discarded).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onSync&lt;/code&gt; is the most important part of this code. This callback will be called when connection is back so that queued requests are retrieved and then fetched from the network.&lt;/li&gt;
&lt;li&gt;The network response is added to the &lt;code&gt;offline-search-responses&lt;/code&gt; cache, appending the &lt;code&gt;&amp;amp;notification=true&lt;/code&gt; query param, so that this cache entry can be picked up when a user clicks on the notification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To integrate background sync with your service, define a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#network_only&quot; rel=&quot;noopener&quot;&gt;NetworkOnly&lt;/a&gt; strategy for requests to the search URL (&lt;code&gt;/search_action&lt;/code&gt;) and pass the previously defined &lt;code&gt;bgSyncPlugin&lt;/code&gt;. Add the following code to the bottom of &lt;code&gt;public/sw.js&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;matchSearchUrl&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; notificationParam &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchParams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;notification&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pathname &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/search_action&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;notificationParam &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;routing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  matchSearchUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NetworkOnly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bgSyncPlugin&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This tells Workbox to always go to the network, and, when requests fail, use the background sync logic.&lt;/p&gt;
&lt;p&gt;Next, add the following code to the bottom of &lt;code&gt;public/sw.js&lt;/code&gt; to define a caching strategy for requests coming from notifications. Use a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#cache_first_cache_falling_back_to_network&quot; rel=&quot;noopener&quot;&gt;CacheFirst&lt;/a&gt; strategy, so they can be served from the cache.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;matchNotificationUrl&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; notificationParam &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchParams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;notification&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pathname &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/search_action&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;notificationParam &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;routing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;matchNotificationUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CacheFirst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;offline-search-responses&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Finally, add the code to show notifications:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;showNotification&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;notificationUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Notification&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;permission&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;showNotification&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Your search is ready!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Click to see you search result&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        icon&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/img/workbox.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;           url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; notificationUrl&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;notificationclick&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;notification&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;     clients&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;notification&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;test-the-feature&quot;&gt;Test the feature &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-building-resilient-search-experiences/#test-the-feature&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go back to the other tab that is running your app.&lt;/li&gt;
&lt;li&gt;Set the &lt;strong&gt;Throttling&lt;/strong&gt; drop-down list back to &lt;strong&gt;Online&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Press Chrome&#39;s &lt;strong&gt;Back&lt;/strong&gt; button to navigate back to the search page.&lt;/li&gt;
&lt;li&gt;Long-press Chrome&#39;s &lt;strong&gt;Reload&lt;/strong&gt; button and select
&lt;a href=&quot;https://stackoverflow.com/q/14969315/1669860&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Empty cache and hard reload&lt;/strong&gt;&lt;/a&gt;
to ensure that your service worker is updated.&lt;/li&gt;
&lt;li&gt;Set the &lt;strong&gt;Throttling&lt;/strong&gt; drop-down list back to &lt;strong&gt;Offline&lt;/strong&gt; again.&lt;/li&gt;
&lt;li&gt;Enter a search query, and click the &lt;strong&gt;Search&lt;/strong&gt; button again.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;subscribe to notifications&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When Chrome asks you if you want to grant the app permission to send notifications,
click &lt;strong&gt;Allow&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Enter another search query and click the &lt;strong&gt;Search&lt;/strong&gt; button again.&lt;/li&gt;
&lt;li&gt;Set the &lt;strong&gt;Throttling&lt;/strong&gt; drop-down list back to &lt;strong&gt;Online&lt;/strong&gt; again.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once the connection is back a notification will be shown:&lt;/p&gt;
&lt;img alt=&quot;A screenshot of the full offline flow.&quot; decoding=&quot;async&quot; height=&quot;315&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/kvnl2PlazBdppGF4eMi0.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-building-resilient-search-experiences/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Workbox provides many built-in features to make your PWAs more resilient and engaging.
In this codelab you have explored how to implement the Background Sync API by way of the Workbox abstraction, to ensure that offline user queries are not lost, and can be retried once connection is back.
The demo is a simple search app, but you can use a similar implementation for more complex scenarios and use cases, including chat apps, posting messages on a social network, etc.&lt;/p&gt;
</content>
    <author>
      <name>Demian Renzulli</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Prevent unnecessary network requests with the HTTP Cache</title>
    <link href="https://web.dev/http-cache/"/>
    <updated>2018-11-05T00:00:00Z</updated>
    <id>https://web.dev/http-cache/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Fetching resources over the network is both slow and expensive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Large responses require many roundtrips between the browser and the server.&lt;/li&gt;
&lt;li&gt;Your page won&#39;t load until all of its &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path&quot; rel=&quot;noopener&quot;&gt;critical resources&lt;/a&gt; have downloaded completely.&lt;/li&gt;
&lt;li&gt;If a person is accessing your site with a limited mobile data plan, every unnecessary
network request is a waste of their money.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How can you avoid unnecessary network requests? The browser&#39;s HTTP Cache is your
first line of defense. It&#39;s not necessarily the most powerful or flexible
approach, and you have limited control over the lifetime of cached responses,
but it&#39;s effective, it&#39;s supported in all browsers, and it doesn&#39;t require much
work.&lt;/p&gt;
&lt;p&gt;This guide shows you the basics of an effective HTTP caching implementation.&lt;/p&gt;
&lt;h2 id=&quot;browser-compatibility&quot;&gt;Browser compatibility &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#browser-compatibility&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There isn&#39;t actually a single API called the HTTP Cache. It&#39;s the general name
for a collection of web platform APIs. Those APIs are supported in all browsers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/Cache-Control#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/ETag#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ETag&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/Last-Modified#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Last-Modified&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;overview&quot;&gt;How the HTTP Cache works &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#overview&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All HTTP requests that the browser makes are first routed to the browser cache
to check whether there is a valid cached response that can be used to fulfill
the request. If there&#39;s a match, the response is read from the cache, which
eliminates both the network latency and the data costs that the transfer incurs.&lt;/p&gt;
&lt;p&gt;The HTTP Cache&#39;s behavior is controlled by a combination of
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Request_header&quot; rel=&quot;noopener&quot;&gt;request headers&lt;/a&gt; and
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Response_header&quot; rel=&quot;noopener&quot;&gt;response headers&lt;/a&gt;.
In an ideal scenario, you&#39;ll have control over both the code for your
web application (which will determine the request headers) and your web server&#39;s
configuration (which will determine the response headers).&lt;/p&gt;
&lt;p&gt;Check out MDN&#39;s &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Caching&quot; rel=&quot;noopener&quot;&gt;HTTP Caching&lt;/a&gt; article
for a more in-depth conceptual overview.&lt;/p&gt;
&lt;h2 id=&quot;request-headers&quot;&gt;Request headers: stick with the defaults (usually) &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#request-headers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While there are a number of important headers that should be included in your
web app&#39;s outgoing requests, the browser almost always takes care of setting
them on your behalf when it makes requests. Request headers that affect checking
for freshness, like &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/If-None-Match&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;If-None-Match&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/If-Modified-Since&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;If-Modified-Since&lt;/code&gt;&lt;/a&gt; just appear based on the browser&#39;s
understanding of the current values in the HTTP Cache.&lt;/p&gt;
&lt;p&gt;This is good news—it means that you can continue including tags like &lt;code&gt;&amp;lt;img src=&amp;quot;my-image.png&amp;quot;&amp;gt;&lt;/code&gt; in your HTML, and the browser  automatically takes care of
HTTP caching for you, without extra effort.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Developers who do need more control over the HTTP Cache in their web application
have an alternative—you can &amp;quot;drop down&amp;quot; a level, and manually use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot; rel=&quot;noopener&quot;&gt;Fetch
API&lt;/a&gt;, passing it
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; objects
with specific
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request/cache&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;cache&lt;/code&gt;&lt;/a&gt;
overrides set. That&#39;s beyond the scope of this guide, though!&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;response-headers&quot;&gt;Response headers: configure your web server &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#response-headers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The part of the HTTP caching setup that matters the most is the headers that
your web server adds to each outgoing response. The following headers all factor
into effective caching behavior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/Cache-Control&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/a&gt;.
The server can return a &lt;code&gt;Cache-Control&lt;/code&gt; directive to specify how, and for how
long, the browser and other intermediate caches should cache the individual
response.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/ETag&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ETag&lt;/code&gt;&lt;/a&gt;. When
the browser finds an expired cached response, it can send a small token
(usually a hash of the file&#39;s contents) to the server to check if the file has
changed. If the server returns the same token, then the file is the same, and there&#39;s
no need to re-download it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/Last-Modified&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Last-Modified&lt;/code&gt;&lt;/a&gt;.
This header serves the same purpose as &lt;code&gt;ETag&lt;/code&gt;, but uses a time-based strategy
to determine if a resource has changed, as opposed to the content-based strategy
of &lt;code&gt;ETag&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some web servers have built-in support for setting those headers by default,
while others leave the headers out entirely unless you explicitly configure
them. The specific details of &lt;em&gt;how&lt;/em&gt; to configure headers varies greatly
depending on which web server you use, and you should consult your server&#39;s
documentation to get the most accurate details.&lt;/p&gt;
&lt;p&gt;To save you some searching, here are instructions on configuring a few popular
web servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://expressjs.com/en/api.html#express.static&quot; rel=&quot;noopener&quot;&gt;Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/docs/2.4/caching.html&quot; rel=&quot;noopener&quot;&gt;Apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_headers_module.html&quot; rel=&quot;noopener&quot;&gt;nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://firebase.google.com/docs/hosting/full-config&quot; rel=&quot;noopener&quot;&gt;Firebase Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netlify.com/blog/2017/02/23/better-living-through-caching/&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Leaving out the &lt;code&gt;Cache-Control&lt;/code&gt; response header does not disable HTTP caching!
Instead, browsers &lt;a href=&quot;https://www.mnot.net/blog/2017/03/16/browser-caching#heuristic-freshness&quot; rel=&quot;noopener&quot;&gt;effectively
guess&lt;/a&gt;
what type of caching behavior makes the most sense for a given type of content.
Chances are you want more control than that offers, so take the time to
configure your response headers.&lt;/p&gt;
&lt;h2 id=&quot;response-header-strategies&quot;&gt;Which response header values should you use? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#response-header-strategies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are two important scenarios that you should cover when configuring your
web server&#39;s response headers.&lt;/p&gt;
&lt;h3 id=&quot;versioned-urls&quot;&gt;Long-lived caching for versioned URLs &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#versioned-urls&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;details class=&quot;w-details&quot;&gt;
  &lt;summary class=&quot;w-details__summary&quot;&gt;
  &lt;h4 class=&quot;w-details__header&quot;&gt;
    How versioned URLs can help your caching strategy
  &lt;/h4&gt;
  &lt;p class=&quot;w-details__preview&quot;&gt;    Versioned URLs are a good practice because they make it easier to invalidate cached responses.&lt;/p&gt;
&lt;/summary&gt;
  Suppose your server instructs browsers to cache a CSS file
  for 1 year (&lt;code&gt;Cache-Control: max-age=31536000&lt;/code&gt;) but your designer just made an
  emergency update that you need to roll out immediately. How do you notify browsers
  to update the &quot;stale&quot; cached copy of the file?
  You can&#39;t, at least not without changing the URL of the resource. After the
  browser caches the response, the cached version is used until it&#39;s no longer
  fresh, as determined by &lt;code&gt;max-age&lt;/code&gt; or &lt;code&gt;expires&lt;/code&gt;, or until it is evicted from the cache
  for some other reason—for example, the user clearing their browser cache. As a
  result, different users might end up using different versions of the file when
  the page is constructed: users who just fetched the resource use the new
  version, while users who cached an earlier (but still valid) copy use an older
  version of its response. How do you get the best of both worlds: client-side
  caching and quick updates? You change the URL of the resource and force the user
  to download the new response whenever its content changes. Typically, you do
  this by embedding a fingerprint of the file, or a version number, in its
  filename—for example, &lt;code&gt;style.x234dff.css&lt;/code&gt;.
&lt;/details&gt;
&lt;p&gt;When responding to requests for URLs that contain
&amp;quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fingerprint_(computing)&quot; rel=&quot;noopener&quot;&gt;fingerprint&lt;/a&gt;&amp;quot; or
versioning information, and whose contents are never meant to change, add
&lt;code&gt;Cache-Control: max-age=31536000&lt;/code&gt; to your responses.&lt;/p&gt;
&lt;p&gt;Setting this value tells the browser that when it needs to load the same URL
anytime over the next one year (31,536,000 seconds; the maximum supported
value), it can immediately use the value in the HTTP Cache, without having
to make a network request to your web server at all. That&#39;s great—you&#39;ve
immediately gained the reliability and speed that comes from avoiding the
network!&lt;/p&gt;
&lt;p&gt;Build tools like webpack can
&lt;a href=&quot;https://webpack.js.org/guides/caching/#output-filenames&quot; rel=&quot;noopener&quot;&gt;automate the process&lt;/a&gt;
of assigning hash fingerprints to your asset URLs.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;You can also add the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#Revalidation_and_reloading&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;immutable&lt;/code&gt;
property&lt;/a&gt;
to your &lt;code&gt;Cache-Control&lt;/code&gt; header as a further optimization, though it &lt;a href=&quot;https://www.keycdn.com/blog/cache-control-immutable#browser-support&quot; rel=&quot;noopener&quot;&gt;will be
ignored&lt;/a&gt; in
some browsers.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;unversioned-urls&quot;&gt;Server revalidation for unversioned URLs &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#unversioned-urls&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Unfortunately, not all of the URLs you load are versioned. Maybe you&#39;re not able
to include a build step prior to deploying your web app, so you can&#39;t add hashes
to your asset URLs. And every web application needs HTML files—those files are
(almost!) never going to include versioning information, since no one will
bother to use your web app if they need to remember that the URL to visit is
&lt;code&gt;https://example.com/index.34def12.html&lt;/code&gt;. So what can you do for those URLs?&lt;/p&gt;
&lt;p&gt;This is one scenario in which you need to admit defeat. HTTP caching alone isn&#39;t
powerful enough to avoid the network completely. (Don&#39;t worry—you&#39;ll soon learn
about &lt;a href=&quot;https://web.dev/service-workers-cache-storage/&quot;&gt;service workers&lt;/a&gt;, which will provide the
support we need to swing the battle back in your favor.) But there are a few
steps you can take to make sure that network requests are as quick and efficient
as possible.&lt;/p&gt;
&lt;p&gt;The following &lt;code&gt;Cache-Control&lt;/code&gt; values can help you fine-tune where and how unversioned URLs
are cached:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;no-cache&lt;/code&gt;. This instructs the browser that it must revalidate with the
server every time before using a cached version of the URL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-store&lt;/code&gt;. This instructs the browser and other intermediate caches (like CDNs) to never
store any version of the file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;. Browsers can cache the file but intermediate caches cannot.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;. The response can be stored by any cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://web.dev/http-cache/#flowchart&quot;&gt;Appendix: &lt;code&gt;Cache-Control&lt;/code&gt; flowchart&lt;/a&gt; to visualize the process
of deciding which &lt;code&gt;Cache-Control&lt;/code&gt; value(s) to use. Note also that &lt;code&gt;Cache-Control&lt;/code&gt; can
accept a comma-separated list of directives. See &lt;a href=&quot;https://web.dev/http-cache/#examples&quot;&gt;Appendix: &lt;code&gt;Cache-Control&lt;/code&gt; examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Along with that, setting one of two additional response headers can also help:
either &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/ETag&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ETag&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/Last-Modified&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Last-Modified&lt;/code&gt;&lt;/a&gt;. As mentioned in
&lt;a href=&quot;https://web.dev/http-cache/#response-headers&quot;&gt;Response headers&lt;/a&gt;, &lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt; both serve the
same purpose: determining if the browser needs to re-download a cached file
that has expired. &lt;code&gt;ETag&lt;/code&gt; is the recommended approach because it&#39;s more accurate.&lt;/p&gt;
&lt;details class=&quot;w-details&quot;&gt;
  &lt;summary class=&quot;w-details__summary&quot;&gt;
  &lt;h4 class=&quot;w-details__header&quot;&gt;
    ETag example
  &lt;/h4&gt;
&lt;/summary&gt;
  Assume that 120 seconds have passed since the initial fetch and the browser
  has initiated a new request for the same resource. First, the browser checks
  the HTTP Cache and finds the previous response. Unfortunately, the browser
  can&#39;t use the previous response because the response has now expired. At this
  point, the browser could dispatch a new request and fetch the new full
  response. However, that&#39;s inefficient because if the resource hasn&#39;t changed,
  then there&#39;s no reason to download the same information that&#39;s already in the
  cache! That&#39;s the problem that validation tokens, as specified in the &lt;code&gt;ETag&lt;/code&gt;
  header, are designed to solve. The server generates and returns an arbitrary
  token, which is typically a hash or some other fingerprint of the contents of
  the file. The browser doesn&#39;t need to know how the fingerprint is generated; it
  only needs to send it to the server on the next request. If the fingerprint is
  still the same, then the resource hasn&#39;t changed and the browser can skip the
  download. 
&lt;/details&gt;
&lt;p&gt;By setting &lt;code&gt;ETag&lt;/code&gt; or &lt;code&gt;Last-Modified&lt;/code&gt;, you&#39;ll end up making the
revalidation request much more efficient. They end up triggering the
&lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/If-Modified-Since&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;If-Modified-Since&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/If-None-Match&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;If-None-Match&lt;/code&gt;&lt;/a&gt;
request headers that were mentioned in &lt;a href=&quot;https://web.dev/http-cache/#request-headers&quot;&gt;Request headers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When a properly configured web server sees those incoming request headers, it
can confirm whether the version of the resource that the browser already has in
its HTTP Cache matches the latest version on the web server. If there&#39;s a match,
then the server can respond with a &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Status/304&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;304 Not Modified&lt;/code&gt;&lt;/a&gt; HTTP response,
which is the equivalent of &amp;quot;Hey, keep using what you&#39;ve already got!&amp;quot; There&#39;s
very little data to transfer when sending this type of response, so it&#39;s usually
much faster than having to actually send back a copy of the actual resource
being requested.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A diagram of a client requesting a resource and the server responding with a 304 header.&quot; decoding=&quot;async&quot; height=&quot;215&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 474px) 474px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/e2bN6glWoVbWIcwUF1uh.png?auto=format&amp;w=948 948w&quot; width=&quot;474&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption w-text--left&quot;&gt;
    The browser requests &lt;code&gt;/file&lt;/code&gt; from the server and includes the &lt;code&gt;If-None-Match&lt;/code&gt;
    header to instruct the server to only return the full file if the &lt;code&gt;ETag&lt;/code&gt; of
    the file on the server doesn&#39;t match the browser&#39;s &lt;code&gt;If-None-Match&lt;/code&gt; value. In this
    case, the 2 values did match, so the server returns a &lt;code&gt;304 Not Modified&lt;/code&gt; response
    with instructions on how much longer the file should be cached (&lt;code&gt;Cache-Control: max-age=120&lt;/code&gt;).
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#summary&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The HTTP Cache is an effective way to improve load performance because
it reduces unnecessary network requests. It&#39;s supported in all browsers and doesn&#39;t
take too much work to set up.&lt;/p&gt;
&lt;p&gt;The following &lt;code&gt;Cache-Control&lt;/code&gt; configurations are a good start:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cache-Control: no-cache&lt;/code&gt; for resources that should be revalidated with the server before every use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache-Control: no-store&lt;/code&gt; for resources that should never be cached.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache-Control: max-age=31536000&lt;/code&gt; for versioned resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the &lt;code&gt;ETag&lt;/code&gt; or &lt;code&gt;Last-Modified&lt;/code&gt; header can help you revalidate expired cache resources more efficiently.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--codelab&quot;&gt;
&lt;p&gt;&lt;strong&gt;Try it&lt;/strong&gt;!
Try the &lt;a href=&quot;https://web.dev/codelab-http-cache&quot;&gt;HTTP Cache codelab&lt;/a&gt; to get hands-on experience with &lt;code&gt;Cache-Control&lt;/code&gt;
and &lt;code&gt;ETag&lt;/code&gt; in Express.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;learn-more&quot;&gt;Learn more &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#learn-more&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&#39;re looking to go beyond the basics of using the &lt;code&gt;Cache-Control&lt;/code&gt; header,
check out Jake Archibald&#39;s &lt;a href=&quot;https://jakearchibald.com/2016/caching-best-practices/&quot; rel=&quot;noopener&quot;&gt;Caching best practices &amp;amp; max-age
gotchas&lt;/a&gt; guide.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://web.dev/love-your-cache&quot;&gt;Love your cache&lt;/a&gt; for guidance on how to optimize
your cache usage for return visitors.&lt;/p&gt;
&lt;h2 id=&quot;tips&quot;&gt;Appendix: More tips &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#tips&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have more time, here are further ways that you can optimize your usage of the HTTP Cache:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use consistent URLs. If you serve the same content on different URLs, then
that content will be fetched and stored multiple times.&lt;/li&gt;
&lt;li&gt;Minimize churn. If part of a resource (such as a CSS file) updates frequently, whereas the
rest of the file does not (such as library code), consider splitting the frequently updating
code into a separate file and using a short duration caching strategy for the frequently
updating code and a long caching duration strategy for the code that doesn&#39;t change often.&lt;/li&gt;
&lt;li&gt;Check out the new &lt;a href=&quot;https://web.dev/stale-while-revalidate/&quot;&gt;&lt;code&gt;stale-while-revalidate&lt;/code&gt;&lt;/a&gt; directive if
some degree of staleness is acceptable in your &lt;code&gt;Cache-Control&lt;/code&gt; policy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;flowchart&quot;&gt;Appendix: &lt;code&gt;Cache-Control&lt;/code&gt; flowchart &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#flowchart&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;img alt=&quot;Flowchart&quot; decoding=&quot;async&quot; height=&quot;600&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 595px) 595px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/htXr84PI8YR0lhgLPiqZ.png?auto=format&amp;w=1190 1190w&quot; width=&quot;595&quot; /&gt;
&lt;h2 id=&quot;examples&quot;&gt;Appendix: &lt;code&gt;Cache-Control&lt;/code&gt; examples &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/http-cache/#examples&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;code&gt;Cache-Control&lt;/code&gt; value&lt;/th&gt;
        &lt;th&gt;Explanation&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;max-age=86400&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;
          The response can be cached by browsers and intermediary caches for 
          up to 1 day (60 seconds x 60 minutes x 24 hours).
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;private, max-age=600&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;
          The response can be cached by the browser (but not intermediary caches) for up to 10 
          minutes (60 seconds x 10 minutes).
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;public, max-age=31536000&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;
          The response can be stored by any cache for 1 year.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;no-store&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;
          The response is not allowed to be cached and must be fetched in full on every request.
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author><author>
      <name>Ilya Grigorik</name>
    </author>
  </entry>
  
  <entry>
    <title>Service workers and the Cache Storage API</title>
    <link href="https://web.dev/service-workers-cache-storage/"/>
    <updated>2018-11-05T00:00:00Z</updated>
    <id>https://web.dev/service-workers-cache-storage/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;You&#39;re locked in a struggle for network reliability. The browser&#39;s HTTP cache is
your first line of defense, but as you&#39;ve learned, it&#39;s only really effective
when loading versioned URLs that you&#39;ve previously visited. On its own, the HTTP
cache is not enough.&lt;/p&gt;
&lt;p&gt;Fortunately, two newer tools are available to help turn the tide in your favor:
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot; rel=&quot;noopener&quot;&gt;service workers&lt;/a&gt;
and the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage&quot; rel=&quot;noopener&quot;&gt;Cache Storage API&lt;/a&gt;.
Since they&#39;re so often used together, it&#39;s worth learning about them both at the
same time.&lt;/p&gt;
&lt;h2 id=&quot;service-workers&quot;&gt;Service workers &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-workers-cache-storage/#service-workers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A service worker is built into the browser and controlled by a bit of extra
JavaScript code that you are responsible for creating. You deploy this alongside
the other files that make up your actual web application.&lt;/p&gt;
&lt;p&gt;A service worker has some special powers. Among other duties, it patiently waits
for your web app to make an outgoing request, and then springs into action by
intercepting it. What the service worker does with this intercepted request is
up to you.&lt;/p&gt;
&lt;p&gt;For some requests, the best course of action might be just to allow the request
to continue on to the network, just like what would happen if there were no
service worker at all.&lt;/p&gt;
&lt;p&gt;For other requests, though, you can take advantage of something more flexible
than the browser&#39;s HTTP cache, and return a reliably fast response without
having to worry about the network. That entails using the other piece of the
puzzle: the Cache Storage API.&lt;/p&gt;
&lt;h2 id=&quot;the-cache-storage-api&quot;&gt;The Cache Storage API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-workers-cache-storage/#the-cache-storage-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Cache Storage  API opens up a whole new range of possibilities, by giving
developers complete control over the contents of the cache. Instead of relying
on a combination of HTTP headers and the browser&#39;s built-in &lt;a href=&quot;https://httpwg.org/specs/rfc7234.html#heuristic.freshness&quot; rel=&quot;noopener&quot;&gt;heuristics&lt;/a&gt;,
the Cache
Storage API exposes a code-driven approach to caching. The Cache Storage API
is particularly useful when called from your service worker&#39;s JavaScript.&lt;/p&gt;
&lt;h3 id=&quot;wait...-there&#39;s-another-cache-to-think-about-now&quot;&gt;Wait… there&#39;s another cache to think about now? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-workers-cache-storage/#wait...-there&#39;s-another-cache-to-think-about-now&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You&#39;re probably asking yourself questions like &amp;quot;Do I still need to configure my
HTTP headers?&amp;quot; and &amp;quot;What can I do with this new cache that wasn&#39;t possible with
the HTTP cache?&amp;quot; Don&#39;t worry—those are natural reactions.&lt;/p&gt;
&lt;p&gt;It&#39;s still recommended that you configure the &lt;code&gt;Cache-Control&lt;/code&gt; headers on your web
server, even when you know that you&#39;re using the Cache Storage API. You can
usually get away with setting &lt;code&gt;Cache-Control: no-cache&lt;/code&gt; for unversioned URLs,
and/or &lt;code&gt;Cache-Control: max-age=31536000&lt;/code&gt; for URLs that contain versioning
information, like hashes.&lt;/p&gt;
&lt;p&gt;When populating the Cache Storage API cache, the browser
&lt;a href=&quot;https://jakearchibald.com/2016/caching-best-practices/#the-service-worker-the-http-cache-play-well-together-dont-make-them-fight&quot; rel=&quot;noopener&quot;&gt;defaults to checking for existing entries&lt;/a&gt;
in the HTTP cache, and uses those if found. If you&#39;re adding versioned URLs to
the Cache Storage API cache, the browser avoids an additional network request. The
flip side of this is that if you&#39;re using misconfigured &lt;code&gt;Cache-Control&lt;/code&gt; headers,
like specifying a long-lived cache lifetime for an unversioned URL, you can end
up
&lt;a href=&quot;https://jakearchibald.com/2016/caching-best-practices/#a-service-worker-can-extend-the-life-of-these-bugs&quot; rel=&quot;noopener&quot;&gt;making things worse&lt;/a&gt;
by adding that stale content to the Cache Storage API. Getting your HTTP cache
behavior sorted is a prerequisite for effectively using the Cache Storage API.&lt;/p&gt;
&lt;p&gt;As for what&#39;s now possible with this new API, the answer is: a lot. Some common
uses that would be difficult or impossible with just the HTTP cache include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a &amp;quot;refresh in the background&amp;quot; approach to cached content, known as
stale-while-revalidate.&lt;/li&gt;
&lt;li&gt;Impose a cap on the maximum number of assets to cache, and implement a
custom expiration policy to remove items once that limit is reached.&lt;/li&gt;
&lt;li&gt;Compare previously cached and fresh network responses to see if
anything&#39;s changed, and enable the user to update content (with a button,
for example)  when data has actually been updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://web.dev/cache-api-quick-guide/&quot;&gt;The Cache API: A quick guide&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;h3 id=&quot;api-nuts-and-bolts&quot;&gt;API nuts and bolts &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-workers-cache-storage/#api-nuts-and-bolts&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are some things to keep in mind about the API&#39;s design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;
objects are used as the unique keys when reading and writing to these
caches. As a convenience, you can pass in a URL string like
&lt;code&gt;&#39;https://example.com/index.html&#39;&lt;/code&gt; as the key instead of an actual
&lt;code&gt;Request&lt;/code&gt; object, and the API will automatically handle that for you.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt;
objects are used as the values in these caches.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Cache-Control&lt;/code&gt; header on a given &lt;code&gt;Response&lt;/code&gt; is effectively ignored
when caching data. There are no automatic, built-in expiration or freshness
checks, and once you store an item in the cache, it will persist until your
code explicitly removes it. (There are libraries to simplify cache
maintenance on your behalf. They&#39;ll be covered later on in this series.)&lt;/li&gt;
&lt;li&gt;Unlike with older, synchronous APIs such as
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;LocalStorage&lt;/code&gt;&lt;/a&gt;,
all Cache Storage API operations are asynchronous.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-quick-detour:-promises-and-asyncawait&quot;&gt;A quick detour: promises and async/await &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-workers-cache-storage/#a-quick-detour:-promises-and-asyncawait&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Service workers and the Cache Storage API use
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchrony_(computer_programming)&quot; rel=&quot;noopener&quot;&gt;asynchronous programming concepts&lt;/a&gt;.
In particular, they rely heavily on promises to represent the future result of
async operations. You should familiarize yourself with
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;noopener&quot;&gt;promises&lt;/a&gt;,
and the related
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt;
syntax, before diving in.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--codelab&quot;&gt;
&lt;p&gt;&lt;strong&gt;Try it&lt;/strong&gt;!
&lt;a href=&quot;https://web.dev/codelab-service-workers&quot;&gt;Make an application reliable by registering a service worker&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;don&#39;t-deploy-that-code...-yet&quot;&gt;Don&#39;t deploy that code… yet &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-workers-cache-storage/#don&#39;t-deploy-that-code...-yet&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While they provide an important foundation, and can be used as-is, both service
workers and the Cache Storage API are effectively lower-level building blocks,
with a number of edge cases and &amp;quot;gotchas&amp;quot;. There are some higher-level tools
that can help smooth the difficult bits of those APIs, and provide all you need
to build a production-ready service worker. The next guide covers one such tool:
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/&quot; rel=&quot;noopener&quot;&gt;Workbox&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--success&quot;&gt;
&lt;p&gt;&lt;strong&gt;Success&lt;/strong&gt;:
Learn while having fun. Check out the new &lt;a href=&quot;https://serviceworkies.com/&quot; rel=&quot;noopener&quot;&gt;Service Workies game!&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Integrate PWAs into built-in sharing UIs with Workbox</title>
    <link href="https://web.dev/workbox-share-targets/"/>
    <updated>2019-12-19T00:00:00Z</updated>
    <id>https://web.dev/workbox-share-targets/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;The &lt;a href=&quot;https://web.dev/web-share-target/&quot;&gt;Web Share Target API&lt;/a&gt; lets you display
your &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/checklist&quot; rel=&quot;noopener&quot;&gt;Progressive Web App&lt;/a&gt; in a
user&#39;s system-level share &lt;a href=&quot;https://material.io/develop/android/components/bottom-sheet-behavior/&quot; rel=&quot;noopener&quot;&gt;sheet&lt;/a&gt; after it&#39;s been installed. While it works great if you have a server
available to receive the request, it&#39;s much harder to get working if you don&#39;t.&lt;/p&gt;
&lt;p&gt;In this article we&#39;ll use
&lt;a href=&quot;https://developers.google.com/web/tools/workbox&quot; rel=&quot;noopener&quot;&gt;Workbox&lt;/a&gt;, a set of JavaScript
libraries for adding offline support to web apps, to create a share target URL
that lives entirely inside your &lt;a href=&quot;https://web.dev/service-workers-cache-storage/&quot;&gt;service worker&lt;/a&gt;. This lets static sites and
single-page apps serve as share targets without a dedicated server endpoint.&lt;/p&gt;
&lt;figure class=&quot;w-figure w-figure--inline-right&quot;&gt;
  &lt;img alt=&quot;Android phone with the &amp;#x27;Share via&amp;#x27; drawer open.&quot; decoding=&quot;async&quot; height=&quot;377&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 400px) 400px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/mp2bdiP2gVeMQ4UX12vd.png?auto=format&amp;w=800 800w&quot; width=&quot;400&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption w-figcaption--fullbleed&quot;&gt;
    System-level share target picker with an installed PWA called
    &lt;code&gt;Share Target Test&lt;/code&gt; as an option.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;on-the-same-page&quot;&gt;On the same page &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/workbox-share-targets/#on-the-same-page&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&#39;re unfamiliar with how Web Share Target Works, &lt;a href=&quot;https://web.dev/web-share-target/&quot;&gt;Receiving shared data with the Web Share
Target API&lt;/a&gt; gives you an in-depth introduction.
Here&#39;s a quick review.&lt;/p&gt;
&lt;p&gt;There are two parts to implementing web share target functionality. First,
update your &lt;a href=&quot;https://web.dev/add-manifest/&quot;&gt;web app manifest&lt;/a&gt; to indicate that you want your app to be a share
target when installed. The following example directs shares to the &lt;code&gt;/share&lt;/code&gt; url
via a &lt;code&gt;POST&lt;/code&gt; request. It is encoded as a multipart form, with title being called
&lt;code&gt;name&lt;/code&gt;, text being called &lt;code&gt;description&lt;/code&gt;, and JPEG images being called &lt;code&gt;photos&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;…&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;share_target&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;enctype&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;files&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;photos&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;…&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;service-worker-share-targets-with-workbox&quot;&gt;Service worker share targets with Workbox &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/workbox-share-targets/#service-worker-share-targets-with-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While normally handled by a server endpoint, a neat trick you can do for a share
target is to register a route directly in your service worker to handle the
request. This will let your app be a share target without a backend.&lt;/p&gt;
&lt;p&gt;You do this in &lt;a href=&quot;https://developers.google.com/web/tools/workbox&quot; rel=&quot;noopener&quot;&gt;Workbox&lt;/a&gt; by
registering a route that&#39;s handled by your service worker. Start by importing
&lt;code&gt;registerRoute&lt;/code&gt; from &lt;code&gt;&#39;workbox-routing&#39;&lt;/code&gt;. Notice that it&#39;s registered for the
&lt;code&gt;/share&lt;/code&gt; route, the same one listed in the example web app manifest. In
response it calls &lt;code&gt;shareTargetHandler()&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; registerRoute &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-routing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;/share&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  shareTargetHandler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;shareTargetHandler()&lt;/code&gt; function is asynchronous and takes the event, awaits
the form data, then retrieves the media files from that.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;shareTargetHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; formData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mediaFiles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; formData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;media&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mediaFile &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; mediaFiles&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Do something with mediaFile&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Maybe cache it or post it back to a server&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Do something with the rest of formData as you need&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Maybe save it to IndexedDB&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You can then do whatever you&#39;d like with these files. You can cache them. You
can send them somewhere with a fetch request. You can even use the other
manifest options, maybe serving a page with some query parameters for the other
shared items or storing the data and pointers to the media in the &lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/cache-api&quot; rel=&quot;noopener&quot;&gt;Cache Storage
API&lt;/a&gt;
or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API&quot; rel=&quot;noopener&quot;&gt;IndexedDB&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can try it out on the sample app &lt;a href=&quot;https://fugu-journal.web.app/&quot; rel=&quot;noopener&quot;&gt;Fugu
Journal&lt;/a&gt; and see its service worker
implementation in its &lt;a href=&quot;https://github.com/chromeos/bridging-the-native-app-gap/blob/master/fugu-journal/src/js/service-worker.js&quot; rel=&quot;noopener&quot;&gt;source
code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One common thing you might do is hold shared resources until better network
connections are available. Workbox also supports &lt;a href=&quot;https://web.dev/periodic-background-sync/&quot;&gt;periodic background
sync&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/workbox-share-targets/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Share Target API is a simple way to deeply integrate your Progressive Web
App into user&#39;s devices, putting them on-par with platform-specific applications for the
critical task of sharing content between apps. But doing so usually requires a
server available to receive the request. By leveraging Workbox to create a share
target route directly in your service worker, your app is free of this
constraint, allowing Share Target to work for apps while offline and without
backends.&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@ecasap?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; rel=&quot;noopener&quot;&gt;Elaine Casap&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/share?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Sam Richard</name>
    </author><author>
      <name>Joe Medley</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Keeping things fresh with stale-while-revalidate</title>
    <link href="https://web.dev/stale-while-revalidate/"/>
    <updated>2019-07-18T00:00:00Z</updated>
    <id>https://web.dev/stale-while-revalidate/</id>
    <content type="text/html" mode="escaped">&lt;h2 id=&quot;what-shipped&quot;&gt;What shipped? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/stale-while-revalidate/#what-shipped&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc5861#section-3&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;stale-while-revalidate&lt;/code&gt;&lt;/a&gt; helps
developers balance between immediacy—&lt;em&gt;loading cached content right away&lt;/em&gt;—and
freshness—&lt;em&gt;ensuring updates to the cached content are used in the future&lt;/em&gt;. If
you maintain a third-party web service or library that updates on a regular
schedule, or your first-party assets tend to have short lifetimes, then
&lt;code&gt;stale-while-revalidate&lt;/code&gt; may be a useful addition to your existing caching
policies.&lt;/p&gt;
&lt;p&gt;Support for setting &lt;code&gt;stale-while-revalidate&lt;/code&gt; alongside &lt;code&gt;max-age&lt;/code&gt; in your
&lt;code&gt;Cache-Control&lt;/code&gt; response header is available in &lt;a href=&quot;https://chromestatus.com/feature/5050913014153216&quot; rel=&quot;noopener&quot;&gt;Chrome 75&lt;/a&gt;
and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1536511&quot; rel=&quot;noopener&quot;&gt;Firefox 68&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Browsers that don&#39;t support &lt;code&gt;stale-while-revalidate&lt;/code&gt; will silently ignore that
configuration value, and use
&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#max-age&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;max-age&lt;/code&gt;&lt;/a&gt;,
as I&#39;ll explain shortly…&lt;/p&gt;
&lt;h2 id=&quot;what&#39;s-it-mean&quot;&gt;What&#39;s it mean? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/stale-while-revalidate/#what&#39;s-it-mean&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s break down &lt;code&gt;stale-while-revalidate&lt;/code&gt; into two parts: the idea that a cached
response might be stale, and the process of revalidation.&lt;/p&gt;
&lt;p&gt;First, how does the browser know whether a cached response is &amp;quot;stale&amp;quot;? A
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/a&gt;
response header that contains &lt;code&gt;stale-while-revalidate&lt;/code&gt; should also contain
&lt;code&gt;max-age&lt;/code&gt;, and the number of seconds specified via &lt;code&gt;max-age&lt;/code&gt; is what determines
staleness. Any cached response newer than &lt;code&gt;max-age&lt;/code&gt; is considered fresh, and
older cached responses are stale.&lt;/p&gt;
&lt;p&gt;If the locally cached response is still fresh, then it can be used as-is to
fulfill a browser&#39;s request. From the perspective of &lt;code&gt;stale-while-revalidate&lt;/code&gt;,
there&#39;s nothing to do in this scenario.&lt;/p&gt;
&lt;p&gt;But if the cached response is stale, then another age-based check is performed:
is the age of the cached response within the window of time covered by the
&lt;code&gt;stale-while-revalidate&lt;/code&gt; setting?&lt;/p&gt;
&lt;p&gt;If the age of a stale response falls into this window, then it will be used to
fulfill the browser&#39;s request. At the same time, a &amp;quot;revalidation&amp;quot; request will
be made against the network in a way that doesn&#39;t delay the use of the cached
response. The returned response might contain the same information as the
previously cached response, or it might be different. Either way, the network
response is stored locally, replacing whatever was previously cache, and
resetting the &amp;quot;freshness&amp;quot; timer used during any future &lt;code&gt;max-age&lt;/code&gt; comparisons.&lt;/p&gt;
&lt;p&gt;However, if the stale cached response is old enough that it falls outside the
&lt;code&gt;stale-while-revalidate&lt;/code&gt; window of time, then it will not fulfill the browser&#39;s
request. The browser will instead retrieve a response from the network, and use
that for both fulfilling the initial request and also populating the local cache
with a fresh response.&lt;/p&gt;
&lt;h2 id=&quot;live-example&quot;&gt;Live Example &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/stale-while-revalidate/#live-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a simple example of an HTTP API for returning the current time—more
specifically, the current number of minutes past the hour.&lt;/p&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 346px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/s-w-r-demo?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=server.js%3A20%3A15&amp;previewSize=100&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;s-w-r-demo on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;In this scenario, the web server uses this &lt;code&gt;Cache-Control&lt;/code&gt; header in its HTTP response:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Cache-Control: max-age=1, stale-while-revalidate=59&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This setting means that, if a request for the time is repeated within the next 1
second, the previously cached value will still be fresh, and used as-is, without
any revalidation.&lt;/p&gt;
&lt;p&gt;If a request is repeated between 1 and 60 seconds later, then the cached value
will be stale, but will be used to fulfill the API request. At the same time,
&amp;quot;in the background,&amp;quot; a revalidation request will be made to populate the cache
with a fresh value for future use.&lt;/p&gt;
&lt;p&gt;If a request is repeated after more than 60 seconds, then the stale response
isn&#39;t used at all, and both fulfilling the browser&#39;s request and the cache
revalidation will depend on getting a response back from the network.&lt;/p&gt;
&lt;p&gt;Here&#39;s a breakdown of those three distinct states, along with the window of time
in which each of them apply for our example:&lt;/p&gt;
&lt;img alt=&quot;A diagram illustrating the information from the previous section.&quot; decoding=&quot;async&quot; height=&quot;370&quot; loading=&quot;lazy&quot; src=&quot;https://web-dev.imgix.net/image/admin/C8lg2FSEqhTKR6WmYky3.svg&quot; width=&quot;719&quot; /&gt;
&lt;h2 id=&quot;what-are-the-common-use-cases&quot;&gt;What are the common use cases? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/stale-while-revalidate/#what-are-the-common-use-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the above example for a &amp;quot;minutes after the hour&amp;quot; API service is contrived,
it illustrates the expected use case—services that provide information which
needs to be refreshed, but where some degree of staleness is acceptable.&lt;/p&gt;
&lt;p&gt;Less contrived examples might be an API for the current weather conditions, or
the top news headlines that were written in the past hour.&lt;/p&gt;
&lt;p&gt;Generally, any response that updates at a known interval, is likely to be
requested multiple times, and is static within that interval is a good candidate
for short-term caching via &lt;code&gt;max-age&lt;/code&gt;. Using &lt;code&gt;stale-while-revalidate&lt;/code&gt; in addition
to &lt;code&gt;max-age&lt;/code&gt; increases the likelihood that future requests can be fulfilled from
the cache with fresher content, without blocking on a network response.&lt;/p&gt;
&lt;h2 id=&quot;how-does-it-interact-with-service-workers&quot;&gt;How does it interact with service workers? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/stale-while-revalidate/#how-does-it-interact-with-service-workers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&#39;ve heard of &lt;code&gt;stale-while-revalidate&lt;/code&gt; chances are that it was in the
context of
&lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate&quot; rel=&quot;noopener&quot;&gt;recipes&lt;/a&gt;
used within a &lt;a href=&quot;https://web.dev/service-workers-cache-storage/&quot;&gt;service worker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using stale-while-revalidate via a &lt;code&gt;Cache-Control&lt;/code&gt; header shares some
similarities with its use in a service worker, and many of the same
considerations around freshness trade-offs and maximum lifetimes apply. However,
there are a few considerations that you should take into account when deciding
whether to implement a service worker-based approach, or just rely on the
&lt;code&gt;Cache-Control&lt;/code&gt; header configuration.&lt;/p&gt;
&lt;h3 id=&quot;use-a-service-worker-approach-if...&quot;&gt;Use a service worker approach if… &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/stale-while-revalidate/#use-a-service-worker-approach-if...&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You&#39;re already using a service worker in your web app.&lt;/li&gt;
&lt;li&gt;You need fine-grained control over the contents of your caches, and want to
implement something like a least-recently used expiration policy. Workbox&#39;s
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-cache-expiration&quot; rel=&quot;noopener&quot;&gt;Cache Expiration&lt;/a&gt;
module can help with this.&lt;/li&gt;
&lt;li&gt;You want to be notified when a stale response changes in the background during
the revalidation step. Workbox&#39;s
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-broadcast-cache-update&quot; rel=&quot;noopener&quot;&gt;Broadcast Cache Update&lt;/a&gt;
module can help with this.&lt;/li&gt;
&lt;li&gt;You need this &lt;code&gt;stale-while-revalidate&lt;/code&gt; behavior in all modern browsers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;use-a-cache-control-approach-if...&quot;&gt;Use a Cache-Control approach if… &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/stale-while-revalidate/#use-a-cache-control-approach-if...&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You would rather not deal with the overhead of deploying and maintaining a
service worker for your web app.&lt;/li&gt;
&lt;li&gt;You are fine with letting the browser&#39;s automatic cache management prevent
your local caches from growing too large.&lt;/li&gt;
&lt;li&gt;You are fine with an approach that is not currently supported in all modern
browsers (as of July 2019; support may grow in the future).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&#39;re using a service worker and also have &lt;code&gt;stale-while-revalidate&lt;/code&gt; enabled
for some responses via a &lt;code&gt;Cache-Control&lt;/code&gt; header, then the service worker will,
in general, have &amp;quot;first crack&amp;quot; at responding to a request. If the service worker
decides not to respond, or if in the process of generating a response it makes a
network request using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;,
then the behavior configured via the &lt;code&gt;Cache-Control&lt;/code&gt; header will end up going
into effect.&lt;/p&gt;
&lt;h2 id=&quot;learn-more&quot;&gt;Learn more &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/stale-while-revalidate/#learn-more&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fetch.spec.whatwg.org/#concept-stale-while-revalidate-response&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;stale-while-revalidate&lt;/code&gt; response&lt;/a&gt;
in the Fetch API spec.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc5861&quot; rel=&quot;noopener&quot;&gt;RFC 5861&lt;/a&gt;, covering the initial
&lt;code&gt;stale-while-revalidate&lt;/code&gt; specification.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;The HTTP cache: your first line of defense&lt;/a&gt;, from the &amp;quot;Network
reliability&amp;quot; guide on this site.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Hero image by Samuel Zeller.&lt;/em&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Bringing service workers to Google Search</title>
    <link href="https://web.dev/google-search-sw/"/>
    <updated>2019-06-20T00:00:00Z</updated>
    <id>https://web.dev/google-search-sw/</id>
    <content type="text/html" mode="escaped">&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#background&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Search for just about any topic on Google, and you&#39;re presented with an
instantly recognizable page of meaningful, relevant results. What you probably
&lt;em&gt;didn&#39;t&lt;/em&gt; realize is that this search results page is, under certain scenarios,
served by a powerful piece of web technology called a
&lt;a href=&quot;https://web.dev/service-workers-cache-storage/&quot;&gt;service worker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rolling out service worker support for Google Search without negatively
impacting the performance required dozens of engineers working across multiple
teams. This is the story of what shipped, how performance was measured, and what
tradeoffs were made.&lt;/p&gt;
&lt;h2 id=&quot;key-reasons-for-exploring-service-workers&quot;&gt;Key reasons for exploring service workers &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#key-reasons-for-exploring-service-workers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Adding a service worker to a web app, just like making any architectural change
to your site, should be done with a clear set of goals in mind. For the Google
Search team, there were a few key reasons why adding a service worker was worth
exploring.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;A service worker is extra code that sits in between your web app and
the network, and running that code isn&#39;t free, so you need to make sure that
what you&#39;re doing inside the service worker adds enough of a caching or
functionality benefit to justify the cost of running the code. (This &lt;a href=&quot;https://www.youtube.com/watch?v=25aCD5XL1Jk&quot; rel=&quot;noopener&quot;&gt;talk&lt;/a&gt;
at the Chrome Dev Summit 2018 does a great job of exploring that idea in more
detail.) An upfront understanding what you hope to achieve—and then collecting a
full set of metrics to ensure that you&#39;ve actually achieved it—should be the
first step in your service worker journey.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;limited-search-result-caching&quot;&gt;Limited search result caching &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#limited-search-result-caching&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Google Search team found that it&#39;s common for users to search for the
same terms more than once within a short period of time. Rather than trigger a
new backend request just to get what&#39;s likely to be the same results, the Search
team wanted to take advantage of caching and fulfill those repeat requests
locally.&lt;/p&gt;
&lt;p&gt;The importance of freshness can&#39;t be discounted, and sometimes users search for
the same terms repeatedly because it&#39;s an evolving topic, and they expect to see
fresh results. Using a service worker allows the Search team to implement
fine-grained logic to control the lifetime of locally cached search results, and
achieve the exact balance of speed vs. freshness that they believe best serves
users.&lt;/p&gt;
&lt;h3 id=&quot;meaningful-offline-experience&quot;&gt;Meaningful offline experience &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#meaningful-offline-experience&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Additionally, the Google Search team wanted to provide a meaningful offline
experience. When a user wants to find out about a topic, they want to go
straight to the Google Search page and start searching, without worrying about
an active Internet connection.&lt;/p&gt;
&lt;p&gt;Without a service worker, visiting the Google search page while offline would
just lead to the browser&#39;s standard network error page, and users would have to
remember to come back and try again once their connection returned. With a
service worker, it&#39;s possible to serve a custom offline HTML response, and allow
users to enter their search query immediately.&lt;/p&gt;
&lt;img alt=&quot;A screenshot of the background retry interface.&quot; decoding=&quot;async&quot; height=&quot;634&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 343px) 343px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/Q60UfWp6FNp0b9vbqJXc.png?auto=format&amp;w=686 686w&quot; width=&quot;343&quot; /&gt;
&lt;p&gt;The results won&#39;t be available until there&#39;s an Internet connection, but the
service worker allows the search to be deferred and sent to Google&#39;s servers as
soon as the device goes back online using the
&lt;a href=&quot;https://developers.google.com/web/updates/2015/12/background-sync&quot; rel=&quot;noopener&quot;&gt;background sync API&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;smarter-javascript-caching-and-serving&quot;&gt;Smarter JavaScript caching and serving &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#smarter-javascript-caching-and-serving&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another motivation was to optimize the caching and loading of the modularized
JavaScript code that powers the various types of features on the search results
page. There are a number of benefits offered by JavaScript bundling that make
sense when there&#39;s no service worker involvement, so the Search team did not
want to simply stop bundling entirely.&lt;/p&gt;
&lt;p&gt;By using a service worker&#39;s ability to version and cache fine-grained chunks of
JavaScript at runtime, the Search team suspected that they could reduce the
amount of cache churn and ensure that JavaScript reused in the
future can be cached efficiently. The logic inside of their service worker can
analyze an outgoing HTTP request for a bundle that contains multiple JavaScript
modules, and fulfill it by piecing together multiple, locally cached
modules—effectively &amp;quot;unbundling&amp;quot; when possible. This saves user bandwidth, and
improves overall responsiveness.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--success&quot;&gt;
&lt;p&gt;&lt;strong&gt;Success&lt;/strong&gt;:
On average, repeat visits handled by the service worker
result in &lt;strong&gt;half as much new JavaScript downloaded&lt;/strong&gt;, and that directly leads to
&lt;strong&gt;6% fewer delayed user interactions&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There are also performance benefits of using cached JavaScript served by a
service worker: in Chrome, &lt;a href=&quot;https://v8.dev/blog/code-caching-for-devs#use-service-worker-caches&quot; rel=&quot;noopener&quot;&gt;a parsed, byte code representation&lt;/a&gt;
of that JavaScript is stored and reused, leading to less work that needs to be
done at runtime in order to execute the JavaScript on the page.&lt;/p&gt;
&lt;h2 id=&quot;challenges-and-solutions&quot;&gt;Challenges and solutions &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#challenges-and-solutions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are a few of the hurdles that needed to be overcome in order to achieve the
team&#39;s stated goals. While some of these challenges are specific to Google
Search, many of them are applicable to a wide range of sites that might be
considering a service worker deployment.&lt;/p&gt;
&lt;h3 id=&quot;problem:-service-worker-overhead&quot;&gt;Problem: service worker overhead &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#problem:-service-worker-overhead&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The biggest challenge, and the one true blocker for launching a service worker
on Google Search, was to ensure that it did not do anything that might increase
user-perceived latency. Google Search takes performance &lt;em&gt;very&lt;/em&gt; seriously, and in
the past, has blocked launches of new functionality if it contributed even tens
of milliseconds of additional latency for a given user population.&lt;/p&gt;
&lt;p&gt;When the team started collecting performance data during their earliest
experiments, it became obvious that there would be a problem. The HTML returned
in response to
&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests&quot; rel=&quot;noopener&quot;&gt;navigation requests&lt;/a&gt;
for the search result page is dynamic, and varies greatly depending on logic
that needs to run on Search&#39;s web servers. There&#39;s currently no way for the
service worker to replicate this logic and return cached HTML immediately—the
best it could do is to pass along navigation requests to the backend web
servers, which necessitates a network request.&lt;/p&gt;
&lt;p&gt;Without a service worker, this network request happens immediately upon user
navigation. When a service worker is registered, it always needs to be started
up and given a chance to execute its
&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/#cache_and_return_requests&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;fetch&lt;/code&gt; event handlers&lt;/a&gt;,
even when there&#39;s no chance those fetch handlers will do anything other than go
to the network. The amount of time that it takes to start up and run the service
worker code is pure overhead added on top of every navigation:&lt;/p&gt;
&lt;img alt=&quot;An illustration of the SW startup blocking the navigation request.&quot; decoding=&quot;async&quot; height=&quot;96&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 768px) 768px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/W9v9DmCDOo6VJp7gOXPB.png?auto=format&amp;w=1536 1536w&quot; width=&quot;768&quot; /&gt;
&lt;p&gt;This puts the service worker implementation at too much of a latency
disadvantage to justify any other benefits. Additionally, the team found that,
based on measuring service worker boot times on real-world devices, there was a
wide distribution of startup times, with some low-end mobile devices taking
almost as much time to start up the service worker as it might take to make the
network request for the results page&#39;s HTML.&lt;/p&gt;
&lt;h3 id=&quot;solution:-use-navigation-preload&quot;&gt;Solution: use navigation preload &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#solution:-use-navigation-preload&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The single, most crucial feature that allowed the Google Search team to move
ahead with their service worker launch is
&lt;a href=&quot;https://developers.google.com/web/updates/2017/02/navigation-preload&quot; rel=&quot;noopener&quot;&gt;navigation preload&lt;/a&gt;.
Using navigation preload is a key performance win for any service worker that
needs to use a response from the network to satisfy navigation requests. It
provides a hint to the browser to start making the navigation request
immediately, at the same time as the service worker starts up:&lt;/p&gt;
&lt;img alt=&quot;An illustration of the SW startup done in parallel with the navigation request.&quot; decoding=&quot;async&quot; height=&quot;179&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 614px) 614px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/rFkXhIK4xLREiROkxITA.png?auto=format&amp;w=1228 1228w&quot; width=&quot;614&quot; /&gt;
&lt;p&gt;As long as the amount of time it takes for the service worker to start up is
less than the amount of time it takes to get a response back from the network,
there shouldn&#39;t be any latency overhead introduced by the service worker.&lt;/p&gt;
&lt;p&gt;The Search team also needed to avoid using a service worker on low-end mobile
devices where the service worker boot time could exceed the navigation request.
Since there&#39;s no hard-and-fast rule for what constitutes a &amp;quot;low-end&amp;quot; device,
they came up with the heuristic of
&lt;a href=&quot;https://developers.google.com/web/updates/2017/12/device-memory&quot; rel=&quot;noopener&quot;&gt;checking the total RAM&lt;/a&gt;
installed on the device. Anything less than 2 gigabytes of memory fell into
their low-end device category, where service worker startup time would be unacceptable.&lt;/p&gt;
&lt;p&gt;Available storage space is another consideration, since the full set of
resources to be cached for future use can run to several megabytes. The
&lt;a href=&quot;https://developers.google.com/web/updates/2017/08/estimating-available-storage-space&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;navigator.storage&lt;/code&gt; interface&lt;/a&gt;
allows the Google Search page to figure out in advance whether their attempts to
cache data run the risk of failing due to storage quota failures.&lt;/p&gt;
&lt;p&gt;This left the Search team with multiple pieces of criteria that they could use
to determine whether or not to use a service worker: if a user comes to the
Google Search page using a browser that supports navigation preload, and has at
least 2 gigabytes of RAM, and enough free storage space, then a
&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#the_first_service_worker&quot; rel=&quot;noopener&quot;&gt;service worker is registered&lt;/a&gt;.
Browsers or devices that don&#39;t meet that criteria won&#39;t end up with a service
worker, but they&#39;ll still see the same Google Search experience as they always
have.&lt;/p&gt;
&lt;p&gt;One side benefit of this selective registration is the ability to ship a
smaller, more efficient service worker. Targeting fairly modern browsers to run
the service worker code eliminates the overhead of transpilation and polyfills
for older browsers. This ended up cutting out around 8 kilobytes of uncompressed
JavaScript code from the total size of the service worker&#39;s implementation.&lt;/p&gt;
&lt;h3 id=&quot;problem:-service-worker-scopes&quot;&gt;Problem: service worker scopes &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#problem:-service-worker-scopes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once the Search team ran enough latency experiments and were confident that
using navigation preload offered them a viable, latency-neutral path for using a
service worker, some practical issues started moving to the forefront. One of
those issues has to do with service worker&#39;s
&lt;a href=&quot;https://developers.google.com/web/ilt/pwa/introduction-to-service-worker#registration_and_scope&quot; rel=&quot;noopener&quot;&gt;scoping rules&lt;/a&gt;.
A service worker&#39;s scope determines which pages it can potentially take control
of.&lt;/p&gt;
&lt;p&gt;Scoping works based on the URL path prefix. For domains that host a single
web app, this isn&#39;t an issue, as you&#39;d normally just use a service worker with
the maximal scope of &lt;code&gt;/&lt;/code&gt;, which could take control of any page under the domain.
But Google Search&#39;s URL structure is a little more complicated.&lt;/p&gt;
&lt;p&gt;If the service worker were given the maximal scope of &lt;code&gt;/&lt;/code&gt;, it would end up being
able to take control of any page hosted under &lt;code&gt;www.google.com&lt;/code&gt; (or the regional
equivalent), and there are URLs under that domain that have nothing to do with
Google Search. A more reasonable, restrictive scope would be &lt;code&gt;/search&lt;/code&gt;, which at
least would eliminate URLs completely unrelated to search results.&lt;/p&gt;
&lt;p&gt;Unfortunately, even that &lt;code&gt;/search&lt;/code&gt; URL path is shared amongst different flavor
of Google Search results, with URL query parameters determining which specific
type of search result is shown. Some of those flavors use completely different
codebases than the traditional web search result page. For example, Image Search
and Shopping Search are both served under the &lt;code&gt;/search&lt;/code&gt; URL path with different
query parameters, but neither of those interfaces were ready to ship their own
service worker experience (yet).&lt;/p&gt;
&lt;h3 id=&quot;solution:-create-a-dispatch-and-routing-framework&quot;&gt;Solution: create a dispatch and routing framework &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#solution:-create-a-dispatch-and-routing-framework&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While there are &lt;a href=&quot;https://github.com/w3c/ServiceWorker/issues/1373&quot; rel=&quot;noopener&quot;&gt;some proposals&lt;/a&gt;
that allow for something more powerful than URL path prefixes to determine
service worker scopes, the Google Search team was stuck deploying a service
worker that did nothing for a subset of pages it controlled.&lt;/p&gt;
&lt;p&gt;To work around this, the Google Search team built up a bespoke dispatch and
routing framework that could be configured to check for criteria like the query
parameters of the client page, and use those to determine which specific code
path to go down. Rather than hardcoding rules, the system was built to be
flexible and allow teams that share the URL space, like Image Search and
Shopping Search, to drop in their own service worker logic down the line, if
they decide to implement it.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;While this custom solution is internal to Google, the same general principle can
be applied to any domain that includes a number of different logical web apps,
all of whom live under a common URL.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;problem:-personalized-results-and-metrics&quot;&gt;Problem: personalized results and metrics &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#problem:-personalized-results-and-metrics&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Users can sign in to Google Search using their Google Accounts, and their search
results experience may be customized based on their particular account data.
Logged in users are identified by specific &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies&quot; rel=&quot;noopener&quot;&gt;browser cookies&lt;/a&gt;,
which is a venerable and widely-supported standard.&lt;/p&gt;
&lt;p&gt;One downside of using browser cookies, though, is that they are not exposed
inside of a service worker, and there is no way of automatically examining their
values and ensuring that they have not changed due to a user logging out or
switching accounts. (There is effort underway to
&lt;a href=&quot;https://developers.google.com/web/updates/2018/09/asynchronous-access-to-http-cookies#welcome_service_workers&quot; rel=&quot;noopener&quot;&gt;bring cookie access to service workers&lt;/a&gt;,
but as of this writing, the approach is
&lt;a href=&quot;https://developers.google.com/web/updates/2018/09/asynchronous-access-to-http-cookies#origin-trial&quot; rel=&quot;noopener&quot;&gt;experimental&lt;/a&gt;
and is not widely supported.)&lt;/p&gt;
&lt;p&gt;A mismatch between the service worker&#39;s view of the current logged in user and
the actual user logged in to the Google Search web interface could lead to
incorrectly personalized search results or misattributed metrics and logging.
Any of those failure scenarios would be a serious issue for the Google Search
team.&lt;/p&gt;
&lt;h3 id=&quot;solution:-send-cookies-using-postmessage&quot;&gt;Solution: send cookies using postMessage &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#solution:-send-cookies-using-postmessage&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Rather than wait for experimental APIs to launch and provide direct access to
the browser&#39;s cookies inside of a service worker, the Google Search team went
with a stop-gap solution: whenever a page controlled by the service worker is
loaded, the page reads the relevant cookies and uses
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;postMessage()&lt;/code&gt;&lt;/a&gt;
to send them to the service worker.&lt;/p&gt;
&lt;p&gt;The service worker then checks the current cookie value against the value
that it expects, and if there&#39;s a mismatch, it takes steps to purge any
user-specific data from its storage, and reloads the search results page without
any incorrect personalization.&lt;/p&gt;
&lt;p&gt;The specific steps that the service worker takes to reset things to a baseline
are particular to Google Search&#39;s requirements, but the same general approach
may be useful to other developers who deal with personalized data keyed off of
browsers cookies.&lt;/p&gt;
&lt;h3 id=&quot;problem:-experiments-and-dynamism&quot;&gt;Problem: experiments and dynamism &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#problem:-experiments-and-dynamism&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned, the Google Search team relies heavily on running experiments in
production, and testing the effects of new code and features in the real world
before turning them on by default. This can be a bit of a challenge with a
static service worker that relies heavily on cached data, since opting users in
and out of experiments often requires communication with the backend server.&lt;/p&gt;
&lt;h3 id=&quot;solution:-dynamically-generated-service-worker-script&quot;&gt;Solution: dynamically generated service worker script &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#solution:-dynamically-generated-service-worker-script&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The solution that the team went with was to use a dynamically generated service
worker script, customized by the web server for each individual user, instead of
a single, static service worker script that gets generated ahead of time.
Information about experiments that might affect the service worker&#39;s behavior or
network requests in general are included directly in this customized service
worker scripts. Changing the sets of active experiences for a user is done via a
combination of traditional techniques, like browser cookies, as well as serving
updated code in the registered service worker URL.&lt;/p&gt;
&lt;p&gt;Using a dynamically generated service worker script also makes it easier to
provide an escape hatch in the unlikely event that a service worker
implementation has a fatal bug that needs to be avoided. The dynamic server
worker response could be a &lt;a href=&quot;https://stackoverflow.com/a/38980776/385997&quot; rel=&quot;noopener&quot;&gt;no-op implementation&lt;/a&gt;,
effectively disabling the service worker for some or all of the current users.&lt;/p&gt;
&lt;h3 id=&quot;problem:-coordinating-updates&quot;&gt;Problem: coordinating updates &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#problem:-coordinating-updates&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the toughest challenges facing any real-world service worker deployment
is to devise a reasonable tradeoff between avoiding the network in favor of the
cache, while at the same time, ensuring that existing users get critical updates
and changes soon after they&#39;re deployed to production. The right balance depends
on a lot of factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whether your web app is a long-lived &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot; rel=&quot;noopener&quot;&gt;single page app&lt;/a&gt;
that a user keeps open indefinitely, without navigating to new pages.&lt;/li&gt;
&lt;li&gt;What the deployment cadence is for updates to your backend web server.&lt;/li&gt;
&lt;li&gt;Whether the average user would tolerate using a slightly out-of-date version
of your web app, or whether freshness is the top priority.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While experimenting with service workers, the Google Search team made sure to
keep the experiments running across a number of scheduled backend updates, to
ensure that the metrics and user experience would more closely match what return
users would end up seeing in the real-world.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--caution&quot;&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;:
It&#39;s important to remember that shipping a service worker
is &lt;strong&gt;not a one-time deployment&lt;/strong&gt;—you need to have a process in place, tailored to
your own production infrastructure, to make sure that updates happen smoothly
over time!&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;solution:-balance-freshness-and-cache-utilization&quot;&gt;Solution: balance freshness and cache-utilization &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#solution:-balance-freshness-and-cache-utilization&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After testing a number of different configuration options, the Google Search
team found that the following setup provided the right balance between freshness
and cache-utilization.&lt;/p&gt;
&lt;p&gt;The service worker script URL is served with the
&lt;code&gt;Cache-Control: private, max-age=1500&lt;/code&gt; (1500 seconds, or 25 minutes) response
header, and is
&lt;a href=&quot;https://developers.google.com/web/updates/2018/06/fresher-sw#updateviacache&quot; rel=&quot;noopener&quot;&gt;registered with updateViaCache set to &#39;all&#39;&lt;/a&gt;
to ensure that the header is honored. The Google Search web backend is, as you
might imagine, a large, globally distributed set of servers that requires as
close to 100% uptime as possible. Deploying a change that would affect the
service worker script&#39;s contents is done in a rolling fashion.&lt;/p&gt;
&lt;p&gt;If a user hits a backend that has been updated, and then quickly navigates to
another page which hits a backend that hasn&#39;t yet received the updated service
worker, they&#39;d end up flip-flopping between versions multiple times. Therefore,
telling the browser to only bother checking for an updated script if 25 minutes
has passed since the last check does not have a significant downside. The upside
of opting-in to this behavior is cutting down significantly on the traffic
received by the endpoint that dynamically generates the service worker script.&lt;/p&gt;
&lt;p&gt;Additionally, an ETag header is set on the service worker script&#39;s HTTP
response, ensuring that when an update check is made after 25 minutes has
passed, the server can respond efficiently with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304&quot; rel=&quot;noopener&quot;&gt;HTTP 304&lt;/a&gt;
response if there haven&#39;t been any updates to the service worker deployed in the
interim.&lt;/p&gt;
&lt;p&gt;While some interactions within the Google Search web app use single page
app-style navigations (i.e. via the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot; rel=&quot;noopener&quot;&gt;History API&lt;/a&gt;),
for the most part, Google Search is a traditional web app that uses &amp;quot;real&amp;quot;
navigations. This comes into play when the team decided that it would be
effective to use two options that accelerate the service worker update
lifecycle:
&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#clientsclaim&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;clients.claim()&lt;/code&gt;&lt;/a&gt;
and
&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#skip_the_waiting_phase&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;skipWaiting()&lt;/code&gt;&lt;/a&gt;.
Clicking around Google Search&#39;s interface generally ends up navigating to new
HTML documents. Calling &lt;code&gt;skipWaiting&lt;/code&gt; ensures that an updated service worker
gets a chance to handle those new navigation requests immediately after
installation. Similarly, calling &lt;code&gt;clients.claim()&lt;/code&gt; means that the updated
service worker gets a chance to start controlling any open Google Search pages
that are uncontrolled, following service worker activation.&lt;/p&gt;
&lt;p&gt;The approach that Google Search went with isn&#39;t necessarily a solution that
works for everyone—it was the result of carefully A/B testing various
combinations of serving options until they found what worked best for them.
Developers whose backend infrastructure allow them to deploy updates more
quickly might prefer that the browser check for an updated service worker script
as frequently as possible, by
&lt;a href=&quot;https://developers.google.com/web/updates/2018/06/fresher-sw#whats_changing&quot; rel=&quot;noopener&quot;&gt;always ignoring the HTTP cache&lt;/a&gt;.
If you&#39;re building a single page app that users will might keep open for a long
period of time, using &lt;code&gt;skipWaiting()&lt;/code&gt; is probably not the right choice for
you—you
&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#skip_the_waiting_phase&quot; rel=&quot;noopener&quot;&gt;risk running into cache inconsistencies&lt;/a&gt;
if you allow the new service worker to activate while there are long-lived
clients.&lt;/p&gt;
&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#key-takeaways&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;by-default-service-workers-aren&#39;t-performance-neutral&quot;&gt;By default, service workers aren&#39;t performance neutral &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#by-default-service-workers-aren&#39;t-performance-neutral&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Adding a service worker to your web app means inserting an additional piece of
JavaScript that needs to be loaded and executed before your web app gets
responses to its requests. If those responses end up coming from a local cache
rather than from the network, then the overhead of running the service worker
is usually negligible in comparison to the performance win from going
cache-first. But if you know that your service worker always has to
consult the network when handling navigation requests, using navigation preload
is a crucial performance win.&lt;/p&gt;
&lt;h3 id=&quot;service-workers-are-(still!)-a-progressive-enhancement&quot;&gt;Service workers are (still!) a progressive enhancement &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#service-workers-are-(still!)-a-progressive-enhancement&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The service worker support story is much brighter today than it was even a year
ago. All modern browsers now feature at least some
&lt;a href=&quot;https://jakearchibald.github.io/isserviceworkerready/&quot; rel=&quot;noopener&quot;&gt;support for service workers&lt;/a&gt;,
but unfortunately, there are some advanced service worker features—like
background sync and navigation preload—that aren&#39;t rolled out universally.
Feature checking for the specific subset of features that you know you need, and
only registering a service worker when those are present, is still a reasonable
approach to take.&lt;/p&gt;
&lt;p&gt;Similarly, if you&#39;ve run experiments in the wild, and know that low-end devices
end up performing poorly with the additional overhead of a service worker, you
can abstain from registering a service worker in those scenarios as well.&lt;/p&gt;
&lt;p&gt;You should continue to treat service workers as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Progressive_enhancement&quot; rel=&quot;noopener&quot;&gt;progressive enhancement&lt;/a&gt;
that gets added to a web app when all the prerequisites are met and the service
worker adds something positive to user experience and overall loading
performance.&lt;/p&gt;
&lt;h3 id=&quot;measure-everything&quot;&gt;Measure everything &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#measure-everything&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The only way you can figure out whether shipping a service worker has had a
positive or negative impact on your users&#39; experiences is to experiment and
measure the results.&lt;/p&gt;
&lt;p&gt;The specifics of setting up meaningful measurements depends on what
analytics provider you&#39;re using, and how you normally conduct experiments in
your deployment setup. One approach, using Google Analytics to collect metrics,
is detailed in
&lt;a href=&quot;https://developers.google.com/web/showcase/2016/service-worker-perf&quot; rel=&quot;noopener&quot;&gt;this case study&lt;/a&gt;
based on the experience using service workers in the Google I/O web app.&lt;/p&gt;
&lt;h2 id=&quot;non-goals&quot;&gt;Non-goals &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#non-goals&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While many in the web development community associate service workers with &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot; rel=&quot;noopener&quot;&gt;Progressive Web Apps&lt;/a&gt;,
building a &amp;quot;Google Search PWA&amp;quot; was not an initial goal of the team. The Google
Search web app doesn&#39;t currently provide metadata via a
&lt;a href=&quot;https://developers.google.com/web/fundamentals/web-app-manifest/&quot; rel=&quot;noopener&quot;&gt;web app manifest&lt;/a&gt;,
nor does it encourage users to go through the
&lt;a href=&quot;https://developers.google.com/web/fundamentals/app-install-banners/&quot; rel=&quot;noopener&quot;&gt;Add to Home Screen flow&lt;/a&gt;.
The Search team is currently satisfied with users coming to their web app via
the traditional entry points for Google Search.&lt;/p&gt;
&lt;p&gt;Rather than trying to turn the Google Search web experience into the equivalent
of what you&#39;d expect from an installed application, the focus on the initial
roll out was to progressively enhance the existing web site.&lt;/p&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/google-search-sw/#acknowledgements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks to the entire Google Search web development team for their work on the
service worker implementation, and for sharing the background material that went
into writing this article. Particular thanks goes to Philippe Golle, Rajesh
Jagannathan, R. Samuel Klatchko, Andy Martone, Leonardo Peña, Rachel Shearer,
Greg Terrono, and Clay Woolam.&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Code splitting with React.lazy and Suspense</title>
    <link href="https://web.dev/code-splitting-suspense/"/>
    <updated>2019-04-29T00:00:00Z</updated>
    <id>https://web.dev/code-splitting-suspense/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;If you don&#39;t yet understand the basic idea behind code splitting, refer to
&lt;a href=&quot;https://web.dev/reduce-javascript-payloads-with-code-splitting&quot;&gt;Reduce JavaScript payloads with code splitting&lt;/a&gt;
guide first.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;React.lazy&lt;/code&gt;&lt;/strong&gt; method makes it easy to code-split a React application on a
component level using dynamic imports.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; lazy &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; AvatarComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./AvatarComponent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;DetailsComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AvatarComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;why-is-this-useful&quot;&gt;Why is this useful? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/code-splitting-suspense/#why-is-this-useful&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A large React application will usually consist of many components, utility
methods, and third-party libraries. If an effort isn&#39;t made to try to load
different parts of an application only when they&#39;re needed, a single, large
bundle of JavaScript will be shipped to your users as soon as they load the
first page. This can affect page performance significantly.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;React.lazy&lt;/code&gt; function provides a built-in way to separate components in an
application into separate chunks of JavaScript with very little legwork. You can
then take care of loading states when you couple it with the &lt;code&gt;Suspense&lt;/code&gt;
component.&lt;/p&gt;
&lt;h2 id=&quot;suspense&quot;&gt;Suspense &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/code-splitting-suspense/#suspense&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The problem with shipping a large JavaScript payload to users is the length of
time it would take for the page to finish loading, especially on weaker devices
and network connections. This is why code splitting and lazy loading is
extremely useful.&lt;/p&gt;
&lt;p&gt;However, there will always be a slight delay that users have to experience when
a code-split component is being fetched over the network, so it&#39;s important to
display a useful loading state. Using &lt;code&gt;React.lazy&lt;/code&gt; with the &lt;strong&gt;&lt;code&gt;Suspense&lt;/code&gt;&lt;/strong&gt;
component helps solve this problem.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; lazy&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Suspense &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; AvatarComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./AvatarComponent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;renderLoader&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Loading&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;DetailsComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AvatarComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;Suspense&lt;/code&gt; accepts a &lt;code&gt;fallback&lt;/code&gt; component which allows you to display any React
component as a loading state. The following example shows how this works.
The avatar is only rendered when the button is clicked, where a request is
then made to retrieve the code necessary for the suspended &lt;code&gt;AvatarComponent&lt;/code&gt;.
In the meantime, the fallback loading component is shown.&lt;/p&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 480px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/react-lazy-suspense?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=src%2Findex.css&amp;previewSize=100&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;react-lazy-suspense on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;In here, the code that makes up &lt;code&gt;AvatarComponent&lt;/code&gt; is small which is
why the loading spinner only shows for a short amount of time. Larger
components can take much longer to load, especially on
weak network connections.&lt;/p&gt;
&lt;p&gt;To better demonstrate how this works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To preview the site, press &lt;strong&gt;View App&lt;/strong&gt;. Then press
&lt;strong&gt;Fullscreen&lt;/strong&gt;
&lt;img src=&quot;https://web.dev/images/glitch/fullscreen.svg&quot; alt=&quot;fullscreen&quot; style=&quot;padding: 4px 8px; opacity: .5; border: 1px solid #c3c3c3; border-radius: 5px;&quot; /&gt;.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Control+Shift+J&lt;/code&gt; (or &lt;code&gt;Command+Option+J&lt;/code&gt; on Mac) to open DevTools.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Network&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Throttling&lt;/strong&gt; dropdown, which is set to &lt;strong&gt;No throttling&lt;/strong&gt; by default. Select &lt;strong&gt;Fast 3G&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Click Me&lt;/strong&gt; button in the app.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The loading indicator will show for longer now. Notice how all the code that
makes up the &lt;code&gt;AvatarComponent&lt;/code&gt; is fetched as a separate chunk.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;DevTools network panel showing one chunk.js file being downloaded&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;478&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ga9IsnuJoJdnUfE6sGee.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;React does not currently support Suspense when components are being server-side
rendered. If you are rendering on the server, consider using another library
such as
&lt;a href=&quot;https://www.smooth-code.com/open-source/loadable-components/docs/server-side-rendering/&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;loadable-components&lt;/code&gt;&lt;/a&gt;
which is recommended in the React docs.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;suspending-multiple-components&quot;&gt;Suspending multiple components &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/code-splitting-suspense/#suspending-multiple-components&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another feature of &lt;code&gt;Suspense&lt;/code&gt; is that it allows you to suspend multiple
components from loading, &lt;strong&gt;even if they are all lazy loaded&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; lazy&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Suspense &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; AvatarComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./AvatarComponent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; InfoComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./InfoComponent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; MoreInfoComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./MoreInfoComponent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;renderLoader&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Loading&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;DetailsComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AvatarComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InfoComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MoreInfoComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This is an extremely useful way to delay rendering of multiple components while
only showing a single loading state. Once all the components have finished
fetching, the user gets to see them all displayed at the same time.&lt;/p&gt;
&lt;p&gt;You can see this with the following embed:&lt;/p&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 480px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/react-lazy-suspense-multiple?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=src%2Findex.css&amp;previewSize=100&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;react-lazy-suspense-multiple on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Loading indicator showing a little too quickly?
Try simulating a throttled connection in DevTools again.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Without this, it&#39;s easy to run into the problem of &lt;em&gt;staggered loading&lt;/em&gt;, or
different parts of a UI loading one after the other with each having their own
loading indicator. This can make the user experience feel more jarring.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Although using Suspense to split components is already possible and makes it
easy to trim down bundle sizes, the React team is continuing to work on
more features that would extend this even further. The
&lt;a href=&quot;https://reactjs.org/blog/2018/11/27/react-16-roadmap.html&quot; rel=&quot;noopener&quot;&gt;React 16.x roadmap&lt;/a&gt;
explains this in more detail.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;handle-loading-failures&quot;&gt;Handle loading failures &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/code-splitting-suspense/#handle-loading-failures&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Suspense&lt;/code&gt; allows you to display a temporary loading state while network
requests are made under the hood. But what if those network requests fail for
some reason? You might be offline, or perhaps your web app is attempting to
lazy-load a &lt;a href=&quot;https://web.dev/http-cache/#long-lived-caching-for-versioned-urls&quot;&gt;versioned URL&lt;/a&gt;
that is out of date, and no longer available following a server redeployment.&lt;/p&gt;
&lt;p&gt;React has a standard pattern for gracefully handling these types of loading
failures: using an error boundary. As described &lt;a href=&quot;https://reactjs.org/docs/error-boundaries.html&quot; rel=&quot;noopener&quot;&gt;in the documentation&lt;/a&gt;,
any React component can serve as an error boundary if it implements either (or
both) of the lifecycle methods &lt;code&gt;static getDerivedStateFromError()&lt;/code&gt; or
&lt;code&gt;componentDidCatch()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To detect and handle lazy-loading failures, you can wrap your &lt;code&gt;Suspense&lt;/code&gt;
component with a parent components that serves as an error boundary. Inside the
error boundary&#39;s &lt;code&gt;render()&lt;/code&gt; method, you can render the children as-is if there&#39;s
no error, or render a custom error message if something goes wrong:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; lazy&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Suspense &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; AvatarComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./AvatarComponent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; InfoComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./InfoComponent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; MoreInfoComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./MoreInfoComponent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;renderLoader&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Loading&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ErrorBoundary&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;hasError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDerivedStateFromError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;hasError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hasError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Loading failed&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Please reload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;DetailsComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ErrorBoundary&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Suspense fallback&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AvatarComponent &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;InfoComponent &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MoreInfoComponent &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Suspense&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ErrorBoundary&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/code-splitting-suspense/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are unsure where to begin applying code splitting to your React
application, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Begin at the route level. Routes are the simplest way to identify points of
your application that can be split. The
&lt;a href=&quot;https://reactjs.org/docs/code-splitting.html#route-based-code-splitting&quot; rel=&quot;noopener&quot;&gt;React docs&lt;/a&gt;
show how &lt;code&gt;Suspense&lt;/code&gt; can be used along with
&lt;a href=&quot;https://github.com/ReactTraining/react-router&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;react-router&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Identify any large components on a page on your site that only render on
certain user interactions (like clicking a button). Splitting these
components will minimize your JavaScript payloads.&lt;/li&gt;
&lt;li&gt;Consider splitting anything else that is offscreen and not critical for the
user.&lt;/li&gt;
&lt;/ol&gt;
</content>
    <author>
      <name>Houssein Djirdeh</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Explore DevTools Network panel</title>
    <link href="https://web.dev/codelab-explore-network-panel/"/>
    <updated>2018-11-05T00:00:00Z</updated>
    <id>https://web.dev/codelab-explore-network-panel/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This codelab uses Chrome DevTools.
&lt;a href=&quot;https://www.google.com/chrome&quot; rel=&quot;noopener&quot;&gt;Download Chrome&lt;/a&gt; if you don&#39;t already have it.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This codelab walks you through the process of interpreting all of the network
traffic for a somewhat complex sample application. At the end of the exercise,
you&#39;ll have the skills you need to figure out &lt;em&gt;what&lt;/em&gt; your own web application is
loading and &lt;em&gt;when&lt;/em&gt; it&#39;s making each request.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The screenshots and instructions in this codelab assume that you&#39;re using
Chrome. Each browser has its own DevTools experience, which might not match what
you see in this codelab.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;navigate-to-the-network-panel&quot;&gt;Navigate to the Network Panel &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-explore-network-panel/#navigate-to-the-network-panel&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Navigate to the Network panel to see the network traffic for the demo
application.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To preview the site, press &lt;strong&gt;View App&lt;/strong&gt;. Then press
&lt;strong&gt;Fullscreen&lt;/strong&gt;
&lt;img src=&quot;https://web.dev/images/glitch/fullscreen.svg&quot; alt=&quot;fullscreen&quot; style=&quot;padding: 4px 8px; opacity: .5; border: 1px solid #c3c3c3; border-radius: 5px;&quot; /&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press &lt;code&gt;Control+Shift+J&lt;/code&gt; (or &lt;code&gt;Command+Option+J&lt;/code&gt; on Mac) to open DevTools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the &lt;strong&gt;Network&lt;/strong&gt; tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reload the page to see the network traffic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Network panel shows all the assets loaded because of your initial
navigation:&lt;/p&gt;
&lt;img alt=&quot;Chrome DevTools&amp;#x27; network panel.&quot; class=&quot;screenshot&quot; decoding=&quot;async&quot; height=&quot;219&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kofLXSq1f3ekY7KY9QK7.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The actual columns you see in the Network panel may be different; the
screenshot shows a simplified view with everything but the &lt;strong&gt;Name&lt;/strong&gt;, &lt;strong&gt;Type&lt;/strong&gt;, and
&lt;strong&gt;Waterfall&lt;/strong&gt; columns hidden.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;how-to-interpret-the-entries&quot;&gt;How to interpret the entries &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-explore-network-panel/#how-to-interpret-the-entries&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each row of recorded network traffic represents a single request and response
pair.&lt;/p&gt;
&lt;p&gt;The first row, with type &lt;code&gt;document&lt;/code&gt;, is the initial navigation request for the
web app&#39;s HTML. This is the source for the waterfall; each of the subsequent
requests for additional assets (known as subresources of the main document) flow
from this original source.&lt;/p&gt;
&lt;p&gt;The second and third rows, showing a CSS &lt;code&gt;stylesheet&lt;/code&gt; and a &lt;code&gt;script&lt;/code&gt; subresource
being loaded, are dependent requests that were initiated by the main document.&lt;/p&gt;
&lt;p&gt;Looking at &lt;em&gt;when&lt;/em&gt; those requests are made, the waterfall diagram shows that
they&#39;re not started until very late in the process of responding to the
navigation request.&lt;/p&gt;
&lt;p&gt;Taken together, the requests for the HTML document, CSS, and
JavaScript are needed to display the full page during the
initial navigation.&lt;/p&gt;
&lt;h2 id=&quot;create-some-additional-runtime-requests&quot;&gt;Create some additional runtime requests &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-explore-network-panel/#create-some-additional-runtime-requests&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the &lt;strong&gt;Network&lt;/strong&gt; panel still open and recording, it&#39;s time to simulate something
common for a lot of web apps: additional API requests used to add more data to
the page after the initial navigation is complete.&lt;/p&gt;
&lt;p&gt;Trigger these additional requests by clicking &lt;strong&gt;Find Me&lt;/strong&gt; in the app and then
&lt;strong&gt;Allow&lt;/strong&gt; in the popup that appears.
This will allow the site to access your current location:&lt;/p&gt;
&lt;img alt=&quot;The allow location permission prompt.&quot; decoding=&quot;async&quot; height=&quot;257&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 638px) 638px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TJTq6re6eiVf74N8SwWE.png?auto=format&amp;w=1276 1276w&quot; width=&quot;638&quot; /&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;You could also deny geolocation permission, in which case the web app
will fall back to a default location.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Once the web app has a location to work with, clicking &lt;strong&gt;Find Nearby
Wikipedia Entries&lt;/strong&gt; results in several additional network requests. You
should see something like this:&lt;/p&gt;
&lt;img alt=&quot;image&quot; decoding=&quot;async&quot; height=&quot;567&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/Y9EAf75LBCkkpXyatG3f.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;h2 id=&quot;interpret-the-new-entries&quot;&gt;Interpret the new entries &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-explore-network-panel/#interpret-the-new-entries&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As before, each row of recorded network traffic represents a single request
and response pair.&lt;/p&gt;
&lt;p&gt;The first row of the new entries represents a request with a type of &lt;code&gt;fetch&lt;/code&gt;,
which corresponds to the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot; rel=&quot;noopener&quot;&gt;way the web app requests data&lt;/a&gt;
from the Wikipedia API.&lt;/p&gt;
&lt;p&gt;The following rows all are images (&lt;code&gt;png&lt;/code&gt; or &lt;code&gt;jpeg&lt;/code&gt;) associated with the
Wikipedia entries. Although it&#39;s a little hard to see from the screenshot, their
entries in the Waterfall column directly flow from the API response.&lt;/p&gt;
&lt;p&gt;For all of these additional requests, the &lt;em&gt;when&lt;/em&gt; is going to vary based on how
long you&#39;ve had the page open before you click on &lt;strong&gt;Find Nearby Wikipedia
Entries&lt;/strong&gt;. Most important here is that the &lt;em&gt;when&lt;/em&gt; is disconnected from the
initial navigation request. You can tell this from the large gap that exists in
the Waterfall display, representing a period of time that passed in between the
initial loading and when the Wikipedia API request is made.&lt;/p&gt;
&lt;p&gt;Requests made after a gap of time following a navigation fall into the category
of &amp;quot;runtime requests,&amp;quot; as opposed to the initial set of requests used to display
the page when you first navigated to it.&lt;/p&gt;
&lt;h2 id=&quot;summing-things-up&quot;&gt;Summing things up &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-explore-network-panel/#summing-things-up&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having gone through the steps in this codelab, you&#39;re now familiar with the
tools you can use to analyze what &lt;em&gt;any&lt;/em&gt; web application loads.&lt;/p&gt;
&lt;p&gt;The Network panel helps you answer the question of &lt;em&gt;what&lt;/em&gt;&#39;s being loaded, via
the URLs in the Name column and the data in the Type column, along with &lt;em&gt;when&lt;/em&gt;
it&#39;s being loaded, via the waterfall display.&lt;/p&gt;
&lt;p&gt;You&#39;ve also seen that requests made by a web page can (usually) be grouped into
one of two categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initial requests, made right after navigating to a new page, for the
HTML, JavaScript, CSS (and potentially other assets).&lt;/li&gt;
&lt;li&gt;Runtime requests made as a result of user interaction with the page. This
can often start with a request to an API, and then flow into several
follow-up requests based on the API data retrieved.&lt;/li&gt;
&lt;/ol&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Configuring HTTP caching behavior</title>
    <link href="https://web.dev/codelab-http-cache/"/>
    <updated>2018-11-05T00:00:00Z</updated>
    <id>https://web.dev/codelab-http-cache/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This codelab uses Chrome DevTools.
&lt;a href=&quot;https://www.google.com/chrome&quot; rel=&quot;noopener&quot;&gt;Download Chrome&lt;/a&gt; if you don&#39;t already have it.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This codelab shows you how to change the HTTP caching headers returned by a
Node.js-based web server, running the &lt;a href=&quot;https://expressjs.com/&quot; rel=&quot;noopener&quot;&gt;Express&lt;/a&gt; serving
framework. It will also show how to confirm that the caching behavior you expect
is actually being applied, using the Network panel in Chrome&#39;s DevTools.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;While the specific instructions are tailored towards Express, the general
principles about choosing the correct caching headers apply to any web server
environment.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;get-familiar-with-the-sample-project&quot;&gt;Get familiar with the sample project &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-http-cache/#get-familiar-with-the-sample-project&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These are the key files you will be working with in the sample project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server.js&lt;/code&gt; contains the Node.js code that serves the web app&#39;s
content. It uses &lt;a href=&quot;https://expressjs.com/&quot; rel=&quot;noopener&quot;&gt;Express&lt;/a&gt; to handle HTTP requests
and responses. In particular, &lt;code&gt;express.static()&lt;/code&gt; is used to serve all of
the local files in the public directory, so the &lt;code&gt;serve-static&lt;/code&gt;
&lt;a href=&quot;https://expressjs.com/en/resources/middleware/serve-static.html&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt;
will come in handy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public/index.html&lt;/code&gt; is the web app&#39;s HTML. Like most HTML files, it does not
contain any versioning information as part of its URL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public/app.15261a07.js&lt;/code&gt; and &lt;code&gt;public/style.391484cf.css&lt;/code&gt; are the web app&#39;s JavaScript
and CSS assets. These files each contain a hash in their URLs,
corresponding to their contents. The &lt;code&gt;index.html&lt;/code&gt; is responsible for keeping
track of which specific versioned URL to load.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;In the &amp;quot;real world&amp;quot;, the process of assigning hashes and updating HTML
files to include references to the latest versioned URL would be handled by a
build tool, like
&lt;a href=&quot;https://webpack.js.org/guides/caching/#output-filenames&quot; rel=&quot;noopener&quot;&gt;webpack&lt;/a&gt;.
For the purposes of this codelab, assume that the hashes were generated as part
of a build process that already took place.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;configure-caching-headers-for-our-html&quot;&gt;Configure caching headers for our HTML &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-http-cache/#configure-caching-headers-for-our-html&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When responding to requests for URLs that don&#39;t contain versioning info, make
sure you add &lt;code&gt;Cache-Control: no-cache&lt;/code&gt; to your response messages. Along with
that, setting one of two additional response headers is recommended: either
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Last-Modified&lt;/code&gt;&lt;/a&gt;
or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ETag&lt;/code&gt;&lt;/a&gt;. The
&lt;code&gt;index.html&lt;/code&gt; falls into this category. You can break this down into two steps.&lt;/p&gt;
&lt;p&gt;First, the &lt;code&gt;Last-Modified&lt;/code&gt; and &lt;code&gt;ETag&lt;/code&gt; headers are controlled by the
&lt;a href=&quot;https://expressjs.com/en/resources/middleware/serve-static.html#etag&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;etag&lt;/code&gt;&lt;/a&gt;
and
&lt;a href=&quot;https://expressjs.com/en/resources/middleware/serve-static.html#lastmodified&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;lastModified&lt;/code&gt;&lt;/a&gt;
configuration options. Both of these options actually default to &lt;code&gt;true&lt;/code&gt; for all
HTTP responses, so in this current setup, you don&#39;t &lt;em&gt;have&lt;/em&gt; to opt-in to get that
behavior. But you can be explicit in your configuration anyway.&lt;/p&gt;
&lt;p&gt;Second, you need to be able to add in the &lt;code&gt;Cache-Control: no-cache&lt;/code&gt; header, but
only for your HTML documents (&lt;code&gt;index.html&lt;/code&gt;, in this case). The easiest way to
conditionally set this header is to write a custom
&lt;a href=&quot;https://expressjs.com/en/resources/middleware/serve-static.html#setheaders&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;setHeaders function&lt;/code&gt;&lt;/a&gt;,
and within that, check to see if the incoming request is for an HTML document.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;Remix to Edit&lt;/strong&gt; to make the project editable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The static serving configuration in &lt;code&gt;server.js&lt;/code&gt; starts out as this:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;public&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Make the changes described above, and you should end up with something that
looks like:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;public&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  etag&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Just being explicit about the default.&lt;/span&gt;&lt;br /&gt;  lastModified&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Just being explicit about the default.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// All of the project&#39;s HTML files end in .html&lt;/span&gt;&lt;br /&gt;      res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Cache-Control&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;configure-caching-headers-for-the-versioned-urls&quot;&gt;Configure caching headers for the versioned URLs &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-http-cache/#configure-caching-headers-for-the-versioned-urls&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When responding to requests for URLs that contain
&amp;quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fingerprint_(computing)&quot; rel=&quot;noopener&quot;&gt;fingerprint&lt;/a&gt;&amp;quot; or
versioning information, and whose contents are never meant to change, add
&lt;code&gt;Cache-Control: max-age=31536000&lt;/code&gt; to your responses. The &lt;code&gt;app.15261a07.js&lt;/code&gt; and
&lt;code&gt;style.391484cf.css&lt;/code&gt; fall into this category.&lt;/p&gt;
&lt;p&gt;Building off the
&lt;a href=&quot;https://expressjs.com/en/resources/middleware/serve-static.html#setheaders&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;setHeaders function&lt;/code&gt;&lt;/a&gt;
used in the last step, you can add in additional logic to check whether a given
request is for a versioned URL, and if so, add the &lt;code&gt;Cache-Control: max-age=31536000&lt;/code&gt; header.&lt;/p&gt;
&lt;p&gt;The most robust way of doing this is to use a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot; rel=&quot;noopener&quot;&gt;regular expression&lt;/a&gt;
to see whether the asset being requested matches a specific pattern that you
know the hashes fall into. In the case of this sample project, it&#39;s always eight
characters from the set of digits 0–9 and the lowercase letters a–f (i.e.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hexadecimal&quot; rel=&quot;noopener&quot;&gt;hexadecimal&lt;/a&gt; characters). The hash
is always separated by a &lt;code&gt;.&lt;/code&gt; character on either side.&lt;/p&gt;
&lt;p&gt;A regular expression that
&lt;a href=&quot;https://jex.im/regulex/#!flags=&amp;amp;re=%5C.%5B0-9a-f%5D%7B8%7D%5C.&quot; rel=&quot;noopener&quot;&gt;matches those general rules&lt;/a&gt;
can be expressed as &lt;code&gt;new RegExp(&#39;\\.[0-9a-f]{8}\\.&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;It helps to be as specific as possible when coming up with these rules,
to protect against future problems. A more general match, such as checking for
the &lt;code&gt;.js&lt;/code&gt; or &lt;code&gt;.css&lt;/code&gt; file extension, could end up being a problem down the road
if you end up adding in additional, unversioned JavaScript or CSS assets to your
project.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Modify the &lt;code&gt;setHeaders&lt;/code&gt; function so it looks like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;public&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  etag&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Just being explicit about the default.&lt;/span&gt;&lt;br /&gt;  lastModified&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Just being explicit about the default.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hashRegExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;\\.[0-9a-f]{8}\\.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// All of the project&#39;s HTML files end in .html&lt;/span&gt;&lt;br /&gt;      res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Cache-Control&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hashRegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// If the RegExp matched, then we have a versioned URL.&lt;/span&gt;&lt;br /&gt;      res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Cache-Control&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;max-age=31536000&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;confirm-the-new-behavior-using-devtools&quot;&gt;Confirm the new behavior using DevTools &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-http-cache/#confirm-the-new-behavior-using-devtools&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;You can get familiar with the Network panel in Chrome&#39;s DevTools by
working through &lt;a href=&quot;https://web.dev/codelab-explore-network-panel&quot;&gt;this codelab&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With the modifications to the static file server in place, you can check to make
sure that the right headers are being set by previewing the live app with the DevTools Network panel open.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To preview the site, press &lt;strong&gt;View App&lt;/strong&gt;. Then press
&lt;strong&gt;Fullscreen&lt;/strong&gt;
&lt;img src=&quot;https://web.dev/images/glitch/fullscreen.svg&quot; alt=&quot;fullscreen&quot; style=&quot;padding: 4px 8px; opacity: .5; border: 1px solid #c3c3c3; border-radius: 5px;&quot; /&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Customize the columns that are
displayed in the Network panel to include the information that is most relevant, by right-clicking in
the column header:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&quot;Configuring DevTools&amp;#x27; Network panel.&quot; class=&quot;screenshot&quot; decoding=&quot;async&quot; height=&quot;931&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L98OANnCWWOU36dTwd8r.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;Here, the columns to pay attention to are &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Status&lt;/code&gt;, &lt;code&gt;Cache-Control&lt;/code&gt;,
&lt;code&gt;ETag&lt;/code&gt;, and &lt;code&gt;Last-Modified&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With the DevTools open to the Network panel, refresh the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the page has loaded, you should see entries in the Network panel that look
like the following:&lt;/p&gt;
&lt;img alt=&quot;Network panel columns.&quot; class=&quot;screenshot&quot; decoding=&quot;async&quot; height=&quot;172&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQbDCXUvXPlqThlPbLIp.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;The first row is for the HTML document that you navigated to. This is properly
served with &lt;code&gt;Cache-Control: no-cache&lt;/code&gt;. The HTTP response status for that request
is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;304&lt;/code&gt;&lt;/a&gt;. This
means that the browser knew not to use the cached HTML immediately, but instead
made an HTTP request to the web server, using the &lt;code&gt;Last-Modified&lt;/code&gt; and &lt;code&gt;ETag&lt;/code&gt;
information to see if there was any update to the HTML that it already had in
its cache. The HTTP 304 response indicates that there is not updated HTML.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;&lt;code&gt;Cache-Control: no-cache&lt;/code&gt; doesn&#39;t mean &amp;quot;never used the cached copy&amp;quot;. It
means &amp;quot;always check with the server first, and use the cached copy if there&#39;s a
HTTP 304 response.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The next two rows are for the versioned JavaScript and CSS assets. You should
see them served with &lt;code&gt;Cache-Control: max-age=31536000&lt;/code&gt;, and the HTTP status for
each is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;200&lt;/code&gt;&lt;/a&gt;.
Because of the configuration used, there is no actual request being made to the
Node.js server, and clicking on the entry will show you additional detail,
including that the response came &amp;quot;(from disk cache)&amp;quot;.&lt;/p&gt;
&lt;img alt=&quot;A network response status of 200.&quot; class=&quot;screenshot&quot; decoding=&quot;async&quot; height=&quot;175&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bx1DtsiX7e9tdOSf1ogZ.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;The actual values for the ETag and Last-Modified columns don&#39;t matter much. The
important thing is to confirm that they&#39;re being set.&lt;/p&gt;
&lt;h2 id=&quot;summing-things-up&quot;&gt;Summing things up &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/codelab-http-cache/#summing-things-up&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having gone through the steps in this codelab, you&#39;re now familiar with how to
configure the HTTP response headers in a Node.js-based web server using Express,
for optimal use of the HTTP cache. You also have the steps you need to confirm
that the expected caching behavior is being used, via the Network panel in
Chrome&#39;s DevTools.&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
</feed>
