<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://web.dev/</id>
  <title>HTTP 203 on web.dev</title>
  <updated>2021-08-11T17:14:17Z</updated>
  <author>
    <name>Google Developers</name>
  </author>
  <link href="https://web.dev/shows/http-203/feed.xml" rel="self"/>
  <link href="https://web.dev/"/>
  <category term="HTTP 203 on web.dev"/>
  <icon>https://web.dev/images/social.png</icon>
  <logo>https://web.dev/images/shared/rss-banner.png</logo>
  <subtitle>Google Developers Jake Archibald and Surma discuss their philosophies about web development and the various aspects of it, meanwhile dropping in lifehacks, lessons and some honest truths.</subtitle>
  
  
  <entry>
    <title>Debugging memory leaks - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/YDU_3WdfkxA/"/>
    <updated>2021-08-03T14:17:43Z</updated>
    <id>https://web.dev/shows/http-203/YDU_3WdfkxA/</id>
    <content type="text/html" mode="escaped"><p>Jake and Surma tackle one of the hardest types of debugging on the web: Memory leaks.</p>
<p>Some links mentioned:<br />
Squoosh ‚Üí <a href="https://goo.gle/2OQBnGG">https://goo.gle/2OQBnGG</a><br />
Leaky version of Squoosh, so you can try the tools for yourself ‚Üí <a href="https://goo.gle/3A7Lwni">https://goo.gle/3A7Lwni</a><br />
Original bug report ‚Üí <a href="https://goo.gle/3jhl7wj">https://goo.gle/3jhl7wj</a></p>
<p>Resize/Intersection observer bug reports:<br />
Chrome ‚Üí <a href="https://goo.gle/3rOXM9l">https://goo.gle/3rOXM9l</a><br />
Firefox ‚Üí <a href="https://goo.gle/3s3u54B">https://goo.gle/3s3u54B</a><br />
Safari ‚Üí <a href="https://goo.gle/3xlerT8">https://goo.gle/3xlerT8</a></p>
<p>More videos in the HTTP 203 series ‚Üí <a href="http://goo.gle/HTTP203">http://goo.gle/HTTP203</a><br />
Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast ‚Üí <a href="https://goo.gle/HTTP203Podcast">https://goo.gle/HTTP203Podcast</a></p>
<p>#HTTP203 #ChromeDeveloper #WebDev</p>
</content>
    
  </entry>
  
  <entry>
    <title>HTTP 203: Season 8 trailer</title>
    <link href="https://web.dev/shows/http-203/-Ktb6mUkznI/"/>
    <updated>2021-07-26T23:31:04Z</updated>
    <id>https://web.dev/shows/http-203/-Ktb6mUkznI/</id>
    <content type="text/html" mode="escaped"><p>Jake and Surma are going back to the studio for this brand new season of HTTP 203.</p>
<p>New season starting next Tuesday, 8/3!</p>
<p>More videos in the HTTP 203 series ‚Üí <a href="http://goo.gle/HTTP203">http://goo.gle/HTTP203</a><br />
Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast ‚Üí <a href="https://goo.gle/HTTP203Podcast">https://goo.gle/HTTP203Podcast</a></p>
<p>#HTTP203 #ChromeDeveloper #WebDev</p>
</content>
    
  </entry>
  
  <entry>
    <title>Top 10 performance pitfalls - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/Lh9q3h2khlc/"/>
    <updated>2021-06-22T15:12:49Z</updated>
    <id>https://web.dev/shows/http-203/Lh9q3h2khlc/</id>
    <content type="text/html" mode="escaped"><p>Jake &amp; Surma go through the top 9 + 1 performance issues Jake saw while analyzing a bunch of web sites.</p>
<p>Who has the fastest F1 website? ‚Üí <a href="https://goo.gle/3x0gr3T">https://goo.gle/3x0gr3T</a><br />
Looking at the Google I/O website ‚Üí <a href="https://goo.gle/3gQkN6J">https://goo.gle/3gQkN6J</a><br />
Document readyState ‚Üí <a href="https://goo.gle/3d3KS13">https://goo.gle/3d3KS13</a><br />
Massive inlined image ‚Üí <a href="https://goo.gle/3qf3uAm">https://goo.gle/3qf3uAm</a><br />
Inlined font in the Squoosh logo ‚Üí <a href="https://goo.gle/3zLI3LS">https://goo.gle/3zLI3LS</a><br />
Squoosh for optimising images ‚Üí <a href="https://goo.gle/2OQBnGG">https://goo.gle/2OQBnGG</a><br />
CSS aspect ratio ‚Üí <a href="https://goo.gle/3gK8V7e">https://goo.gle/3gK8V7e</a><br />
Font loading API ‚Üí <a href="https://goo.gle/3gLBhOv">https://goo.gle/3gLBhOv</a><br />
The old aspect ratio hack ‚Üí <a href="https://goo.gle/3qf23lH">https://goo.gle/3qf23lH</a><br />
Code splitting ‚Üí <a href="https://goo.gle/3xFZcom">https://goo.gle/3xFZcom</a><br />
WATCH OUR TALK ‚Üí <a href="https://goo.gle/3j8xeNI">https://goo.gle/3j8xeNI</a></p>
<p>More videos in the HTTP 203 series ‚Üí <a href="http://goo.gle/HTTP203">http://goo.gle/HTTP203</a><br />
Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast ‚Üí <a href="https://goo.gle/HTTP203Podcast">https://goo.gle/HTTP203Podcast</a></p>
<p>#HTTP203 #ChromeDeveloper #WebDev</p>
<p>re_ty: Publish;</p>
</content>
    
  </entry>
  
  <entry>
    <title>From nothin‚Äô to gzip - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/PZryHH8roIY/"/>
    <updated>2021-06-08T14:41:14Z</updated>
    <id>https://web.dev/shows/http-203/PZryHH8roIY/</id>
    <content type="text/html" mode="escaped"><p>You know GZIP right? It‚Äôs everywhere on the web to reduce the number of bytes going over the wire. In this episode, Surma is giving you a quickstart on how it works.</p>
<p>DEFLATE spec (RFC 1951) ‚Üí <a href="https://goo.gle/3x5FZMl">https://goo.gle/3x5FZMl</a><br />
Compressor Head ‚Üí <a href="https://goo.gle/3pvVESJ">https://goo.gle/3pvVESJ</a></p>
<p>More videos in the HTTP 203 series ‚Üí <a href="http://goo.gle/HTTP203">http://goo.gle/HTTP203</a><br />
Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast ‚Üí <a href="https://goo.gle/HTTP203Podcast">https://goo.gle/HTTP203Podcast</a></p>
<p>#HTTP203 #ChromeDeveloper #WebDev</p>
</content>
    
  </entry>
  
  <entry>
    <title>Progressively loading images - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/-7k3H2GxE5E/"/>
    <updated>2021-05-26T14:09:00Z</updated>
    <id>https://web.dev/shows/http-203/-7k3H2GxE5E/</id>
    <content type="text/html" mode="escaped"><p>In this episode, Jake (that's him on the left) and Surma (that's the other one) chat about how the different image formats load, and what you can do to make them feel faster.</p>
<p>Stuff we mention:<br />
Tool to slow-load images ‚Üí <a href="https://goo.gle/2ROdm7x">https://goo.gle/2ROdm7x</a><br />
Squoosh ‚Üí <a href="https://goo.gle/2OQBnGG">https://goo.gle/2OQBnGG</a><br />
MozJPEG ‚Üí <a href="https://goo.gle/34hOckh">https://goo.gle/34hOckh</a><br />
lib-jpeg encoder bug ‚Üí <a href="https://goo.gle/2Tn3KkJ">https://goo.gle/2Tn3KkJ</a><br />
Scripting JPEG scans (see 'Multiple Scan / Progression Control') ‚Üí <a href="https://goo.gle/3ccqJpd">https://goo.gle/3ccqJpd</a><br />
Squoosh PR experimenting with scans ‚Üí <a href="https://goo.gle/3vmjh2j">https://goo.gle/3vmjh2j</a><br />
Jake's blog post on AVIF ‚Üí <a href="https://goo.gle/3oQG9En">https://goo.gle/3oQG9En</a><br />
AVIF blurry preview demo ‚Üí <a href="https://goo.gle/2SnUEUa">https://goo.gle/2SnUEUa</a><br />
AVIF preview frame spec discussion ‚Üí <a href="https://goo.gle/3bQ3WPC">https://goo.gle/3bQ3WPC</a><br />
AVIF preview thumbnail feature issue ‚Üí <a href="https://goo.gle/3figOQO">https://goo.gle/3figOQO</a><br />
BlurHash ‚Üí <a href="https://goo.gle/2SqEGbR">https://goo.gle/2SqEGbR</a></p>
<p>More videos in the HTTP 203 series ‚Üí <a href="http://goo.gle/HTTP203">http://goo.gle/HTTP203</a><br />
Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast ‚Üí <a href="https://goo.gle/HTTP203Podcast">https://goo.gle/HTTP203Podcast</a></p>
<p>#HTTP203 #ChromeDeveloper #WebDev</p>
</content>
    
  </entry>
  
  <entry>
    <title>Conducting tech interviews - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/hFyQn5F5pc0/"/>
    <updated>2021-04-20T16:01:15Z</updated>
    <id>https://web.dev/shows/http-203/hFyQn5F5pc0/</id>
    <content type="text/html" mode="escaped"><p>In this episode Jake and Surma chat about interviewing for web dev roles, drawing on their good and bad experiences as candidates, and mistakes they've made as interviewers. Covering prep, probing questions, coding tasks, and rating candidates.</p>
<p>More videos in the HTTP 203 series ‚Üí <a href="http://goo.gle/HTTP203">http://goo.gle/HTTP203</a><br />
Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast ‚Üí <a href="https://goo.gle/HTTP203Podcast">https://goo.gle/HTTP203Podcast</a></p>
<p>#HTTP203 #ChromeDeveloper #WebDev</p>
<p>Btw, Jake promises to reply to every comment that contains a üéà</p>
</content>
    
  </entry>
  
  <entry>
    <title>AssemblyScript - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/u0Jgz6QVJqg/"/>
    <updated>2021-04-05T20:06:21Z</updated>
    <id>https://web.dev/shows/http-203/u0Jgz6QVJqg/</id>
    <content type="text/html" mode="escaped"><p>Surma gives Jakes a quick-start to AssemblyScript, a TypeScript-like language that compiles to WebAssembly. Is it faster? Smaller? Better? Will it kill JavaScript? All that and more in this video. Maybe. I don‚Äôt want to over-promise. Managing expectations is important, you know. Still reading this? Wow you are committed! Leave a comment containing ‚Äúüêø‚Äù so we know that you are a dedicated video description reader!</p>
<p>Get started with AssemblyScript ‚Üí <a href="http://goo.gle/assemblyscript">http://goo.gle/assemblyscript</a></p>
<p>Other videos in the series ‚Üí <a href="http://goo.gle/HTTP203">http://goo.gle/HTTP203</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/HTTP203Podcast">https://goo.gle/HTTP203Podcast</a></p>
<p>#HTTP203 #ChromeDeveloper #WebDev</p>
</content>
    
  </entry>
  
  <entry>
    <title>The big back button quiz - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/W6lvQvdeF8U/"/>
    <updated>2021-03-22T18:49:18Z</updated>
    <id>https://web.dev/shows/http-203/W6lvQvdeF8U/</id>
    <content type="text/html" mode="escaped"><p>How well do you know how the back button works (and other session history related things)? Jake has written an impossible quiz based on some of the weirdest browser behavior he's seen recently. Will Surma survive?</p>
<p>New history API proposal ‚Üí <a href="http://goo.gle/3qO18qW">http://goo.gle/3qO18qW</a><br />
The back-forward page cache ‚Üí <a href="http://goo.gle/bfcache">http://goo.gle/bfcache</a></p>
<p>And here are some issues Jake has filed while investigating the stuff in this episode:</p>
<p>When traversing fails ‚Üí <a href="http://goo.gle/2PWHFHK">http://goo.gle/2PWHFHK</a><br />
Refreshing a page with iframes ‚Üí <a href="http://goo.gle/2Q4n6cC">http://goo.gle/2Q4n6cC</a><br />
Iframes and unload prompts ‚Üí <a href="http://goo.gle/3qLKkAY">http://goo.gle/3qLKkAY</a><br />
Manual navigations vs link clicks ‚Üí <a href="http://goo.gle/2Npua2A">http://goo.gle/2Npua2A</a><br />
Restoring iframe history on back ‚Üí <a href="http://goo.gle/33vrVQQ">http://goo.gle/33vrVQQ</a><br />
Session storage and browsing contexts ‚Üí <a href="http://goo.gle/30LYM12">http://goo.gle/30LYM12</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a><br />
Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
<p>#HTTP203 #ChromeDeveloper #WebDev</p>
</content>
    
  </entry>
  
  <entry>
    <title>Writing Good Alt Text - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/flf2vS0IoRs/"/>
    <updated>2021-03-01T21:09:44Z</updated>
    <id>https://web.dev/shows/http-203/flf2vS0IoRs/</id>
    <content type="text/html" mode="escaped"><p>Jake and Surma tackle the age-old problem: what should you include in an image's alt text?</p>
<p>Mentioned in the episode:<br />
Chrome Dev Summit website ‚Üí <a href="http://goo.gle/3upQ0DA">http://goo.gle/3upQ0DA</a><br />
Twitter thread ‚Üí <a href="https://goo.gle/3aSfh1y">https://goo.gle/3aSfh1y</a><br />
Bike photo by Zhang Kaiyv ‚Üí <a href="http://goo.gle/3r0s5c0">http://goo.gle/3r0s5c0</a><br />
L√©onie's article ‚Üí <a href="http://goo.gle/3krtzcz">http://goo.gle/3krtzcz</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
<p>#HTTP203 #ChromeDeveloper #WebDev</p>
</content>
    
  </entry>
  
  <entry>
    <title>Scheduling Tasks - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/8eHInw9_U8k/"/>
    <updated>2021-02-22T19:13:08Z</updated>
    <id>https://web.dev/shows/http-203/8eHInw9_U8k/</id>
    <content type="text/html" mode="escaped"><p>Tasks, microtasks, nanotasks... JavaScript has it all. Or maybe not. What are they? How do you use them? What do they even mean? Surma rips off Jake‚Äôs event loop talk and tells you all about scheduling callback functions in JavaScript.</p>
<p>Jake‚Äôs event loop talk ‚Üí <a href="https://goo.gle/jake-event-loop">https://goo.gle/jake-event-loop</a><br />
JavaScript Counters the Hard Way ‚Üí <a href="https://goo.gle/3bkZjfu">https://goo.gle/3bkZjfu</a><br />
And the gist that Surma totally did not forget about ‚Üí <a href="https://gist.github.com/surma/1fde30101820faf494cc89d5feb1a972">https://gist.github.com/surma/1fde30101820faf494cc89d5feb1a972</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
</content>
    
  </entry>
  
  <entry>
    <title>JavaScript counters the hard way - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/MCi6AZMkxcU/"/>
    <updated>2021-02-09T16:36:31Z</updated>
    <id>https://web.dev/shows/http-203/MCi6AZMkxcU/</id>
    <content type="text/html" mode="escaped"><p>You‚Äôve seen loads of counter tutorials online, but they‚Äôre all a bit wrong‚Ä¶ or at least most of them are. Jake and Surma dissect different techniques and identify how to make the counter work accurately and efficiently across browsers.</p>
<p>The optimal reusable solution ‚Üí <a href="http://goo.gle/2LY9GNI">http://goo.gle/2LY9GNI</a></p>
<p>Browser bugs for suboptimal CSS animations:<br />
Chrome (empty JS anim) ‚Üí <a href="http://goo.gle/3qS3vt7">http://goo.gle/3qS3vt7</a><br />
Chrome (other animations) ‚Üí <a href="http://goo.gle/39izDjS">http://goo.gle/39izDjS</a><br />
WebKit ‚Üí <a href="http://goo.gle/2Mnkt3F">http://goo.gle/2Mnkt3F</a><br />
Mozilla ‚Üí <a href="http://goo.gle/2Nt4T74">http://goo.gle/2Nt4T74</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
</content>
    
  </entry>
  
  <entry>
    <title>Dithering - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/wS0Gck00nDw/"/>
    <updated>2021-01-26T17:00:44Z</updated>
    <id>https://web.dev/shows/http-203/wS0Gck00nDw/</id>
    <content type="text/html" mode="escaped"><p>How do you take an image with 256 shades of grey and map it to an image with just two colors? Jake and Surma go down the monochrome image dithering rabbit hole and explain how different dithering techniques work.</p>
<p>Surma‚Äôs blog post ‚Üí <a href="http://goo.gle/3ohHIcK">http://goo.gle/3ohHIcK</a><br />
Surma‚Äôs demo tool ‚Üí <a href="https://goo.gle/368vxbN">https://goo.gle/368vxbN</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
</content>
    
  </entry>
  
  <entry>
    <title>Importing JSON - ABANDONED - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/jG7VfbqqTGw/"/>
    <updated>2020-11-12T14:48:42Z</updated>
    <id>https://web.dev/shows/http-203/jG7VfbqqTGw/</id>
    <content type="text/html" mode="escaped"><p>In nodejs you can 'require' JSON. The same feature was added to the HTML spec, but then‚Ä¶ it was removed. Jake and Surma dive into the reasons, and the impact it could have on other kinds of modules.</p>
<p>Our talk from JamStackConf: <a href="https://youtu.be/TsTt7Tja30Q">https://youtu.be/TsTt7Tja30Q</a></p>
<p>HTTP203 Series ‚Üí <a href="https://goo.gle/33gRBOd">https://goo.gle/33gRBOd</a><br />
Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, we do a podcast! <a href="https://developers.google.com/web/shows/http203/podcast">https://developers.google.com/web/shows/http203/podcast</a> (also available via iTunes, Spotify, etc etc)</p>
</content>
    
  </entry>
  
  <entry>
    <title>Web animation gotchas - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/9-6CKCz58A8/"/>
    <updated>2020-11-10T18:00:12Z</updated>
    <id>https://web.dev/shows/http-203/9-6CKCz58A8/</id>
    <content type="text/html" mode="escaped"><p>Fading something in, and fading something out ‚Äì sounds simple right? Unfortunately not! Jake &amp; Surma talk through the various gotchas of animating the web, and how to work around them.</p>
<p>Using CSS transitions ‚Üí <a href="https://goo.gle/2TXTUCB">https://goo.gle/2TXTUCB</a><br />
Using CSS animations ‚Üí <a href="https://goo.gle/3et8gEq">https://goo.gle/3et8gEq</a><br />
The web animation API ‚Üí <a href="https://goo.gle/3mXbV0C">https://goo.gle/3mXbV0C</a><br />
getAnimations ‚Üí <a href="https://goo.gle/3oXMLk4">https://goo.gle/3oXMLk4</a><br />
commitStyles ‚Üí <a href="https://goo.gle/38d6PsN">https://goo.gle/38d6PsN</a><br />
Event listeners and garbage collection ‚Üí <a href="https://goo.gle/32c4TNd">https://goo.gle/32c4TNd</a><br />
Spec discussions ‚Üí <a href="https://goo.gle/3k1zbIE">https://goo.gle/3k1zbIE</a><br />
The final animateTo function ‚Üí <a href="https://goo.gle/363WVHn">https://goo.gle/363WVHn</a></p>
<p>JavaScript animation libraries:<br />
jQuery ‚Üí <a href="https://goo.gle/34XEowU">https://goo.gle/34XEowU</a><br />
Greensock ‚Üí <a href="https://greensock.com/">https://greensock.com/</a><br />
AnimeJS ‚Üí <a href="https://animejs.com/">https://animejs.com/</a><br />
The old library Jake made (don't use it) ‚Üí <a href="https://goo.gle/34ZFGaU">https://goo.gle/34ZFGaU</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
</content>
    
  </entry>
  
  <entry>
    <title>WebAssembly Threads - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/x9RP-M6q2Mg/"/>
    <updated>2020-10-27T16:54:06Z</updated>
    <id>https://web.dev/shows/http-203/x9RP-M6q2Mg/</id>
    <content type="text/html" mode="escaped"><p>Surma tries to explain WebAssembly, threads and WebAssembly Threads to Jake. He also has scary diagrams and uses assembly language. Just in time for Halloween. Spooky. We hope you enjoy. If you read this far, thank you. We appreciate your thoroughness. Put a üëª  at the end of your comment as a secret signal that you are a description reader.</p>
<p>WebAssembly Text Format ‚Üí <a href="https://goo.gle/2Hwm30W">https://goo.gle/2Hwm30W</a><br />
WebAssembly Spec ‚Üí <a href="https://goo.gle/3krRVSJ">https://goo.gle/3krRVSJ</a><br />
Atomics ‚Üí <a href="https://goo.gle/35pnCGc">https://goo.gle/35pnCGc</a><br />
WebAssembly Threads proposal ‚Üí <a href="https://goo.gle/3krRVSJ">https://goo.gle/3krRVSJ</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
</content>
    
  </entry>
  
  <entry>
    <title>Slashing layout cost with content-visibility - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/FFA-v-CIxJQ/"/>
    <updated>2020-10-12T23:53:19Z</updated>
    <id>https://web.dev/shows/http-203/FFA-v-CIxJQ/</id>
    <content type="text/html" mode="escaped"><p>Jake makes a quick change to the CSS of the HTML spec, and takes the layout time from 50 seconds down to 400ms. Then he spends a much longer amount of time chatting about it with Surma.</p>
<p>The result ‚Üí <a href="https://goo.gle/34QX5B1">https://goo.gle/34QX5B1</a><br />
More info on content-visibility ‚Üí <a href="https://goo.gle/3digQ8y">https://goo.gle/3digQ8y</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
</content>
    
  </entry>
  
  <entry>
    <title>3.143 ways to synchronize data across documents - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/9UNwHmagedE/"/>
    <updated>2020-09-15T17:00:03Z</updated>
    <id>https://web.dev/shows/http-203/9UNwHmagedE/</id>
    <content type="text/html" mode="escaped"><p>Jake chats to Surma about six ways you can synchronise data between documents, but some of them don't work all the time, so a complex and scientific scoring system is needed.</p>
<p>window.postMessage ‚Üí <a href="https://goo.gle/3c0v4Kz">https://goo.gle/3c0v4Kz</a><br />
Surma mentioned his comlink library <em>again</em> so I guess we have to link to it ‚Üí <a href="https://goo.gle/3hvasLN">https://goo.gle/3hvasLN</a><br />
EventSource ‚Üí <a href="https://goo.gle/3ityojV">https://goo.gle/3ityojV</a><br />
Web Locks ‚Üí <a href="https://goo.gle/3mmCI6I">https://goo.gle/3mmCI6I</a><br />
The storage event ‚Üí <a href="https://goo.gle/3iuPcHk">https://goo.gle/3iuPcHk</a><br />
BroadcastChannel ‚Üí <a href="https://goo.gle/35xBz6n">https://goo.gle/35xBz6n</a><br />
Service worker clients API ‚Üí <a href="https://goo.gle/3mh7oGx">https://goo.gle/3mh7oGx</a><br />
IDB observers ‚Üí <a href="https://goo.gle/3hq3O9D">https://goo.gle/3hq3O9D</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
</content>
    
  </entry>
  
  <entry>
    <title>Weak JavaScript - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/uygxJ8Wxotc/"/>
    <updated>2020-09-01T16:44:50Z</updated>
    <id>https://web.dev/shows/http-203/uygxJ8Wxotc/</id>
    <content type="text/html" mode="escaped"><p>Surma and Jake take a look at 'weak' JavaScript, specifically WeakMap, WeakSet, and the new and shiny WeakRefs.</p>
<p>Surma mentions his comlink library again so I guess we have to link to it ‚Üí <a href="https://goo.gle/2VLcr6V">https://goo.gle/2VLcr6V</a><br />
More details on WeakRefs ‚Üí <a href="https://goo.gle/3dDdj3p">https://goo.gle/3dDdj3p</a></p>
<p>Also, if you enjoyed this, you might like the HTTP 203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
</content>
    
  </entry>
  
  <entry>
    <title>Streaming requests with fetch - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/G9PpImUEeUA/"/>
    <updated>2020-08-18T16:53:51Z</updated>
    <id>https://web.dev/shows/http-203/G9PpImUEeUA/</id>
    <content type="text/html" mode="escaped"><p>Jake and Surma chat about a new experiment landing in Chrome 85 - streaming request uploads with the fetch API.</p>
<p>Some links we mentioned:<br />
The 'year' of streams ‚Üí <a href="https://goo.gle/3iAQoIB">https://goo.gle/3iAQoIB</a><br />
TextDecoder, as a fallback to TextDecoderStream ‚Üí <a href="https://goo.gle/3gSAFo5">https://goo.gle/3gSAFo5</a><br />
Compression streams ‚Üí <a href="https://goo.gle/2DRqtOj">https://goo.gle/2DRqtOj</a><br />
Reactive programming with streams ‚Üí <a href="https://goo.gle/3iCTFqU">https://goo.gle/3iCTFqU</a><br />
The router issue ‚Üí <a href="https://goo.gle/30TeAjK">https://goo.gle/30TeAjK</a><br />
The 'sockets' demo ‚Üí <a href="https://goo.gle/3gUHci3">https://goo.gle/3gUHci3</a><br />
This episode as an article, including origin trial details ‚Üí <a href="https://goo.gle/3kFNCUu">https://goo.gle/3kFNCUu</a></p>
<p>Also, if you enjoyed this, you might like the HTTP 203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
</content>
    
  </entry>
  
  <entry>
    <title>Socially Distant HTTP 203</title>
    <link href="https://web.dev/shows/http-203/BbVzkuifyl8/"/>
    <updated>2020-08-04T16:02:13Z</updated>
    <id>https://web.dev/shows/http-203/BbVzkuifyl8/</id>
    <content type="text/html" mode="escaped"><p>Jake and Surma are back, and it‚Äôs just like you remember. Sort-of.</p>
<p>Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a></p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
</content>
    
  </entry>
  
  <entry>
    <title>Cross-origin fetches - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/vfAHa5GBLio/"/>
    <updated>2020-04-07T16:35:31Z</updated>
    <id>https://web.dev/shows/http-203/vfAHa5GBLio/</id>
    <content type="text/html" mode="escaped"><p>Do you know your cookies from your CSRF from your CORS from your CORB from your CORP from your COEP? In this episode, Jake and Surma dive into the world of cross-origin fetches, and how the web is still battling against some early design mistakes.</p>
<p>Details on the SameSite rollback ‚Üí <a href="https://blog.chromium.org/2020/04/temporarily-rolling-back-samesite.html">https://blog.chromium.org/2020/04/temporarily-rolling-back-samesite.html</a><br />
Other videos in the series ‚Üí <a href="https://goo.gle/2wneQLl">https://goo.gle/2wneQLl</a><br />
Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2y0I5Uo">https://goo.gle/2y0I5Uo</a></p>
<p>Whoa, thanks for reading the description right to the end! Did you spot the secret message in this episode? There isn't one, but why not tell folks in the comments that you spotted it?</p>
</content>
    
  </entry>
  
  <entry>
    <title>Surma‚Äôs Interop Adventure - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/n6hIa-fPx0M/"/>
    <updated>2020-03-24T16:15:52Z</updated>
    <id>https://web.dev/shows/http-203/n6hIa-fPx0M/</id>
    <content type="text/html" mode="escaped"><p>In this episode, Surma tells the story of how he found an interop bug in Chrome and patched it himself. You‚Äôd think the story ends there, but interop is hard. Does this story have a happy end? No other way than to find out by watching the video. Also leave a comment if you know which bell end to click.</p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2M5Fpcv">https://goo.gle/2M5Fpcv</a></p>
<p>Whoa, thanks for reading the description right to the end! Why not post a comment saying you spotted the easter egg in this episode. There isn't one of course, but it'll confuse everyone who didn't read the description.</p>
</content>
    
  </entry>
  
  <entry>
    <title>Humans can&#39;t read URLs. How can we fix it? - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/0-wB1VY3Nrc/"/>
    <updated>2020-01-28T14:43:08Z</updated>
    <id>https://web.dev/shows/http-203/0-wB1VY3Nrc/</id>
    <content type="text/html" mode="escaped"><p>In this episode, Jake makes the case that URLs are impossible for humans to interpret, especially when it comes to security. What are browsers doing today to overcome that? And, is there a better way?</p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2M5Fpcv">https://goo.gle/2M5Fpcv</a></p>
<p>Whoa, thanks for reading the description right to the end! Why not post a comment saying you spotted the easter egg in this episode. There isn't one of course, but it'll confuse everyone who didn't read the description.</p>
</content>
    
  </entry>
  
  <entry>
    <title>Is reduce() bad? - HTTP 203</title>
    <link href="https://web.dev/shows/http-203/qaGjS7-qWzg/"/>
    <updated>2020-01-14T18:03:49Z</updated>
    <id>https://web.dev/shows/http-203/qaGjS7-qWzg/</id>
    <content type="text/html" mode="escaped"><p>In this episode, Jake and Surma discuss the array function reduce(). Is it good to use it? Is it too ‚Äúsmart‚Äù? Does it increase or decrease readability? Does anyone actually read video descriptions? Let us know in the comments!</p>
<p>Subscribe to Google Chrome Developers here ‚Üí <a href="https://goo.gle/ChromeDevs">https://goo.gle/ChromeDevs</a></p>
<p>Also, if you enjoyed this, you might like the HTTP203 podcast! ‚Üí <a href="https://goo.gle/2M5Fpcv">https://goo.gle/2M5Fpcv</a></p>
</content>
    
  </entry>
</feed>
