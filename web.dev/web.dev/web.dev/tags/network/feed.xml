<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://web.dev/</id>
  <title>Network on web.dev</title>
  <updated>2021-08-11T17:14:17Z</updated>
  <author>
    <name>Google Developers</name>
  </author>
  <link href="https://web.dev/tags/network/feed.xml" rel="self"/>
  <link href="https://web.dev/"/>
  <category term="Network on web.dev"/>
  <icon>https://web.dev/images/social.png</icon>
  <logo>https://web.dev/images/shared/rss-banner.png</logo>
  <subtitle>Our latest news, updates, and stories about Network.</subtitle>
  
  
  <entry>
    <title>Offline UX design guidelines</title>
    <link href="https://web.dev/offline-ux-design-guidelines/"/>
    <updated>2016-11-10T00:00:00Z</updated>
    <id>https://web.dev/offline-ux-design-guidelines/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;This article provides design guidelines on how to create a great experience
on both slow networks and offline.&lt;/p&gt;
&lt;p&gt;The quality of a network connection can be affected by a number of factors such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Poor coverage of a provider.&lt;/li&gt;
&lt;li&gt;Extreme weather conditions.&lt;/li&gt;
&lt;li&gt;Power outages.&lt;/li&gt;
&lt;li&gt;Entering into permanent &amp;quot;dead zones&amp;quot; such as buildings with walls that block network connections.&lt;/li&gt;
&lt;li&gt;Entering into temporary &amp;quot;dead zones&amp;quot; like when traveling on a train and going through a tunnel.&lt;/li&gt;
&lt;li&gt;Time-boxed internet connections such as those in airports or hotels.&lt;/li&gt;
&lt;li&gt;Cultural practices that require limited or no internet access at specific times or days.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your goal is to provide a good experience that lessens the impact of changes in connectivity.&lt;/p&gt;
&lt;h2 id=&quot;decide-what-to-show-your-users-when-they-have-a-bad-network-connection&quot;&gt;Decide what to show your users when they have a bad network connection &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#decide-what-to-show-your-users-when-they-have-a-bad-network-connection&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first question that must be asked is what does success and failure of a network connection look
like? A successful connection is your app&#39;s normal online experience. The failure of a connection,
however, can be both the offline state of your app as well how the app behaves when there is a laggy
network.&lt;/p&gt;
&lt;p&gt;When thinking about the success or failure of a network connection you need to ask yourself these
important UX questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How long do you wait to determine the success or failure of a connection?&lt;/li&gt;
&lt;li&gt;What can you do while success or failure is being determined?&lt;/li&gt;
&lt;li&gt;What should you do in the event of failure?&lt;/li&gt;
&lt;li&gt;How do you inform the user of the above?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;inform-users-of-their-current-state-and-change-of-state&quot;&gt;Inform users of their current state and change of state &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#inform-users-of-their-current-state-and-change-of-state&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Inform the user of both the actions they can still take when they have a network failure and the
current state of the application. For example, a notification could say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You seem to have a bad network connection. Not to worry! Messages will be sent when the
network is restored.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;w-figure&quot; style=&quot;display: inline-block; max-width: 45%;&quot;&gt;
  &lt;img alt=&quot;The Emojoy emoji messaging app informing the user when a change in state occurs.&quot; decoding=&quot;async&quot; height=&quot;601&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 335px) 335px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/roxoXuJ9x7qUHFVWMgXZ.png?auto=format&amp;w=670 670w&quot; width=&quot;335&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Clearly inform the user when a change in state occurs as soon as possible.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;w-figure&quot; style=&quot;display: inline-block; max-width: 45%;&quot;&gt;
  &lt;img alt=&quot;The I/O 2016 app informing the user when a change in state occurs.&quot; decoding=&quot;async&quot; height=&quot;601&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 335px) 335px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GvE07BeSsnTyxnRbkZhz.png?auto=format&amp;w=670 670w&quot; width=&quot;335&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    The Google I/O app used a material design &quot;toast&quot; to let the user know when they were offline.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;inform-users-when-the-network-connection-improves-or-is-restored&quot;&gt;Inform users when the network connection improves or is restored &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#inform-users-when-the-network-connection-improves-or-is-restored&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;How you inform the user that their network connection has improved depends
on your application. Apps such as a stock market app that prioritize current information
should auto-update and notify the user as soon as possible.&lt;/p&gt;
&lt;p&gt;It is recommended that you let the user know that your web app has been updated &amp;quot;in the background&amp;quot;
by using a visual cue such as, for example, a material design toast element. This involves detecting both the
the presence of a service worker and an update to its managed
content. You can see a code example of this &lt;a href=&quot;https://github.com/GoogleChrome/sw-precache/blob/master/demo/app/js/service-worker-registration.js#L29&quot;&gt;function
at work here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One example of this would be &lt;a href=&quot;https://chromestatus.com/&quot; rel=&quot;noopener&quot;&gt;Chrome Platform Status&lt;/a&gt;
which posts a note to the user when the app has been updated.&lt;/p&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;An example weather app.&quot; decoding=&quot;async&quot; height=&quot;598&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 324px) 324px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ikam7evJEVSicAnVxvWA.png?auto=format&amp;w=648 648w&quot; width=&quot;324&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Some apps, like the weather app, need to auto-update, as old data
    is not useful.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Chrome Status uses a toast&quot; decoding=&quot;async&quot; height=&quot;598&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 336px) 336px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/5TtIkRCPsuxAOajX8LPF.png?auto=format&amp;w=672 672w&quot; width=&quot;336&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Apps like Chrome Status let the user know
    when content has been updated via a toast notification.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You may also show the last time the app was updated at all times in a prominent space. This would
be useful for a currency converter app, for example.&lt;/p&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The Material Money app being out-of-date.&quot; decoding=&quot;async&quot; height=&quot;598&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 324px) 324px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/nK4V7aUvmLvaNJgF1S2I.png?auto=format&amp;w=648 648w&quot; width=&quot;324&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Material Money caches rates…
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Material money has been updated&quot; decoding=&quot;async&quot; height=&quot;598&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 324px) 324px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wqaFuHzeAC2wR0D3pt7R.png?auto=format&amp;w=648 648w&quot; width=&quot;324&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    …and notifies the user when the app has been updated.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Applications such as news apps could show a simple tap-to-update notification
informing the user of new content. Auto-updating would cause users to lose
their place.&lt;/p&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;An example news app, Tailpiece in its normal state&quot; decoding=&quot;async&quot; height=&quot;665&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 360px) 360px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=720 720w&quot; width=&quot;360&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Tailpiece, an online newspaper, will auto-download the latest news…
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Example news app, Tailpiece when its ready to be updated&quot; decoding=&quot;async&quot; height=&quot;665&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 360px) 360px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/WNIMNF14cSF29fntl1Lc.png?auto=format&amp;w=720 720w&quot; width=&quot;360&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    …but allow users to refresh manually so they do not lose their place in an article.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;update-the-ui-to-reflect-the-current-contextual-state&quot;&gt;Update the UI to reflect the current contextual state &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#update-the-ui-to-reflect-the-current-contextual-state&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Each bit of UI may have its own context and functionality that will change depending on if it
requires a successful connection. One example would be an e-commerce site that can be browsed
offline. The Buy button and pricing would be disabled until a connection is reestablished.&lt;/p&gt;
&lt;p&gt;Other forms of contextual states could include data. For example, the financial application
Robinhood allows users to buy stock and uses color and graphics to notify the user when the market
is open. The whole interface turns white and then grays out when the market closes. When the value
of stock increases or decreases, each individual stock widget turns green or red depending on its
state.&lt;/p&gt;
&lt;h3 id=&quot;educate-the-user-so-they-understand-what-the-offline-model-is&quot;&gt;Educate the user so they understand what the offline model is &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#educate-the-user-so-they-understand-what-the-offline-model-is&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Offline is a new mental model for everyone. You need to educate your users about what changes will
occur when they don&#39;t have a connection. Inform them of where large data is saved and give them
settings to change the default behavior. Make sure you use multiple UI design components such as
informative language, icons, notifications, color, and imagery to convey these ideas collectively
rather than relying on a single design choice, such as an icon on its own, to tell the whole story.&lt;/p&gt;
&lt;h2 id=&quot;provide-an-offline-experience-by-default&quot;&gt;Provide an offline experience by default &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#provide-an-offline-experience-by-default&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If your app doesn&#39;t require much data, then cache that data by default. Users can become
increasingly frustrated if they can only access their data with a network connection. Try to make
the experience as stable as possible. An unstable connection will make your app feel untrustworthy,
where an app that lessens the impact of a network failure will feel magical to the user.&lt;/p&gt;
&lt;p&gt;News sites could benefit from auto-downloading and auto-saving the latest news so a
user could read today&#39;s news without a connection, perhaps downloading the text without the article
images. Also, adapt to the user&#39;s behavior. For example, if the sports section is what they typically view,
make that the priority download.&lt;/p&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Tailpiece informs the user that they are offline with various design widgets&quot; decoding=&quot;async&quot; height=&quot;665&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 360px) 360px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/M39yiHQYpXacVII6d7zX.png?auto=format&amp;w=720 720w&quot; width=&quot;360&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    If the device is offline, Tailpiece will notify the user with a status message…
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Tailpiece has a visual indicator that shows what sections are ready for offline use.&quot; decoding=&quot;async&quot; height=&quot;665&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 360px) 360px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KpkzjYNoCWquWKXTvM28.png?auto=format&amp;w=720 720w&quot; width=&quot;360&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    …letting them know that they can at least partially still use the app.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;When it comes to communicating an app&#39;s status, saying &amp;quot;The network is down&amp;quot; sends the message
that the app&#39;s network is experiencing problems, whereas &amp;quot;You are disconnected&amp;quot; makes it clearer
to the user that the problem is on their end.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;inform-the-user-when-the-app-is-ready-for-offline-consumption&quot;&gt;Inform the user when the app is ready for offline consumption &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#inform-the-user-when-the-app-is-ready-for-offline-consumption&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When a web app first loads you need to indicate to the user if it is ready for offline use. Do this
with a
&lt;a href=&quot;https://material.io/components/snackbars&quot; rel=&quot;noopener&quot;&gt;widget that provides brief feedback&lt;/a&gt;
about an operation through a message at the bottom of the screen such as, for example, when a section has
been synced or a data file has downloaded.&lt;/p&gt;
&lt;p&gt;Again think of the language you are using to make sure it is fit for your audience. Ensure the
messaging is given the same in all instances where it&#39;s used. The term offline is generally
misunderstood by a non-technical audience so use action-based language that your audience can relate
to.&lt;/p&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;I/O app offline&quot; decoding=&quot;async&quot; height=&quot;664&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 360px) 360px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/fNOute6xBzFcDUNMeXDe.png?auto=format&amp;w=720 720w&quot; width=&quot;360&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    The Google I/O 2016 app notifies the user when
    the app is ready for offline use…
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Chrome Status site is offline&quot; decoding=&quot;async&quot; height=&quot;664&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 360px) 360px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Od6jUnazP8n7CMe18G2C.png?auto=format&amp;w=720 720w&quot; width=&quot;360&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    …and so does the Chrome Platform Status site, which includes information about the occupied storage.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;make-&#39;save-for-offline&#39;-an-obvious-part-of-the-interface-for-data-heavy-apps&quot;&gt;Make &#39;save for offline&#39; an obvious part of the interface for data-heavy apps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#make-&#39;save-for-offline&#39;-an-obvious-part-of-the-interface-for-data-heavy-apps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If an application uses large amounts of data, make sure that there is a switch or pin to add an item
for offline use rather than auto-downloading, unless a user has specifically asked for this behavior
via a settings menu. Make sure that the pin or download UI is not obscured by other UI elements and
that the feature is obvious to the user.&lt;/p&gt;
&lt;p&gt;One example would be a music player that requires large data files. The user is aware of the
associated data cost, but may also want to use the player offline.
Downloading music for later use requires the user to plan ahead, so education about this may be
required during onboarding.&lt;/p&gt;
&lt;h3 id=&quot;clarify-what-is-available-offline&quot;&gt;Clarify what is available offline &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#clarify-what-is-available-offline&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Be clear as to the option you are providing. You may need to show a tab or setting that shows an
&amp;quot;offline library&amp;quot; or &lt;a href=&quot;https://web.dev/content-indexing-api/&quot;&gt;content index&lt;/a&gt;,
so the user can easily see what they have stored on their phone and what needs to
be saved. Make sure the settings are concise and be clear where the data will be stored and who has
access to it.&lt;/p&gt;
&lt;h3 id=&quot;show-the-actual-cost-of-an-action&quot;&gt;Show the actual cost of an action &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#show-the-actual-cost-of-an-action&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Many users equate offline capability with &#39;downloading&#39;. Users in countries where network
connections regularly fail or aren&#39;t available often share content with other users, or save content
for offline use when they have connectivity.&lt;/p&gt;
&lt;p&gt;Users on data plans may avoid downloading large files for fear of cost, so you may also want to
display an associated cost so users can make an active comparison for a specific file or task. For
example, if the music app above could detect if the user is on a data plan and show the file size so
that users can see the cost of a file.&lt;/p&gt;
&lt;h3 id=&quot;help-prevent-hacked-experiences&quot;&gt;Help prevent hacked experiences &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#help-prevent-hacked-experiences&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Often users hack an experience without realizing they are doing it. For example before cloud-based
file sharing web apps, it was common for users to save large files and attach them to emails so
they could carry on editing from a different device. It is important not to be pulled into their
hacked experience but rather look at what they are trying to achieve. In other words instead of
thinking of how you can make attaching a large file more user-friendly, solve the problem of
sharing large files across multiple devices.&lt;/p&gt;
&lt;h2 id=&quot;make-experiences-transferable-from-one-device-to-another&quot;&gt;Make experiences transferable from one device to another &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#make-experiences-transferable-from-one-device-to-another&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When building for flaky networks, try to sync as soon as the connection improves
so that the experience is transferable. For example, imagine a travel app losing
a network connection mid-way through a booking. When the connection is reestablished, the app syncs
with the user&#39;s account allowing them to continue their booking on their desktop device. Not being
able to transfer experiences can be incredibly jarring to users.&lt;/p&gt;
&lt;p&gt;Inform the user of the current state of their data. For example, you could show whether the
app has synced. Educate them where possible but try not to overburden them with messaging.&lt;/p&gt;
&lt;h2 id=&quot;create-inclusive-design-experiences&quot;&gt;Create inclusive design experiences &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#create-inclusive-design-experiences&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When designing seek to be inclusive by providing meaningful design devices, simple language,
standard iconography, and meaningful imagery that will guide the user to complete the action or task
rather than hinder their progress.&lt;/p&gt;
&lt;h3 id=&quot;use-simple-concise-language&quot;&gt;Use simple, concise language &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#use-simple-concise-language&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Good UX is not just about a well designed interface. It includes the path a user takes as well as
the words used in the app. Avoid tech jargon when explaining the state of the app or
individual UI components. Consider that the phrase &amp;quot;app offline&amp;quot; might not convey to the user the
current state of the app.&lt;/p&gt;
&lt;div class=&quot;w-columns&quot;&gt;
&lt;figure class=&quot;w-compare&quot;&gt;&lt;p class=&quot;w-compare__label w-compare__label--worse&quot;&gt;Don&#39;t&lt;/p&gt;
  &lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
    &lt;img alt=&quot;A service worker icon is a bad example&quot; decoding=&quot;async&quot; height=&quot;149&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 350px) 350px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MaYiuInHsZ2mbPQcbD4l.png?auto=format&amp;w=700 700w&quot; width=&quot;350&quot; /&gt;
    &lt;figcaption class=&quot;w-figcaption&quot;&gt;
      Avoid terms that aren&#39;t intelligible to non-technical users.
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/figure&gt;
&lt;figure class=&quot;w-compare&quot;&gt;&lt;p class=&quot;w-compare__label w-compare__label--better&quot;&gt;Do&lt;/p&gt;
  &lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
    &lt;img alt=&quot;A download icon is a good example&quot; decoding=&quot;async&quot; height=&quot;149&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 350px) 350px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZIjYKLFK5DbrDJDJeDqu.png?auto=format&amp;w=700 700w&quot; width=&quot;350&quot; /&gt;
    &lt;figcaption class=&quot;w-figcaption&quot;&gt;
      Use language and imagery that describes the action.
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&quot;use-multiple-design-devices-to-create-accessible-user-experiences&quot;&gt;Use multiple design devices to create accessible user experiences &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#use-multiple-design-devices-to-create-accessible-user-experiences&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use language, color, and visual components to demonstrate a change of state or current status.
Solely using color to demonstrate state may not be noticed by the user and may be inaccessible to
users who suffer from visual disabilities. Also, the instinct for designers is to use grayed UI
to represent offline, but this can have a loaded meaning on the web. Grayed UI such as input elements
on a form also means that an element is disabled. This can cause confusion if you &lt;em&gt;only&lt;/em&gt;
use color to depict state.&lt;/p&gt;
&lt;p&gt;To prevent misunderstandings, express different states to the user in multiple ways, for example
with color, labels, and UI components.&lt;/p&gt;
&lt;div class=&quot;w-columns&quot;&gt;
&lt;figure class=&quot;w-compare&quot;&gt;&lt;p class=&quot;w-compare__label w-compare__label--worse&quot;&gt;Don&#39;t&lt;/p&gt;
  &lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
    &lt;img alt=&quot;A bad example only using color.&quot; decoding=&quot;async&quot; height=&quot;368&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 720px) 720px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Uj28SN1ZepiIvya4YTe1.png?auto=format&amp;w=1440 1440w&quot; width=&quot;720&quot; /&gt;
    &lt;figcaption class=&quot;w-figcaption&quot;&gt;
      Use color as the sole means to describe what is happening.
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/figure&gt;
&lt;figure class=&quot;w-compare&quot;&gt;&lt;p class=&quot;w-compare__label w-compare__label--better&quot;&gt;Do&lt;/p&gt;
  &lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
    &lt;img alt=&quot;A good example that uses color and text to show an error.&quot; decoding=&quot;async&quot; height=&quot;368&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 720px) 720px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/s78eC2GBEkDQouqhBYMO.png?auto=format&amp;w=1440 1440w&quot; width=&quot;720&quot; /&gt;
    &lt;figcaption class=&quot;w-figcaption&quot;&gt;
      Use a mixture of design elements to convey meaning
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&quot;use-icons-that-convey-meaning&quot;&gt;Use icons that convey meaning &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#use-icons-that-convey-meaning&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Make sure that information is conveyed correctly with meaningful text labels as well as icons. Icons
alone can be problematic, since the concept of offline on the web is relatively new. Users may
misunderstand icons used on their own. For example, using a floppy disc for save makes sense to an
older generation but young users who have never seen a floppy disc may be confused by the metaphor.
Likewise, the &#39;hamburger&#39; menu icon has been known to confuse users when presented without a label.&lt;/p&gt;
&lt;p&gt;When introducing an offline icon try to remain consistent with industry standard visuals (when they
exist) as well as providing a text label and description. For example, saving for offline might be
a typical download icon or perhaps if the action involves syncing it could be a syncing icon. Some
actions may be interpreted as saving for offline rather than demonstrating a network&#39;s status. Think
of the action you are trying to convey rather than presenting the user with an abstract concept. For
example, save or download data would be action-based.&lt;/p&gt;
&lt;img alt=&quot;Various icon examples that convey offline&quot; decoding=&quot;async&quot; height=&quot;299&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 700px) 700px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/h2FFD3nLIOdSzWg5H5kO.png?auto=format&amp;w=1400 1400w&quot; width=&quot;700&quot; /&gt;
&lt;p&gt;Offline can mean a number of things depending on the context, such as download, export, pin, etc.
For more inspiration checkout the
&lt;a href=&quot;https://material.io/resources/icons/&quot; rel=&quot;noopener&quot;&gt;Material Design icon set&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;use-skeleton-layouts-with-other-feedback-mechanisms&quot;&gt;Use skeleton layouts with other feedback mechanisms &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#use-skeleton-layouts-with-other-feedback-mechanisms&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A skeleton layout is essentially a wireframe version of your app that displays while content is
being loaded. This helps demonstrate to the user that content is about to be loaded. Consider also
using a preloader UI as well, with a text label informing the user that the app is loading. One
example would be to pulsate the wireframe content giving the app the feeling that it is alive and
loading. This reassures the user that something is happening and helps prevent resubmissions or
refreshes of your app.&lt;/p&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A skeleton layout example&quot; decoding=&quot;async&quot; height=&quot;665&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 360px) 360px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/pUIrcbblhHe5YPSrrwRy.png?auto=format&amp;w=720 720w&quot; width=&quot;360&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    Skeleton placeholder layout is shown during the download of the article…
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure style=&quot;display: inline-block; max-width: 45%;&quot; class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A loaded article example&quot; decoding=&quot;async&quot; height=&quot;665&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 360px) 360px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rRLScscdU9BE9Wt4RYAx.png?auto=format&amp;w=720 720w&quot; width=&quot;360&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    …that gets replaced with the real contents once the download finishes.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;don&#39;t-block-content&quot;&gt;Don&#39;t block content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#don&#39;t-block-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In some applications, a user might trigger an action such as creating a new document. Some apps will
try to connect to a server in order to sync the new document and to demonstrate this they display an
intrusive loading modal dialog that covers the entire screen. This may work fine if the user has a
stable network connection, but if the network is unstable they won&#39;t be able to escape from this
action and the UI effectively blocks them from doing anything else. Network requests that block
content should be avoided. Allow the user to continue to browse your app and queue tasks that will
be performed and synced once the connection has improved.&lt;/p&gt;
&lt;p&gt;Demonstrate the state of an action by providing your users with feedback. For example, if a user is
editing a doc, consider changing the feedback design so it is visibly different from when they are
online but still shows that their file was &amp;quot;saved&amp;quot; and will sync when they have a network
connection. This will educate the user about the different states available and reassure them that
their task or action has been stored. This has the added benefit of the user growing more confident
using your application.&lt;/p&gt;
&lt;h2 id=&quot;design-for-the-next-billion&quot;&gt;Design for the next billion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#design-for-the-next-billion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In many regions, low-end devices are commonplace, connectivity is unreliable and, for many users,
data is unaffordable. You will need to earn user trust by being transparent and frugal with data.
Think about ways to help users on poor connections and simplify the interface to help speed up
tasks. Always try to ask users before downloading data-heavy content.&lt;/p&gt;
&lt;p&gt;Offer low bandwidth options for users on laggy connections. So if the network connection is slow,
provide small assets. Offer an option to choose high or low quality assets.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/offline-ux-design-guidelines/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Education is key to offline UX as users are unfamiliar with these concepts. Try to create associations
with things that are familiar, e.g downloading for later use is the same as offlining data.&lt;/p&gt;
&lt;p&gt;When designing for unstable network connections, remember these guidelines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Think how you design for the success, failure, and instability of a network connection.&lt;/li&gt;
&lt;li&gt;Data may be expensive, so be considerate to the user.&lt;/li&gt;
&lt;li&gt;For most users globally, the tech environment is almost exclusively mobile.&lt;/li&gt;
&lt;li&gt;Low-end devices are commonplace, with limited storage, memory and processing power, and small
displays and lower touchscreen quality. Make sure performance is a part of your design process.&lt;/li&gt;
&lt;li&gt;Allow users to browse your application when they are offline.&lt;/li&gt;
&lt;li&gt;Inform users of their current state and of changes in states.&lt;/li&gt;
&lt;li&gt;Try to provide offline by default if your app doesn&#39;t require much data.&lt;/li&gt;
&lt;li&gt;If the app is data-heavy, educate users about how they can download for offline use.&lt;/li&gt;
&lt;li&gt;Make experiences transferable between devices.&lt;/li&gt;
&lt;li&gt;Utilize language, icons, imagery, typography, and color to express ideas to the user collectively.&lt;/li&gt;
&lt;li&gt;Provide reassurance and feedback to help the user.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Mustafa Kurtuldu</name>
    </author><author>
      <name>Thomas Steiner</name>
    </author>
  </entry>
  
  <entry>
    <title>Experimenting with WebTransport</title>
    <link href="https://web.dev/webtransport/"/>
    <updated>2020-06-08T00:00:00Z</updated>
    <id>https://web.dev/webtransport/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--caution&quot;&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;:
This proposal continues to change during the origin trial period. There
may be a divergence between the browser implementation and the information in this
article.&lt;/p&gt;
&lt;p&gt;For the latest on this evolving proposal, please read refer to the
&lt;a href=&quot;https://w3c.github.io/webtransport/&quot; rel=&quot;noopener&quot;&gt;editor&#39;s draft of WebTransport&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the proposal stabilizes, we will update this article and associated code
samples with up to date information.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#background&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;what&#39;s-webtransport&quot;&gt;What&#39;s WebTransport? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#what&#39;s-webtransport&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://w3c.github.io/webtransport/&quot; rel=&quot;noopener&quot;&gt;WebTransport&lt;/a&gt; is a web API that uses the &lt;a href=&quot;https://quicwg.org/base-drafts/draft-ietf-quic-http.html&quot; rel=&quot;noopener&quot;&gt;HTTP/3&lt;/a&gt; protocol as a bidirectional transport. It&#39;s intended for two-way communications between a web client and an HTTP/3 server. It supports sending data both unreliably via its &lt;a href=&quot;https://web.dev/webtransport/#datagram&quot;&gt;datagram APIs&lt;/a&gt;, and reliably via its &lt;a href=&quot;https://web.dev/webtransport/#stream&quot;&gt;streams APIs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-datagram-00&quot; rel=&quot;noopener&quot;&gt;Datagrams&lt;/a&gt; are ideal for sending and receiving data that do not need strong delivery guarantees. Individual packets of data are limited in size by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_transmission_unit&quot; rel=&quot;noopener&quot;&gt;maximum transmission unit (MTU)&lt;/a&gt; of the underlying connection, and may or may not be transmitted successfully, and if they are transferred, they may arrive in an arbitrary order. These characteristics make the datagram APIs ideal for low-latency, best-effort data transmission. You can think of datagrams as &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot; rel=&quot;noopener&quot;&gt;user datagram protocol (UDP)&lt;/a&gt; messages, but encrypted and congestion-controlled.&lt;/p&gt;
&lt;p&gt;The streams APIs, in contrast, provide &lt;a href=&quot;https://en.wikipedia.org/wiki/Reliability_(computer_networking)&quot; rel=&quot;noopener&quot;&gt;reliable&lt;/a&gt;, ordered data transfer. They&#39;re &lt;a href=&quot;https://quicwg.org/base-drafts/draft-ietf-quic-transport.html#name-streams&quot; rel=&quot;noopener&quot;&gt;well-suited&lt;/a&gt; to scenarios where you need to send or receive one or more streams of ordered data. Using multiple WebTransport streams is analogous to establishing multiple &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot; rel=&quot;noopener&quot;&gt;TCP&lt;/a&gt; connections, but since HTTP/3 uses the lighter-weight &lt;a href=&quot;https://www.chromium.org/quic&quot; rel=&quot;noopener&quot;&gt;QUIC&lt;/a&gt; protocol under the hood, they can be opened and closed without as much overhead.&lt;/p&gt;
&lt;h3 id=&quot;use-cases&quot;&gt;Use cases &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#use-cases&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This a small list of possible ways developers might use WebTransport.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sending game state at a regular interval with minimal latency to a server via small, unreliable, out-of-order messages.&lt;/li&gt;
&lt;li&gt;Receiving media streams pushed from a server with minimal latency, independent of other data streams.&lt;/li&gt;
&lt;li&gt;Receiving notifications pushed from a server while a web page is open.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As part of the origin trial process, we&#39;re interested in &lt;a href=&quot;https://web.dev/webtransport/#feedback&quot;&gt;hearing more&lt;/a&gt; about how you plan to use WebTransport.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Many of the concepts in this proposal were previously experimented with as part of the earlier QuicTransport origin trial, which did not end up being released as part of Chrome.&lt;/p&gt;
&lt;p&gt;WebTransport helps with similar use cases as QuicTransport, with the primary difference being that &lt;a href=&quot;https://quicwg.org/base-drafts/draft-ietf-quic-http.html&quot; rel=&quot;noopener&quot;&gt;HTTP/3&lt;/a&gt; instead of &lt;a href=&quot;https://www.chromium.org/quic&quot; rel=&quot;noopener&quot;&gt;QUIC&lt;/a&gt; is the underlying transport protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;status&quot;&gt;Current status &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#status&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. Create explainer&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/w3c/webtransport/blob/main/explainer.md&quot; rel=&quot;noopener&quot;&gt;Complete&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. Create initial draft of specification&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://w3c.github.io/webtransport/&quot; rel=&quot;noopener&quot;&gt;Complete&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3. Gather feedback and iterate design&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/webtransport/#feedback&quot;&gt;&lt;strong&gt;In Progress&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4. Origin trial&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/webtransport/#register-for-ot&quot;&gt;&lt;strong&gt;In Progress&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5. Launch&lt;/td&gt;
&lt;td&gt;Not Started&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;webtransport&#39;s-relationship-to-other-technologies&quot;&gt;WebTransport&#39;s relationship to other technologies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#webtransport&#39;s-relationship-to-other-technologies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;is-webtransport-a-replacement-for-websockets&quot;&gt;Is WebTransport a replacement for WebSockets? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#is-webtransport-a-replacement-for-websockets&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Maybe. There are use cases where either &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API&quot; rel=&quot;noopener&quot;&gt;WebSockets&lt;/a&gt; or WebTransport might be valid communication protocols to use.&lt;/p&gt;
&lt;p&gt;WebSockets communications are modeled around a single, reliable, ordered stream of messages, which is fine for some types of communication needs. If you need those characteristics, then WebTransport&#39;s streams APIs can provide them as well. In comparison, WebTransport&#39;s datagram APIs provide low-latency delivery, without guarantees about reliability or ordering, so they&#39;re not a direct replacement for WebSockets.&lt;/p&gt;
&lt;p&gt;Using WebTransport, via the datagram APIs or via multiple concurrent Streams API instances, means that you don&#39;t have to worry about &lt;a href=&quot;https://en.wikipedia.org/wiki/Head-of-line_blocking&quot; rel=&quot;noopener&quot;&gt;head-of-line blocking&lt;/a&gt;, which can be an issue with WebSockets. Additionally, there are performance benefits when establishing new connections, as the underlying &lt;a href=&quot;https://www.fastly.com/blog/quic-handshake-tls-compression-certificates-extension-study&quot; rel=&quot;noopener&quot;&gt;QUIC handshake&lt;/a&gt; is faster than starting up TCP over TLS.&lt;/p&gt;
&lt;p&gt;WebTransport is part of a new draft specification, and as such the WebSocket ecosystem around client and server libraries is currently much more robust. If you need something that works &amp;quot;out of the box&amp;quot; with common server setups, and with broad web client support, WebSockets is a better choice today.&lt;/p&gt;
&lt;h3 id=&quot;is-webtransport-the-same-as-a-udp-socket-api&quot;&gt;Is WebTransport the same as a UDP Socket API? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#is-webtransport-the-same-as-a-udp-socket-api&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;No. WebTransport is not a &lt;a href=&quot;https://www.w3.org/TR/raw-sockets/&quot; rel=&quot;noopener&quot;&gt;UDP Socket API&lt;/a&gt;. While WebTransport uses HTTP/3, which in turn uses UDP &amp;quot;under the hood,&amp;quot; WebTransport has requirements around encryption and congestion control that make it more than a basic UDP Socket API.&lt;/p&gt;
&lt;h3 id=&quot;is-webtransport-an-alternative-to-webrtc-data-channels&quot;&gt;Is WebTransport an alternative to WebRTC data channels? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#is-webtransport-an-alternative-to-webrtc-data-channels&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, for client-server connections. WebTransport shares many of the same properties as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel&quot; rel=&quot;noopener&quot;&gt;WebRTC data channels&lt;/a&gt;, although the underlying protocols are different.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;WebRTC data channels support peer-to-peer communications, but WebTransport only supports client-server connection. If you have multiple clients that need to talk directly to each other, then WebTransport isn&#39;t a viable alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Generally, running a HTTP/3-compatible server requires less setup and configuration than maintaining a WebRTC server, which involves understanding multiple protocols (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Connectivity#ICE_candidates&quot; rel=&quot;noopener&quot;&gt;ICE&lt;/a&gt;, &lt;a href=&quot;https://webrtc-security.github.io/#4.3.1.&quot; rel=&quot;noopener&quot;&gt;DTLS&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCSctpTransport&quot; rel=&quot;noopener&quot;&gt;SCTP&lt;/a&gt;) in order to get a working transport. WebRTC entails many more moving pieces that could lead to failed client/server negotiations.&lt;/p&gt;
&lt;p&gt;The WebTransport API was designed with the web developer use cases in mind, and should feel more like writing modern web platform code than using WebRTC&#39;s data channel interfaces. &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=302019&quot; rel=&quot;noopener&quot;&gt;Unlike WebRTC&lt;/a&gt;, WebTransport is supported inside of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&quot; rel=&quot;noopener&quot;&gt;Web Workers&lt;/a&gt;, which allows you to perform client-server communications independent of a given HTML page. Because WebTransport exposes a &lt;a href=&quot;https://streams.spec.whatwg.org/&quot; rel=&quot;noopener&quot;&gt;Streams&lt;/a&gt;-compliant interface, it supports optimizations around &lt;a href=&quot;https://streams.spec.whatwg.org/#backpressure&quot; rel=&quot;noopener&quot;&gt;backpressure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, if you already have a working WebRTC client/server setup that you&#39;re happy with, switching to WebTransport may not offer many advantages.&lt;/p&gt;
&lt;h2 id=&quot;try-it-out&quot;&gt;Try it out &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#try-it-out&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The best way to experiment with WebTransport is to start up a compatible HTTP/3 server locally. (Unfortunately, a public reference server compatible with the latest specification is not currently available.) You can then use this page with a &lt;a href=&quot;https://googlechrome.github.io/samples/webtransport/client.html&quot; rel=&quot;noopener&quot;&gt;basic JavaScript client&lt;/a&gt; to try out client/server communications.&lt;/p&gt;
&lt;h2 id=&quot;using-the-api&quot;&gt;Using the API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#using-the-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebTransport was designed on top of modern web platform primitives, like the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Streams_API&quot; rel=&quot;noopener&quot;&gt;Streams API&lt;/a&gt;. It relies heavily on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot; rel=&quot;noopener&quot;&gt;promises&lt;/a&gt;, and works well with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The WebTransport &lt;a href=&quot;https://web.dev/webtransport/#register-for-ot&quot;&gt;origin trial&lt;/a&gt; supports three distinct types of traffic: datagrams, as well as both unidirectional and bidirectional streams.&lt;/p&gt;
&lt;h3 id=&quot;connecting-to-a-server&quot;&gt;Connecting to a server &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#connecting-to-a-server&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can connect to a HTTP/3 server by creating a &lt;code&gt;WebTransport&lt;/code&gt; instance. The scheme of the URL should be &lt;code&gt;https&lt;/code&gt;. You need to explicitly specify the port number.&lt;/p&gt;
&lt;p&gt;You should use the &lt;code&gt;ready&lt;/code&gt; promise to wait for the connection to be established. This promise will not be fulfilled until the setup is complete, and will reject if the connection fails at the QUIC/TLS stage.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;closed&lt;/code&gt; promise fulfills when the connection closes normally, and rejects if the closure was unexpected.&lt;/p&gt;
&lt;p&gt;If the server rejects the connection due to a &lt;a href=&quot;https://tools.ietf.org/html/draft-vvv-webtransport-quic-01#section-3.2&quot; rel=&quot;noopener&quot;&gt;client indication&lt;/a&gt; error (e.g. the path of the URL is invalid), then that causes &lt;code&gt;closed&lt;/code&gt; to reject, while &lt;code&gt;ready&lt;/code&gt; remains unresolved.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://example.com:4999/foo/bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transport &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebTransport&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Optionally, set up functions to respond to&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// the connection closing:&lt;/span&gt;&lt;br /&gt;transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;closed&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The HTTP/3 connection to &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; closed gracefully.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The HTTP/3 connection to ${url} closed due to ${error}.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Once .ready fulfills, the connection can be used.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ready&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;datagram&quot;&gt;Datagram APIs &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#datagram&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you have a WebTransport instance that&#39;s connected to a server, you can use it to send and receive discrete bits of data, known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Datagram&quot; rel=&quot;noopener&quot;&gt;datagrams&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;writeable&lt;/code&gt; getter returns a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WritableStream&quot; rel=&quot;noopener&quot;&gt;WritableStream&lt;/a&gt;&lt;/code&gt;, which a web client can use to send data to the server. The &lt;code&gt;readable&lt;/code&gt; getter returns a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream&quot; rel=&quot;noopener&quot;&gt;ReadableStream&lt;/a&gt;&lt;/code&gt;, allowing you to listen for data from the server. Both streams are inherently unreliable, so it is possible that the data you write will not be received by the server, and vice versa.&lt;/p&gt;
&lt;p&gt;Both types of streams use &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot; rel=&quot;noopener&quot;&gt;Uint8Array&lt;/a&gt;&lt;/code&gt; instances for data transfer.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Send two datagrams to the server.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; writer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datagrams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Read datagrams from the server.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datagrams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; done&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// value is a Uint8Array.&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Chrome does not &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=929585&quot; rel=&quot;noopener&quot;&gt;currently&lt;/a&gt; expose an &lt;a href=&quot;https://github.com/whatwg/streams/issues/778&quot; rel=&quot;noopener&quot;&gt;async iterator&lt;/a&gt; for a &lt;code&gt;ReadableStream&lt;/code&gt;. For the time being, using the &lt;code&gt;getReader()&lt;/code&gt; method combined with a &lt;code&gt;while()&lt;/code&gt; loop is the best way to read from the stream.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;stream&quot;&gt;Streams APIs  &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#stream&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you&#39;ve connected to the server, you could also use WebTransport to send and receive data via its Streams APIs.&lt;/p&gt;
&lt;p&gt;Each chunk of all streams is a &lt;code&gt;Uint8Array&lt;/code&gt;. Unlike with the Datagram APIs, these streams are reliable. But each stream is independent, so data order across streams is not guaranteed.&lt;/p&gt;
&lt;h4 id=&quot;sendstream&quot;&gt;SendStream &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#sendstream&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;&lt;a href=&quot;https://wicg.github.io/web-transport/#sendstream&quot; rel=&quot;noopener&quot;&gt;SendStream&lt;/a&gt;&lt;/code&gt; is created by the web client using the &lt;code&gt;createSendStream()&lt;/code&gt; method of a &lt;code&gt;WebTransport&lt;/code&gt; instance, which returns a promise for the &lt;code&gt;SendStream&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/close&quot; rel=&quot;noopener&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter&quot; rel=&quot;noopener&quot;&gt;WritableStreamDefaultWriter&lt;/a&gt;&lt;/code&gt; to close the associated HTTP/3 connection. The browser tries to send all pending data before actually closing the associated connection.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Send two Uint8Arrays to the server.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createSendStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; writer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;All data has been sent.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;An error occurred: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;error&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Similarly, use the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/abort&quot; rel=&quot;noopener&quot;&gt;abort()&lt;/a&gt;&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter&quot; rel=&quot;noopener&quot;&gt;WritableStreamDefaultWriter&lt;/a&gt;&lt;/code&gt; to send a &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-transport-27#section-19.4&quot; rel=&quot;noopener&quot;&gt;QUIC RESET_STREAM&lt;/a&gt; to the server. When using &lt;code&gt;abort()&lt;/code&gt;, the browser may discard any pending data that hasn&#39;t yet been sent.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ws &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createSendStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; writer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Not all the data may have been written.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;receivestream&quot;&gt;ReceiveStream &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#receivestream&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;&lt;a href=&quot;https://wicg.github.io/web-transport/#receivestream&quot; rel=&quot;noopener&quot;&gt;ReceiveStream&lt;/a&gt;&lt;/code&gt; is initiated by the server. Obtaining a &lt;code&gt;ReceiveStream&lt;/code&gt; is a two-step process for a web client. First, it calls the &lt;code&gt;receiveStreams()&lt;/code&gt; method of a &lt;code&gt;WebTransport&lt;/code&gt; instance, which returns a &lt;code&gt;ReadableStream&lt;/code&gt;. Each chunk of that &lt;code&gt;ReadableStream&lt;/code&gt;, is, in turn, a &lt;code&gt;ReceiveStream&lt;/code&gt; that can be used to read &lt;code&gt;Uint8Array&lt;/code&gt; instances sent by the server.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;receiveStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; receiveStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// value is a Uint8Array&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;receiveStreams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// value is an instance of ReceiveStream&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You can detect stream closure using the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader/closed&quot; rel=&quot;noopener&quot;&gt;closed&lt;/a&gt;&lt;/code&gt; promise of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader&quot; rel=&quot;noopener&quot;&gt;ReadableStreamDefaultReader&lt;/a&gt;&lt;/code&gt;. When the underlying HTTP/3 connection is &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-transport-27#section-19.8&quot; rel=&quot;noopener&quot;&gt;closed with the FIN bit&lt;/a&gt;, the &lt;code&gt;closed&lt;/code&gt; promise is fulfilled after all the data is read. When the HTTP/3 connection is closed abruptly (for example, by &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-transport-27#section-19.4&quot; rel=&quot;noopener&quot;&gt;STREAM_RESET&lt;/a&gt;&lt;/code&gt;), then the &lt;code&gt;closed&lt;/code&gt; promise rejects.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Assume an active receiveStream&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; receiveStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;closed&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The receiveStream closed gracefully.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The receiveStream closed abruptly.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;bidirectionalstream&quot;&gt;BidirectionalStream &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#bidirectionalstream&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;&lt;a href=&quot;https://wicg.github.io/web-transport/#bidirectional-stream&quot; rel=&quot;noopener&quot;&gt;BidirectionalStream&lt;/a&gt;&lt;/code&gt; might be created either by the server or the client.&lt;/p&gt;
&lt;p&gt;Web clients can create one using the &lt;code&gt;createBidirectionalStream()&lt;/code&gt; method of a &lt;code&gt;WebTransport&lt;/code&gt; instance, which returns a promise for a &lt;code&gt;BidirectionalStream&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createBidirectionalStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// stream is a BidirectionalStream&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// stream.readable is a ReadableStream&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// stream.writable is a WritableStream&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You can listen for a &lt;code&gt;BidirectionalStream&lt;/code&gt; created by the server with the &lt;code&gt;receiveBidirectionalStreams()&lt;/code&gt; method of a &lt;code&gt;WebTransport&lt;/code&gt; instance, which returns a &lt;code&gt;ReadableStream&lt;/code&gt;. Each chunk of that &lt;code&gt;ReadableStream&lt;/code&gt;, is, in turn, a &lt;code&gt;BidirectionalStream&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;receiveBidrectionalStreams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// value is a BidirectionalStream&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// value.readable is a ReadableStream&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// value.writable is a WritableStream&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;A &lt;code&gt;BidirectionalStream&lt;/code&gt; is just a combination of a &lt;code&gt;SendStream&lt;/code&gt; and &lt;code&gt;ReceiveStream&lt;/code&gt;. The examples from the previous two sections explain how to use each of them.&lt;/p&gt;
&lt;h3 id=&quot;more-examples&quot;&gt;More examples &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#more-examples&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://wicg.github.io/web-transport/&quot; rel=&quot;noopener&quot;&gt;WebTransport draft specification&lt;/a&gt; includes a number of additional inline examples, along with full documentation for all of the methods and properties.&lt;/p&gt;
&lt;h2 id=&quot;register-for-ot&quot;&gt;Enabling support during the origin trial &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#register-for-ot&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/origintrials/#/view_trial/793759434324049921&quot; rel=&quot;noopener&quot;&gt;Request a token&lt;/a&gt; for your origin.&lt;/li&gt;
&lt;li&gt;Add the token to your pages. There are two ways to do that:
&lt;ul&gt;
&lt;li&gt;Add an &lt;code&gt;origin-trial&lt;/code&gt; &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag to the head of each page. For example,
this may look something like: &lt;br /&gt;
&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;origin-trial&amp;quot; content=&amp;quot;TOKEN_GOES_HERE&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you can configure your server, you can also add the token
using an &lt;code&gt;Origin-Trial&lt;/code&gt; HTTP header. The resulting response header should
look something like:&lt;br /&gt;
&lt;code&gt;Origin-Trial: TOKEN_GOES_HERE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;webtransport-in-chrome&#39;s-devtools&quot;&gt;WebTransport in Chrome&#39;s DevTools &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#webtransport-in-chrome&#39;s-devtools&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Unfortunately, &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools&quot; rel=&quot;noopener&quot;&gt;Chrome&#39;s DevTools&lt;/a&gt; support for WebTransport is not ready for the start of the origin trial. You can &amp;quot;star&amp;quot; &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=1069742&quot; rel=&quot;noopener&quot;&gt;this Chrome issue&lt;/a&gt; to be notified about updates on the DevTools interface.&lt;/p&gt;
&lt;h2 id=&quot;privacy-and-security-considerations&quot;&gt;Privacy and security considerations &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#privacy-and-security-considerations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;See the &lt;a href=&quot;https://wicg.github.io/web-transport/#privacy-security&quot; rel=&quot;noopener&quot;&gt;corresponding section&lt;/a&gt; of the draft specification for authoritative guidance.&lt;/p&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback  &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#feedback&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Chrome team wants to hear your thoughts and experiences using this API throughout the origin trial process.&lt;/p&gt;
&lt;h3 id=&quot;feedback-about-the-api-design&quot;&gt;Feedback about the API design &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#feedback-about-the-api-design&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Is there something about the API that&#39;s awkward or doesn&#39;t work as expected? Or are there missing pieces that you need to implement your idea?&lt;/p&gt;
&lt;p&gt;File an issue on the &lt;a href=&quot;https://github.com/WICG/web-transport/issues&quot; rel=&quot;noopener&quot;&gt;Web Transport GitHub repo&lt;/a&gt;, or add your thoughts to an existing issue.&lt;/p&gt;
&lt;h3 id=&quot;problem-with-the-implementation&quot;&gt;Problem with the implementation? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#problem-with-the-implementation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Did you find a bug with Chrome&#39;s implementation?&lt;/p&gt;
&lt;p&gt;File a bug at &lt;a href=&quot;https://new.crbug.com/&quot; rel=&quot;noopener&quot;&gt;https://new.crbug.com&lt;/a&gt;. Include as much detail as you can, along with simple instructions for reproducing.&lt;/p&gt;
&lt;h3 id=&quot;planning-to-use-the-api&quot;&gt;Planning to use the API? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#planning-to-use-the-api&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Your public support helps Chrome prioritize features, and shows other browser vendors how critical it is to support them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be sure you have signed up for the &lt;a href=&quot;https://developer.chrome.com/origintrials/#/view_trial/793759434324049921&quot; rel=&quot;noopener&quot;&gt;origin trial&lt;/a&gt; to show your interest and provide your domain and contact info.&lt;/li&gt;
&lt;li&gt;Send a tweet to &lt;a href=&quot;https://twitter.com/chromiumdev&quot; rel=&quot;noopener&quot;&gt;@ChromiumDev&lt;/a&gt; using the hashtag
&lt;a href=&quot;https://twitter.com/search?q=%23WebTransport&amp;amp;src=typed_query&amp;amp;f=live&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;#WebTransport&lt;/code&gt;&lt;/a&gt;
and details on where and how you&#39;re using it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;general-discussion&quot;&gt;General discussion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#general-discussion&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use the &lt;a href=&quot;https://groups.google.com/a/chromium.org/g/web-transport-dev&quot; rel=&quot;noopener&quot;&gt;web-transport-dev Google Group&lt;/a&gt; for general questions or problems that don&#39;t fit into one of the other categories.&lt;/p&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webtransport/#acknowledgements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article incorporates information from the &lt;a href=&quot;https://github.com/wicg/web-transport/blob/master/explainer.md&quot; rel=&quot;noopener&quot;&gt;WebTransport Explainer&lt;/a&gt;, &lt;a href=&quot;https://wicg.github.io/web-transport/&quot; rel=&quot;noopener&quot;&gt;draft specification&lt;/a&gt;, and &lt;a href=&quot;https://docs.google.com/document/d/1UgviRBnZkMUq4OKcsAJvIQFX6UCXeCbOtX_wMgwD_es/edit#&quot; rel=&quot;noopener&quot;&gt;related design docs&lt;/a&gt;. Thank you to the respective authors for providing that foundation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The hero image on this post is by &lt;a href=&quot;https://unsplash.com/photos/dPgPoiUIiXk&quot; rel=&quot;noopener&quot;&gt;Robin Pierre&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Love your cache ❤️</title>
    <link href="https://web.dev/love-your-cache/"/>
    <updated>2020-12-11T00:00:00Z</updated>
    <id>https://web.dev/love-your-cache/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;&lt;em&gt;This post is a companion to the &lt;strong&gt;Love your cache&lt;/strong&gt; video, part of the Extended
Content at Chrome Dev Summit 2020. Be sure to check out the video:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;tprJYFkv4LU&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;When users load your site a second time, their browser will use resources inside
its HTTP cache to help make that load faster. But the standards for caching on
the web date back to 1999, and they&#39;re defined pretty broadly—determining
whether a file, like CSS or an image, might be fetched again from the network
versus loaded from your cache is a bit of an inexact science.&lt;/p&gt;
&lt;p&gt;In this post, I&#39;ll talk through a sensible, modern default for caching—one that
actually does &lt;em&gt;no caching at all&lt;/em&gt;. But that&#39;s just the default, and it&#39;s of
course more nuanced than just &amp;quot;turning it off&amp;quot;. Read on!&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Something to remember when building your site is that performance
metrics &lt;a href=&quot;https://web.dev/vitals&quot;&gt;like Core Web Vitals&lt;/a&gt; include all loads, not
just the 1st load. Yet, a lot of Google&#39;s guidance focuses on optimizing the
first load (which is definitely important to bring users in!), and Lighthouse
only tests your site on an empty cache.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;goals&quot;&gt;Goals &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/love-your-cache/#goals&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When a site is loaded for the 2nd time, you have two goals:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ensure that your users get the most up-to-date version available—if
you&#39;ve changed something, it should be reflected quickly&lt;/li&gt;
&lt;li&gt;Do #1 while fetching as little from the network as possible&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the broadest sense, you only want to send the smallest change to your clients
when they load your site again. And structuring your site to ensure the most
efficient distribution of any change is challenging (more on that below, and in
the video).&lt;/p&gt;
&lt;p&gt;Having said that, you also have other knobs when you consider caching—perhaps
you&#39;ve decided to let a user&#39;s browser HTTP cache hold onto your site for a long
time so that no network requests are required to serve it at all. Or you&#39;ve
constructed a service worker that will serve a site entirely offline before
checking if it&#39;s up-to-date. This is an extreme option, which is valid—and used
for many offline-first app-like web experiences—but the web doesn&#39;t need to be
at a cache-only extreme, or even a completely network-only extreme.&lt;/p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/love-your-cache/#background&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As web developers, we&#39;re all accustomed to the idea of having a &amp;quot;stale cache&amp;quot;.
But we know, almost instinctively, the tools available to solve this: do a &amp;quot;hard
refresh&amp;quot;, or open an incognito window, or use some combination of your browser&#39;s
developer tools to clear a site&#39;s data.&lt;/p&gt;
&lt;p&gt;Regular users out there on the internet don&#39;t have that same luxury. So while we
have some core goals of ensuring our users have a great time with their 2nd
load, it&#39;s also really important to make sure they don&#39;t have a &lt;em&gt;bad time&lt;/em&gt; or
get stuck. (Check out the video if you&#39;d like to hear me talk about how we
nearly got the &lt;a href=&quot;https://web.dev/live&quot;&gt;web.dev/live&lt;/a&gt; site stuck!)&lt;/p&gt;
&lt;p&gt;For a bit of background, a really common reason for &amp;quot;stale cache&amp;quot; is actually
the 1999-era default for caching. It relies on the &lt;code&gt;Last-Modified&lt;/code&gt; header:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Diagram showing how long different assets are cached by a user&amp;#x27;s browser&quot; decoding=&quot;async&quot; height=&quot;342&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Z6ApNGczaZ4ikhLEBkT4.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Assets generated at different times (in gray) will be cached for
different times, so a 2nd load can get a combination of cached and fresh assets&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Every file you load is kept for an additional 10% of its current lifetime, as
your browser sees it. For example, if &lt;code&gt;index.html&lt;/code&gt; was created a month ago,
it&#39;ll be cached by your browser for about another three days.&lt;/p&gt;
&lt;p&gt;This was a well-intentioned idea back in the day, but given the tightly
integrated nature of today&#39;s websites this default behavior means it&#39;s possible
to get into a state where a user has files designed for different releases of
your website (e.g., the JS from Tuesday&#39;s release, and the CSS from Friday&#39;s
release), all because those files were not updated at exactly the same time.&lt;/p&gt;
&lt;h2 id=&quot;the-well-lit-path&quot;&gt;The well-lit path &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/love-your-cache/#the-well-lit-path&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A modern default for caching is to actually do no caching at all, and use
&lt;a href=&quot;https://web.dev/content-delivery-networks/&quot;&gt;CDNs&lt;/a&gt; to bring your content close
to your users. Every time a user loads your site, they&#39;ll go to the network to
see whether it&#39;s up-to-date. This request will have low latency, as it&#39;ll be
provided by a CDN geographically close to each end user.&lt;/p&gt;
&lt;p&gt;You can configure your web host to respond to web requests with this header:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Cache-Control: max-age=0,must-revalidate,public&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This basically says; the file is valid for no time at all, and you must validate
it from the network before you can use it again (otherwise it&#39;s only
&amp;quot;suggested&amp;quot;).&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Instead of &lt;code&gt;max-age=0,must-revalidate&lt;/code&gt;, you could also specify &lt;code&gt;no-cache&lt;/code&gt;: this
is equivalent. However, &lt;code&gt;no-cache&lt;/code&gt; is a confusing name, because it could be
interpreted as &amp;quot;never cache this file&amp;quot;—even though that&#39;s not the case. For some
heavy reading, see
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#Directives&quot; rel=&quot;noopener&quot;&gt;Cache-Control on MDN&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This validation process is relatively cheap in terms of bytes transferred—if a
large image file hasn&#39;t changed, your browser will receive a small 304
response—but it costs &lt;em&gt;latency&lt;/em&gt; as a user must still go to the network to find
out. And this is the primary downside of this approach. It can work really well
for folks on fast connections in the 1st world, and where your CDN of choice has
great coverage, but not for those folks who might be on slower mobile
connections or using poor infrastructure.&lt;/p&gt;
&lt;p&gt;Regardless, this is a modern approach that
&lt;a href=&quot;https://www.netlify.com/blog/2017/02/23/better-living-through-caching/&quot; rel=&quot;noopener&quot;&gt;is the default on a popular CDN, Netlify&lt;/a&gt;,
but can be configured on nearly any CDN. For Firebase Hosting, you can include
this header
&lt;a href=&quot;https://firebase.google.com/docs/hosting/full-config#headers&quot; rel=&quot;noopener&quot;&gt;in the hosting section&lt;/a&gt;
of your firebase.json file:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Be sure to put this last, to not override other headers&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;**&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;max-age=0,must-revalidate,public&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;So while I still suggest this as a sensible default, it&#39;s only that—the default!
Read on to find out how to step in and upgrade the defaults.&lt;/p&gt;
&lt;h2 id=&quot;fingerprinted-urls&quot;&gt;Fingerprinted URLs &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/love-your-cache/#fingerprinted-urls&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By including a hash of the file&#39;s content in the name of assets, images, and so
on served on your site, you can ensure that these files will always have unique
content—this will result in files named &lt;code&gt;sitecode.af12de.js&lt;/code&gt; for example. When
your server responds to requests for these files, you can safely instruct your
end-user&#39;s browsers to cache them for a long time by configuring them with this
header:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Cache-Control: max-age=31536000,immutable&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This value is a year, in seconds. And according to the spec, this is effectively
equal to &amp;quot;forever&amp;quot;.&lt;/p&gt;
&lt;p&gt;Importantly, don&#39;t generate these hashes by hand—it&#39;s too much manual work! You
can use tools like Webpack, Rollup and so on to help you out with this. Be sure
to read more about them on &lt;a href=&quot;https://tooling.report/&quot; rel=&quot;noopener&quot;&gt;Tooling Report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remember that it&#39;s not just JavaScript that can benefit from fingerprinted URLs;
assets like icons, CSS and other immutable data files can also be named this
way. (And be sure to watch the video above to learn a bit more about code
splitting, which lets you ship less code whenever your site changes.)&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;We include the keyword &lt;code&gt;immutable&lt;/code&gt; in the &lt;code&gt;Cache-Control&lt;/code&gt;
recommendation above. Without this keyword, our long &lt;code&gt;Cache-Control&lt;/code&gt; is only
considered to be a suggestion, and some browsers will &lt;em&gt;still&lt;/em&gt; ignore it and go
to the server. (In 2017, Chrome
&lt;a href=&quot;https://blog.chromium.org/2017/01/reload-reloaded-faster-and-leaner-page_26.html&quot; rel=&quot;noopener&quot;&gt;changed its behavior&lt;/a&gt;,
so it always acts as if the immutable keyword is on anyway—so right now, it&#39;s
only needed for Safari and Firefox).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Regardless of how your site approaches caching, these sorts of fingerprinted
files are incredibly valuable to any site you might build. Most sites just
aren&#39;t changing on every release.&lt;/p&gt;
&lt;p&gt;Of course, we can&#39;t rename our &#39;friendly&#39;, user-facing pages this way: renaming
your &lt;code&gt;index.html&lt;/code&gt; file to &lt;code&gt;index.abcd12.html&lt;/code&gt;—that&#39;s infeasible, you can&#39;t tell
users to go to a new URL every time they load your site! These &#39;friendly&#39; URLs
can&#39;t be renamed and cached in this way, which leads me on to a possible middle
ground.&lt;/p&gt;
&lt;h2 id=&quot;the-middle-ground&quot;&gt;The middle ground &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/love-your-cache/#the-middle-ground&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&#39;s obviously room for a middle ground when it comes to caching. I&#39;ve
presented two extreme options; cache &lt;em&gt;never&lt;/em&gt;, or cache &lt;em&gt;forever&lt;/em&gt;. And there will
be a number of files which you might like to cache for a time, such as the
&amp;quot;friendly&amp;quot; URLs I mentioned above.&lt;/p&gt;
&lt;p&gt;If you do want to cache these &amp;quot;friendly&amp;quot; URLs and their HTML, it&#39;s worth
considering what dependencies they include, how &lt;em&gt;they&lt;/em&gt; may be cached, and how
caching their URLs for a time might affect you. Let&#39;s look at a HTML page which
includes an image like this:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/images/foo.jpeg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lazy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;If you update or change your site by deleting or changing this lazy-loaded
image, users who view a cached version of your HTML might get an incorrect or
missing image—because they&#39;ve still cached the original &lt;code&gt;/images/foo.jpeg&lt;/code&gt; when
they revisit your site.&lt;/p&gt;
&lt;p&gt;If you&#39;re careful, this might not affect you. But broadly it&#39;s important to
remember that your site—when cached by your end users—no longer just exists on
your servers. Rather, it may exist in &lt;em&gt;pieces&lt;/em&gt; inside the caches of your end user&#39;s
browsers.&lt;/p&gt;
&lt;p&gt;In general, most guides out there on caching will talk about this kind of
setting—do you want to cache for an hour, several hours, and so on. To set this
kind of cache up, use a header like this (which caches for 3600 seconds, or one
hour):&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Cache-Control: max-age=3600,immutable,public&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;One last point. If you&#39;re creating timely content which typically might only be
accessed by users once—like news articles!—my opinion is that these should never
be cached, and you should use our sensible default above. I think we often
overestimate the value of caching over a user&#39;s desire to always see the latest
and greatest content, such as a critical update on a news story or current
event.&lt;/p&gt;
&lt;h3 id=&quot;non-html-options&quot;&gt;Non-HTML options &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/love-your-cache/#non-html-options&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Aside from HTML, some other options for files that live in the middle ground
include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In general, look for assets that don&#39;t affect others&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example: avoid CSS, as it causes changes in how your HTML is
rendered&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Large images that are used as part of timely articles&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your users probably aren&#39;t going to visit any single article more
than a handful of times, so don&#39;t cache photos or hero images forever and
waste storage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An asset which represents something that itself has lifetime&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON data about the weather might only be published every hour, so
you can cache the previous result for an hour—it won&#39;t change in your window&lt;/li&gt;
&lt;li&gt;Builds of an open-source project might be rate-limited, so cache a
build status image until it&#39;s possible that the status might change&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/love-your-cache/#summary&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When users load your site a second time, you&#39;ve already had a vote of
confidence—they want to come back and get more of what you&#39;re offering. At this
point, it&#39;s not always just about bringing that load time down, and you have a
bunch of options available to you to ensure that your browser does only the work
it needs to deliver both a fast and an up-to-date experience.&lt;/p&gt;
&lt;p&gt;Caching is not a new concept on the web, but perhaps it needs a sensible
default—consider using one and strongly opting-in to better caching strategies
when you need them. Thanks for reading!&lt;/p&gt;
&lt;h2 id=&quot;see-also&quot;&gt;See also &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/love-your-cache/#see-also&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a general guide on the HTTP cache, check out
&lt;a href=&quot;https://web.dev/http-cache&quot;&gt;Prevent unnecessary network requests with the HTTP Cache&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Sam Thorogood</name>
    </author>
  </entry>
  
  <entry>
    <title>Extending Workbox</title>
    <link href="https://web.dev/extending-workbox/"/>
    <updated>2020-12-10T00:00:00Z</updated>
    <id>https://web.dev/extending-workbox/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;In this article, we&#39;re going to take a quick tour of some ways of extending
&lt;a href=&quot;https://developers.google.com/web/tools/workbox&quot; rel=&quot;noopener&quot;&gt;Workbox&lt;/a&gt;. By the end, you&#39;ll
be writing your own strategies and plugins, and hopefully sharing them with the
world.&lt;/p&gt;
&lt;p&gt;If you&#39;re more of a visual person, you can watch a recording of a Chrome
Dev Summit talk covering the same material:&lt;/p&gt;
&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;jR9-aDWZeSE&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;h2 id=&quot;what&#39;s-workbox&quot;&gt;What&#39;s Workbox? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#what&#39;s-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At its core, Workbox is a set of libraries to help with common service worker
caching scenarios. And when we&#39;ve written about Workbox in the past, the
emphasis has been on &amp;quot;common&amp;quot; scenarios. For most developers, the
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies&quot; rel=&quot;noopener&quot;&gt;caching strategies&lt;/a&gt;
that Workbox already provides will handle your caching needs.&lt;/p&gt;
&lt;p&gt;The built-in strategies include
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#stale-while-revalidate&quot; rel=&quot;noopener&quot;&gt;stale-while-revalidate&lt;/a&gt;,
where a cached response is used to respond to a request immediately, while the
cache is also updated so that it&#39;s fresh the next time around. They also include
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#network_first_network_falling_back_to_cache&quot; rel=&quot;noopener&quot;&gt;network-first&lt;/a&gt;,
falling back to the cache when the network is unavailable, and a few more.&lt;/p&gt;
&lt;h2 id=&quot;custom-strategies&quot;&gt;Custom strategies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#custom-strategies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But what if you wanted to go beyond those common caching scenarios? Let&#39;s cover
writing your own custom caching strategies.
&lt;a href=&quot;https://github.com/GoogleChrome/workbox/releases/tag/v6.0.0&quot; rel=&quot;noopener&quot;&gt;Workbox v6&lt;/a&gt; offers
a new &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-strategies.Strategy&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Strategy&lt;/code&gt; base class&lt;/a&gt; that sits in front of lower-level APIs, like
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot; rel=&quot;noopener&quot;&gt;Fetch&lt;/a&gt; and
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage&quot; rel=&quot;noopener&quot;&gt;Cache Storage&lt;/a&gt;.
You can extend the &lt;code&gt;Strategy&lt;/code&gt; base class, and then implement your own logic in
the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-strategies.Strategy#_handle&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;_handle()&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;handle-simultaneous-duplicate-requests-with-dedupenetworkfirst&quot;&gt;Handle simultaneous, duplicate requests with DedupeNetworkFirst &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#handle-simultaneous-duplicate-requests-with-dedupenetworkfirst&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For instance, imagine that you want to implement a strategy that can handle
multiple, simultaneous requests for the same URL by deduplicating them. A copy
of the response is then used to fulfill all of the in-flight requests, saving
bandwidth that would otherwise be wasted.&lt;/p&gt;
&lt;p&gt;Here&#39;s the code you can use to implement that, by extending the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-strategies.NetworkFirst&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;NetworkFirst&lt;/code&gt;
strategy&lt;/a&gt; (which itself extends the &lt;code&gt;Strategy&lt;/code&gt; base):&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// See https://developers.google.com/web/tools/workbox/guides/using-bundlers&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NetworkFirst&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-strategies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DedupeNetworkFirst&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NetworkFirst&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// This maps inflight requests to response promises.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_requests &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// _handle is the standard entry point for our logic.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; responsePromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;responsePromise&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// If there&#39;s already an inflight request, return a copy&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// of the eventual response.&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; responsePromise&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// If there isn&#39;t already an inflight request, then use&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// the _handle() method of NetworkFirst to kick one off.&lt;/span&gt;&lt;br /&gt;      responsePromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;_handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; responsePromise&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; responsePromise&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Make sure to clean up after a batch of inflight&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// requests are fulfilled!&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This code assumes that all requests for the same URL can be
satisfied with the same response, which won&#39;t always be the case if cookies or
session state information comes into play.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;create-a-race-between-the-cache-and-network-with-cachenetworkrace&quot;&gt;Create a race between the cache and network with CacheNetworkRace &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#create-a-race-between-the-cache-and-network-with-cachenetworkrace&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&#39;s another example of a custom strategy—one that&#39;s a twist on
stale-while-revalidate, where both the network and cache are checked at the same
time, with a race to see which will return a response first.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// See https://developers.google.com/web/tools/workbox/guides/using-bundlers&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Strategy&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-strategies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Instead of extending an existing strategy,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// this extends the generic Strategy base class.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CacheNetworkRace&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Strategy&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// _handle is the standard entry point for our logic.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;_handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// handler is an instance of the StrategyHandler class,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// and exposes helper methods for interacting with the&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// cache and network.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetchDone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchAndCachePut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; matchDone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cacheMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// The actual response generation logic relies on a &quot;race&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// between the network and cache promises.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      fetchDone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      matchDone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Promise.allSettled() is implemented in recent browsers.&lt;/span&gt;&lt;br /&gt;      Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;allSettled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fetchDone&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; matchDone&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rejected&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reason&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;stategyhandler:-the-recommended-approach-for-creating-custom-strategies&quot;&gt;StategyHandler: the recommended approach for creating custom strategies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#stategyhandler:-the-recommended-approach-for-creating-custom-strategies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although it&#39;s not required, it&#39;s strongly recommended that when interacting with
the network or cache, you use the instance of the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-strategies.StrategyHandler&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;StrategyHandler&lt;/code&gt; class&lt;/a&gt; that&#39;s
passed to your &lt;code&gt;_handle()&lt;/code&gt; method. It&#39;s the second parameter, called &lt;code&gt;handler&lt;/code&gt;
in the example code.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;StrategyHandler&lt;/code&gt; instance will automatically pick up the cache name you&#39;ve
configured for the strategy, and calling its methods will invoke the expected
plugin lifecycle callbacks that we&#39;ll describe soon.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;StrategyHandler&lt;/code&gt; instance supports the following methods:&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Method&lt;/th&gt;
        &lt;th&gt;Purpose&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Calls &lt;code&gt;fetch()&lt;/code&gt;, invokes lifecycle events.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cachePut&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Calls &lt;code&gt;cache.put()&lt;/code&gt; on the configured cache, invokes lifecycle events.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cacheMatch&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Calls &lt;code&gt;cache.match()&lt;/code&gt; on the configured cache, invokes lifecycle events.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;fetchAndCachePut&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Calls &lt;code&gt;fetch()&lt;/code&gt; and then &lt;code&gt;cache.put()&lt;/code&gt; on the configured cache, invokes
        lifecycle events.&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&quot;drop-in-support-for-routing&quot;&gt;Drop-in support for routing &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#drop-in-support-for-routing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Writing a Workbox strategy class is a great way to package up response logic in
a reusable, and shareable, form. But once you&#39;ve written one, how do you use it
within your larger Workbox service worker? That&#39;s the best part—you can drop any
of these strategies directly into your existing Workbox
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/route-requests&quot; rel=&quot;noopener&quot;&gt;routing rules&lt;/a&gt;,
just like any of the &amp;quot;official&amp;quot; strategies.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// See https://developers.google.com/web/tools/workbox/guides/using-bundlers&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;ExpirationPlugin&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-expiration&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;registerRoute&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-routing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// DedupeNetworkFirst can be defined inline, or imported.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pathname&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// DedupeNetworkFirst supports the standard strategy&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// configuration options, like cacheName and plugins.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DedupeNetworkFirst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;my-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExpirationPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;A properly written strategy should automatically work with all plugins as well.
This applies to the standard plugins that Workbox provides, like the one that
handles
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-expiration&quot; rel=&quot;noopener&quot;&gt;cache expiration&lt;/a&gt;.
But you&#39;re not limited to using the standard set of plugins! Another great way
to extend Workbox is to write your own reusable plugins.&lt;/p&gt;
&lt;h2 id=&quot;custom-plugins&quot;&gt;Custom plugins &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#custom-plugins&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking a step back, what is a Workbox plugin, and why would you write your own?
A plugin doesn&#39;t fundamentally change the order of network and cache operations
performed by a strategy. Instead, it allows you to add in extra code that will
be run at critical points in the lifetime of a request, like when a network
request fails, or when a cached response is about to be returned to the page.&lt;/p&gt;
&lt;h3 id=&quot;lifecycle-event-overview&quot;&gt;Lifecycle event overview &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#lifecycle-event-overview&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&#39;s an overview of all the events that a plugin could listen to. Technical
details about implementing callbacks for these events is in the
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/using-plugins&quot; rel=&quot;noopener&quot;&gt;Workbox documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Lifecycle Event&lt;/th&gt;
        &lt;th&gt;Purpose&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cacheWillUpdate&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Change response before it&#39;s written to cache.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cacheDidUpdate&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Do something following a cache write.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cacheKeyWillBeUsed&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Override the cache key used for reads or writes.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;cachedResponseWillBeUsed&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Change response read from cache before it&#39;s used.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;requestWillFetch&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Change request before it&#39;s sent to the network.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;fetchDidFail&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Do something when a network request fails.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;fetchDidSucceed&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Do something when a network request succeeds.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;handlerWillStart&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Take note of when a handler starts up.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;handlerWillRespond&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Take note of when a handler is about to respond.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;handlerDidRespond&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Take note of when a handler finishes responding.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;handlerDidComplete&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Take note of when a handler has run all its code.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;handlerDidError&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Provide a fallback response if a handler throws an error.&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;When writing your own plugin, you&#39;ll only implement callbacks for the limited
number of events that match your purpose—there&#39;s no need to add in callbacks for
&lt;em&gt;all&lt;/em&gt; of the possible events. Additionally, it&#39;s up to you whether you implement
your plugin as an
&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot; rel=&quot;noopener&quot;&gt;Object&lt;/a&gt;&lt;/code&gt;
with properties that match the lifecycle event names, or as a class that exposes
methods with those names.&lt;/p&gt;
&lt;h3 id=&quot;lifecycle-events-example:-fallbackonerrorplugin&quot;&gt;Lifecycle events example: FallbackOnErrorPlugin &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#lifecycle-events-example:-fallbackonerrorplugin&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For instance, here&#39;s a custom plugin class that implements callback methods for
two events: &lt;code&gt;fetchDidSucceed&lt;/code&gt;, and &lt;code&gt;handlerDidError&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FallbackOnErrorPlugin&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fallbackURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Pass in a URL that you know is cached.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fallbackURL &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fallbackURL&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;fetchDidSucceed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If the network request returned a 2xx response,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// just use it as-is.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ok&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Otherwise, throw an error to trigger handlerDidError.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error response (&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Invoked whenever the strategy throws an error during handling.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;handlerDidError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// This will match the cached URL regardless of whether&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// there&#39;s any query parameters, i.e. those added&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// by Workbox precaching.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fallbackURL&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      ignoreSearch&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This plugin class provides a &amp;quot;fallback&amp;quot; whenever a strategy would otherwise
generate an error response. It can be added to any strategy class, and if
running that strategy does not result in a &lt;code&gt;2xx OK&lt;/code&gt; response, it will use a
backup response from the cache instead.&lt;/p&gt;
&lt;h2 id=&quot;custom-strategy-or-custom-plugin&quot;&gt;Custom strategy or custom plugin? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#custom-strategy-or-custom-plugin&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that you know more about custom strategies and plugins, you might be
wondering which one to write for a given use case.&lt;/p&gt;
&lt;p&gt;A good rule of thumb is to sketch out a diagram of your desired request and
response flow, taking into account the network and cache interactions. Then,
compare that to the
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies&quot; rel=&quot;noopener&quot;&gt;diagrams&lt;/a&gt;
of the built-in strategies. If your diagram has a set of connections then that&#39;s
fundamentally different, that&#39;s a sign that a custom strategy is the best
solution.&lt;/p&gt;
&lt;p&gt;Conversely, if your diagram ends up looking mostly like a standard strategy but
with a few extra pieces of logic injected at keys points, then you should
probably write a custom plugin.&lt;/p&gt;
&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/extending-workbox/#takeaways&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Whichever approach to customizing Workbox you go with, I hope this article has
inspired you write your own strategies and plugins, and then release them on
&lt;a href=&quot;https://www.npmjs.com/&quot; rel=&quot;noopener&quot;&gt;npm&lt;/a&gt;, tagged with &lt;code&gt;workbox-strategy&lt;/code&gt; or
&lt;code&gt;workbox-plugin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using those tags, you can search npm for
&lt;a href=&quot;https://www.npmjs.com/search?q=workbox-strategy&quot; rel=&quot;noopener&quot;&gt;strategies&lt;/a&gt; and
&lt;a href=&quot;https://www.npmjs.com/search?q=workbox-plugin&quot; rel=&quot;noopener&quot;&gt;plugins&lt;/a&gt; that have already been
released.&lt;/p&gt;
&lt;p&gt;Go out there and extend Workbox, and then share what you build!&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Push notifications overview</title>
    <link href="https://web.dev/push-notifications-overview/"/>
    <updated>2020-11-10T00:00:00Z</updated>
    <id>https://web.dev/push-notifications-overview/</id>
    <content type="text/html" mode="escaped">&lt;h2 id=&quot;what&quot;&gt;What are push notifications? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#what&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Push messages enable you to bring information to the attention of your
users even when they&#39;re not using your website. They&#39;re called &lt;strong&gt;push&lt;/strong&gt;
messages because you can &amp;quot;push&amp;quot; information to your users even when they&#39;re
not active. Compare &lt;a href=&quot;https://en.wikipedia.org/wiki/Push_technology&quot; rel=&quot;noopener&quot;&gt;Push
technology&lt;/a&gt; with &lt;a href=&quot;https://en.wikipedia.org/wiki/Pull_technology&quot; rel=&quot;noopener&quot;&gt;Pull
technology&lt;/a&gt; to understand this
concept further.&lt;/p&gt;
&lt;p&gt;Notifications present small chunks of information to a user. Websites can use
notifications to tell users about important, time-sensitive events, or actions
the user needs to take. The look and feel of notifications varies between platforms:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Examples of notifications on macOS and Android.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;361&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/yC2ZZRuLFnnYGGmPUu9h.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Examples of notifications on macOS and Android.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Push messages and notifications are two separate but complementary technologies.
Push is the technology for sending messages from your server to users even when
they&#39;re not actively using your website. Notifications is the technology for
displaying the pushed information on the user&#39;s device. It&#39;s possible to use
notifications without push messaging. One day it may also be possible to use
push messages without user-facing notifications (&lt;strong&gt;silent push&lt;/strong&gt;) but browsers
currently don&#39;t allow that. In practice they&#39;re usually used together.
A non-technical user probably won&#39;t understand the difference between push
messages and notifications. In this collection when
we say &lt;strong&gt;push notifications&lt;/strong&gt; we mean the combination of pushing a message
followed by displaying it as a notification. When we say &lt;strong&gt;push messages&lt;/strong&gt;
we are referring to push technology on its own. And when we say &lt;strong&gt;notifications&lt;/strong&gt;
we&#39;re referring to notification technology on its own.&lt;/p&gt;
&lt;h2 id=&quot;why&quot;&gt;Why use push notifications? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#why&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;For users, push notifications are a way to receive &lt;strong&gt;timely&lt;/strong&gt;, &lt;strong&gt;relevant&lt;/strong&gt;,
and &lt;strong&gt;precise&lt;/strong&gt; information.&lt;/li&gt;
&lt;li&gt;For you (a website owner), push notifications are a way to increase user
engagement.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;:
If you try to use push notifications for content that your users don&#39;t find
timely, relevant, and precise, you&#39;ll probably end up annoying your users
and reducing overall engagement.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;how&quot;&gt;How do push notifications work? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#how&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At a high-level, the key steps for implementing push notifications are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding client logic to ask the user for permission to send push notifications, and
then sending client identifier information to your server for storage in a database.&lt;/li&gt;
&lt;li&gt;Adding server logic to push messages to client devices.&lt;/li&gt;
&lt;li&gt;Adding client logic to receive messages that have been pushed to the device
and displaying them as notifications.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rest of this page explains these steps in more detail.&lt;/p&gt;
&lt;h3 id=&quot;permission&quot;&gt;Get permission to send push notifications &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#permission&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First, your website needs to get the user&#39;s permission to send push notifications.
This should be triggered by a user gesture, such as clicking a &lt;strong&gt;Yes&lt;/strong&gt; button
next to a &lt;code&gt;Do you want to receive push notifications?&lt;/code&gt; prompt. After that confirmation,
call &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Notification.requestPermission()&lt;/code&gt;&lt;/a&gt;. The operating system or
browser on the user&#39;s device will probably present some kind of UI to formally confirm that the
user wants to opt in to push notifications. This UI varies across platforms.&lt;/p&gt;
&lt;h3 id=&quot;subscription&quot;&gt;Subscribe the client to push notifications &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#subscription&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After you get permission, your website needs to initiate the process of
subscribing the user to push notifications. This is done through JavaScript,
using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API&quot; rel=&quot;noopener&quot;&gt;Push API&lt;/a&gt;. You&#39;ll need to provide a public authentication key
during the subscription process, which you&#39;ll learn more about later. After
you kick off the subscription process, the browser makes a network request
to a web service known as a push service, which you&#39;ll also learn more about later.&lt;/p&gt;
&lt;p&gt;Assuming that the subscription was successful, the browser returns a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;PushSubscription&lt;/code&gt;&lt;/a&gt;
object. You&#39;ll need to store this data long-term.
Usually this is done by sending the information to a server that you control,
and then having the server store it in a database.&lt;/p&gt;
&lt;img alt=&quot;Get permission to send push messages. Get PushSubscription. Send PushSubscription to your server.&quot; decoding=&quot;async&quot; height=&quot;213&quot; loading=&quot;lazy&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/F7gyVwzozw0eYkbTBChu.svg&quot; width=&quot;800&quot; /&gt;
&lt;h3 id=&quot;send&quot;&gt;Send a push message &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#send&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Your server doesn&#39;t actually send the push message directly to a client. A
&lt;strong&gt;push service&lt;/strong&gt; does that. A push service is a web service controlled by your
user&#39;s browser vendor. When you want to send a push notification to a client you need
to make a web service request to a push service. The web service request that
you send to the push service is known as a &lt;strong&gt;web push protocol request&lt;/strong&gt;. The
web push protocol request should include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What data to include in the message.&lt;/li&gt;
&lt;li&gt;What client to send the message to.&lt;/li&gt;
&lt;li&gt;Instructions on how the push service should deliver the message. For example, you
can specify that the push service should stop attempting to send the message
after 10 minutes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normally you make the web push protocol request through a server that you control.
Of course, your server doesn&#39;t have to construct the raw web service request
itself. There are libraries that can handle that for you, such as the
&lt;a href=&quot;https://github.com/web-push-libs/&quot; rel=&quot;noopener&quot;&gt;web-push-libs&lt;/a&gt;. But the underlying mechanism is
a web service request over HTTP.&lt;/p&gt;
&lt;img alt=&quot;Your server sends a web push protocol request to the push service and the push service sends to the message to the user&amp;#x27;s device.&quot; decoding=&quot;async&quot; height=&quot;220&quot; loading=&quot;lazy&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/BD7hUXHhprQfUgWWGsMk.svg&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;The push service receives your request, authenticates it, and routes the push
message to the appropriate client. If the client&#39;s browser is offline, the push
service queues the push message until the browser comes online.&lt;/p&gt;
&lt;p&gt;Each browser uses whatever push service it wants. You as a website developer
have no control over that. This isn&#39;t a problem because the web push protocol
request is &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-webpush-protocol&quot; rel=&quot;noopener&quot;&gt;standardized&lt;/a&gt;.
In other words, you don&#39;t have to care which push service the browser vendor is
using. You just need to make sure that your web push protocol request follows the spec.
Among other things, the spec states that the request must include certain headers
and the data must be sent as a stream of bytes.&lt;/p&gt;
&lt;p&gt;You do, however, need to make sure that you&#39;re sending the web push protocol
request to the correct push service. The &lt;code&gt;PushSubscription&lt;/code&gt; data that the
browser returned to you during the subscription process provides this
information. A &lt;code&gt;PushSubscription&lt;/code&gt; object looks like this:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;endpoint&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://fcm.googleapis.com/fcm/send/c1KrmpTuRm…&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;expirationTime&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;p256dh&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;BGyyVt9FFV…&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;R9sidzkcdf…&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The domain of the &lt;code&gt;endpoint&lt;/code&gt; is essentially the push service. The path of the
&lt;code&gt;endpoint&lt;/code&gt; is client identifier information that helps the push service determine
exactly which client to push the message to.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;keys&lt;/code&gt; are used for encryption, which is explained next.&lt;/p&gt;
&lt;h4 id=&quot;encrypt&quot;&gt;Encrypt the push message &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#encrypt&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The data that you send to a push service must be encrypted. This prevents
the push service from being able to view the data you&#39;re sending to the client.
Remember that the browser vendor decides what push service to use, and that
push service could theoretically be unsafe or insecure. Your server must use
the &lt;code&gt;keys&lt;/code&gt; provided in the &lt;code&gt;PushSubscription&lt;/code&gt; to encrypt its web push protocol
requests.&lt;/p&gt;
&lt;h4 id=&quot;sign&quot;&gt;Sign your web push protocol requests &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#sign&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The push service provides a way to prevent anyone else from sending messages to your
users. Technically you don&#39;t have to do this but the easiest implementation on
Chrome requires it. It&#39;s optional on Firefox. Other browsers may require it
in the future.&lt;/p&gt;
&lt;p&gt;This workflow involves a private key and public key that are unique to your
application. The authentication process roughly works like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You generate the private and public key as a one-off task. The combination
of the private and public key is known as the
&lt;strong&gt;application server keys&lt;/strong&gt;. You might also see them called the &lt;strong&gt;VAPID
keys&lt;/strong&gt;. &lt;a href=&quot;https://tools.ietf.org/html/draft-thomson-webpush-vapid-02&quot; rel=&quot;noopener&quot;&gt;VAPID&lt;/a&gt; is
the spec that defines this authentication process.&lt;/li&gt;
&lt;li&gt;When you subscribe a client to push notifications from your JavaScript code,
you provide your public key. When the push service generates an &lt;code&gt;endpoint&lt;/code&gt;
for the device, it associates the provided public key with the &lt;code&gt;endpoint&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When you send a web push protocol request, you sign some JSON information
with your private key.&lt;/li&gt;
&lt;li&gt;When the push service receives your web push protocol request, it uses the stored
public key to authenticate the signed information. If the signature is valid
then the push service knows that the request came from a server with the
matching private key.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;customize&quot;&gt;Customize the delivery of the push message &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#customize&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The web push protocol request spec also defines parameters that let you
customize how the push service attempts to send the push message to the client.
For example, you can customize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Time-To-Live (TTL) of a message, which defines how long the push service should
attempt to deliver a message.&lt;/li&gt;
&lt;li&gt;The urgency of the message, which is useful in case the push service is preserving
the client&#39;s battery life by only delivering high-priority messages.&lt;/li&gt;
&lt;li&gt;The topic of a message, which replaces any pending messages of the same topic
with the latest message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;notification&quot;&gt;Receive and display the pushed messages as notifications &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#notification&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you&#39;ve sent the web push protocol request to the push service, the push service keeps
your request queued until one of the following events happens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The client comes online and the push service delivers the push message.&lt;/li&gt;
&lt;li&gt;The message expires.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When a client browser receives a pushed message, it decrypts the push message
data and dispatches a &lt;code&gt;push&lt;/code&gt; event to your &lt;a href=&quot;https://web.dev/service-workers-cache-storage/#service-workers&quot;&gt;service
worker&lt;/a&gt;. A service worker is
basically JavaScript code that can run in the background, even when your website
isn&#39;t open or the browser is closed. In your service worker&#39;s &lt;code&gt;push&lt;/code&gt; event
handler you call &lt;code&gt;ServiceWorkerRegistration.showNotification()&lt;/code&gt; to display the information
as a notification.&lt;/p&gt;
&lt;img alt=&quot;Message arrives on device. Browser wakes up service worker. Push event is dispatched.&quot; decoding=&quot;async&quot; height=&quot;238&quot; loading=&quot;lazy&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2pLZ4T0vVrG3nqitaAeH.svg&quot; width=&quot;800&quot; /&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-overview/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Check out &lt;a href=&quot;https://web.dev/push-notifications-client-codelab/&quot;&gt;Codelab: Build a push notification client&lt;/a&gt;
to learn how to build a client that requests notification permission, subscribes
the device to receive push notifications, and uses a service worker to receive
push messages and display the messages as notifications.&lt;/li&gt;
&lt;li&gt;Check out &lt;a href=&quot;https://web.dev/push-notifications-server-codelab/&quot;&gt;Codelab: Build a push notification server&lt;/a&gt;
to learn how to build a server that manages subscriptions and sends web push protocol
requests.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Kayce Basques</name>
    </author><author>
      <name>Matt Gaunt</name>
    </author>
  </entry>
  
  <entry>
    <title>Codelab: Build a push notification client</title>
    <link href="https://web.dev/push-notifications-client-codelab/"/>
    <updated>2020-11-11T00:00:00Z</updated>
    <id>https://web.dev/push-notifications-client-codelab/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;This codelab shows you, step-by-step, how to build a push notification client.
By the end of the codelab you&#39;ll have a client that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subscribes the user to push notifications.&lt;/li&gt;
&lt;li&gt;Receives push messages and displays them as notifications.&lt;/li&gt;
&lt;li&gt;Unsubscribes the user from push notifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This codelab is focused on helping you learn by doing and doesn&#39;t
talk about concepts much. Check out
&lt;a href=&quot;https://web.dev/push-notifications-overview/#how&quot;&gt;How do push notifications work?&lt;/a&gt;
to learn about push notification concepts.&lt;/p&gt;
&lt;p&gt;The server code of this codelab is already complete. You&#39;ll only be
implementing the client in this codelab. To learn how to implement a
push notification server, check out &lt;a href=&quot;https://web.dev/push-notifications-server-codelab&quot;&gt;Codelab: Build a push notification
server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://push-notifications-client-codelab-complete.glitch.me/&quot; rel=&quot;noopener&quot;&gt;push-notifications-client-codelab-complete&lt;/a&gt;
(&lt;a href=&quot;https://glitch.com/edit/#!/push-notifications-client-codelab-complete&quot; rel=&quot;noopener&quot;&gt;source&lt;/a&gt;)
to see the complete code.&lt;/p&gt;
&lt;h2 id=&quot;browser-compatibility&quot;&gt;Browser compatibility &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#browser-compatibility&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This codelab is known to work with the following operating system and browser combinations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows: Chrome, Edge&lt;/li&gt;
&lt;li&gt;macOS: Chrome, Firefox&lt;/li&gt;
&lt;li&gt;Android: Chrome, Firefox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This codelab is known to &lt;strong&gt;not&lt;/strong&gt; work with the following operating systems
(or operating system and browser combinations):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS: Brave, Edge, Safari&lt;/li&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;setup&quot;&gt;Setup &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#setup&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;remix&quot;&gt;Get an editable copy of the code &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#remix&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The code editor that you see to the right of these instructions will be called
the &lt;strong&gt;Glitch UI&lt;/strong&gt; throughout this codelab.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click &lt;strong&gt;Remix to Edit&lt;/strong&gt; to make the project editable.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;w-aside w-aside--gotchas&quot;&gt;&lt;strong&gt;Gotchas!&lt;/strong&gt;
&lt;p&gt;If you&#39;re in a Chrome incognito or guest window, you may have
trouble completing the codelab. Consider using a signed-in
profile instead.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;authentication&quot;&gt;Set up authentication &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#authentication&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before you can get push notifications working, you need to set up
your server and client with authentication keys.
See &lt;a href=&quot;https://web.dev/push-notifications-overview/#sign&quot;&gt;Sign your web push protocol requests&lt;/a&gt;
to learn why.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the Glitch UI click &lt;strong&gt;Tools&lt;/strong&gt; and then click &lt;strong&gt;Terminal&lt;/strong&gt; to open the Glitch Terminal.&lt;/li&gt;
&lt;li&gt;In the Glitch Terminal, run &lt;code&gt;npx web-push generate-vapid-keys&lt;/code&gt;. Copy the private key
and public key values.&lt;/li&gt;
&lt;li&gt;In the Glitch UI open &lt;code&gt;.env&lt;/code&gt; and update &lt;code&gt;VAPID_PUBLIC_KEY&lt;/code&gt; and &lt;code&gt;VAPID_PRIVATE_KEY&lt;/code&gt;. Set
&lt;code&gt;VAPID_SUBJECT&lt;/code&gt; to &lt;code&gt;mailto:test@test.test&lt;/code&gt;. All of these values should be wrapped
in double quotes. After making your updates, your &lt;code&gt;.env&lt;/code&gt; file should look
similar to this:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;VAPID_PUBLIC_KEY=&quot;BKiwTvD9HA…&quot;&lt;br /&gt;VAPID_PRIVATE_KEY=&quot;4mXG9jBUaU…&quot;&lt;br /&gt;VAPID_SUBJECT=&quot;mailto:test@test.test&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Close the Glitch Terminal.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;w-aside w-aside--gotchas&quot;&gt;&lt;strong&gt;Gotchas!&lt;/strong&gt;
&lt;p&gt;Environment variable values (the stuff in &lt;code&gt;.env&lt;/code&gt;) are unique to a single Glitch project.
If you remix your project, the values in &lt;code&gt;.env&lt;/code&gt; won&#39;t get copied over.&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;public/index.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;VAPID_PUBLIC_KEY_VALUE_HERE&lt;/code&gt; with the value of your public key.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;register-a-service-worker&quot;&gt;Register a service worker &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#register-a-service-worker&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Your client will eventually need a service worker to receive and display
notifications. It&#39;s best to register the service worker as early as possible.
See &lt;a href=&quot;https://web.dev/push-notifications-overview/#notification&quot;&gt;Receive and display the pushed messages as
notifications&lt;/a&gt; for more context.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Replace the &lt;code&gt;// TODO add startup logic here&lt;/code&gt; comment with the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TODO add startup logic here&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;serviceWorker&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; navigator &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;PushManager&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./service-worker.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;serviceWorkerRegistration&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Service worker was registered.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;serviceWorkerRegistration&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;An error occurred while registering the service worker.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  subscribeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Browser does not support service workers or push messages.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;subscribeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; subscribeButtonHandler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;unsubscribeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; unsubscribeButtonHandler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;To preview the site, press &lt;strong&gt;View App&lt;/strong&gt;. Then press
&lt;strong&gt;Fullscreen&lt;/strong&gt;
&lt;img src=&quot;https://web.dev/images/glitch/fullscreen.svg&quot; alt=&quot;fullscreen&quot; style=&quot;padding: 4px 8px; opacity: .5; border: 1px solid #c3c3c3; border-radius: 5px;&quot; /&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;w-aside w-aside--key-term&quot;&gt;
&lt;p&gt;&lt;strong&gt;Key Term&lt;/strong&gt;:
The tab that you just opened will be referred to as the &lt;strong&gt;app tab&lt;/strong&gt;
throughout this codelab.&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;Control+Shift+J&lt;/code&gt; (or &lt;code&gt;Command+Option+J&lt;/code&gt; on Mac) to open DevTools.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Console&lt;/strong&gt; tab. You should see the message
&lt;code&gt;Service worker was registered.&lt;/code&gt; logged to the Console.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The previous instruction assumes that you&#39;re using Google Chrome and
Chrome DevTools.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;request-push-notification-permission&quot;&gt;Request push notification permission &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#request-push-notification-permission&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You should never request permission to send push notifications on page load.
Instead, your UI should ask the user if they want to receive push notifications.
Once they explicitly confirm (with a button click, for example) then you can
start the formal process for getting push notification permission from the browser.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the Glitch UI click &lt;strong&gt;View Source&lt;/strong&gt; to return to your code.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;public/index.js&lt;/code&gt; replace the &lt;code&gt;// TODO&lt;/code&gt; comment in
&lt;code&gt;subscribeButtonHandler()&lt;/code&gt; with the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TODO&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Prevent the user from clicking the subscribe button multiple times.&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;subscribeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Notification&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestPermission&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;denied&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The user explicitly denied the permission request.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;granted&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The user accepted the permission request.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/ins&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Go back to the app tab and click &lt;strong&gt;Subscribe to push&lt;/strong&gt;. Your browser
or operating system will probably ask you if you want to let the website
send you push notifications. Click &lt;strong&gt;Allow&lt;/strong&gt; (or whatever equivalent phrase
your browser/OS uses). In the Console you should see a message indicating
whether the request was accepted or denied.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;w-aside w-aside--gotchas&quot;&gt;&lt;strong&gt;Gotchas!&lt;/strong&gt;
&lt;p&gt;If you&#39;re in an incognito or guest window, your browser may deny the
request automatically. Keep an eye out for any browser UI indicating that
the request was blocked automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;subscribe-to-push-notifications&quot;&gt;Subscribe to push notifications &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#subscribe-to-push-notifications&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The subscription process involves interacting with a web service controlled
by the browser vendor that&#39;s called a &lt;strong&gt;push service&lt;/strong&gt;. Once you get
the push notification subscription information you need to send it to a server
and have the server store it in a database long-term.
See &lt;a href=&quot;https://web.dev/push-notifications-overview/#subscription&quot;&gt;Subscribe the client to push notifications&lt;/a&gt;
for more context about the subscription process.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the following highlighted code to &lt;code&gt;subscribeButtonHandler()&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;subscribeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Notification&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestPermission&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;denied&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The user explicitly denied the permission request.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;granted&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The user accepted the permission request.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; registration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRegistration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; subscribed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pushManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscribed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;User is already subscribed.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  notifyMeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  unsubscribeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; subscription &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pushManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  userVisibleOnly&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  applicationServerKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;urlB64ToUint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;VAPID_PUBLIC_KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;notifyMeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/add-subscription&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscription&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;userVisibleOnly&lt;/code&gt; option must be &lt;code&gt;true&lt;/code&gt;. It may one day be possible
to push messages without displaying user-visible notifications
(&lt;strong&gt;silent pushes&lt;/strong&gt;) but browsers currently don&#39;t allow that capability
because of privacy concerns.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;applicationServerKey&lt;/code&gt; value relies on a utility function that
converts a base64 string to a Uint8Array. This value is used for
authentication between your server and the push service.&lt;/p&gt;
&lt;h2 id=&quot;unsubscribe-from-push-notifications&quot;&gt;Unsubscribe from push notifications &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#unsubscribe-from-push-notifications&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a user has subscribed to push notifications, your UI needs to
provide a way to unsubscribe in case the user changes their mind
and no longer wants to receive push notifications.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Replace the &lt;code&gt;// TODO&lt;/code&gt; comment in &lt;code&gt;unsubscribeButtonHandler()&lt;/code&gt;
with the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TODO&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; registration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRegistration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; subscription &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pushManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/remove-subscription&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;endpoint&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; subscription&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endpoint&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; unsubscribed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; subscription&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsubscribed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Successfully unsubscribed from push notifications.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  unsubscribeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  subscribeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  notifyMeButton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/ins&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;receive-a-push-message-and-display-it-as-a-notification&quot;&gt;Receive a push message and display it as a notification &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#receive-a-push-message-and-display-it-as-a-notification&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned before, you need a service worker to handle the
receiving and displaying of messages that were pushed to the client
from your server. See &lt;a href=&quot;https://web.dev/push-notifications-overview/#notification&quot;&gt;Receive and display the pushed messages as
notifications&lt;/a&gt; for more detail.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;public/service-worker.js&lt;/code&gt; and replace the &lt;code&gt;// TODO&lt;/code&gt; comment
in the service worker&#39;s &lt;code&gt;push&lt;/code&gt; event handler with the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TODO&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; image &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://cdn.glitch.com/614286c9-b4fc-4303-a6a9-a4cef0601b74%2Flogo.png?v=1605150951230&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  icon&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; image&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;showNotification&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  options&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Go back to the app tab.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Notify me&lt;/strong&gt;. You should receive a push notification.&lt;/li&gt;
&lt;li&gt;Try opening the URL of your app tab on other browsers (or even
other devices), going through the subscription workflow, and then
clicking &lt;strong&gt;Notify all&lt;/strong&gt;. You should receive the same push notification
on all of the browsers that you subscribed. Refer back to
&lt;a href=&quot;https://web.dev/push-notifications-client-codelab/#browser-compatibility&quot;&gt;Browser compatibility&lt;/a&gt; to see a list of browser/OS
combinations that are known to work or not work.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can customize the notification in lots of ways. See the parameters of
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/showNotification&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ServiceWorkerRegistration.showNotification()&lt;/code&gt;&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--gotchas&quot;&gt;&lt;strong&gt;Gotchas!&lt;/strong&gt;
&lt;p&gt;The call to
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;self.skipWaiting()&lt;/code&gt;&lt;/a&gt;
in your service worker&#39;s &lt;code&gt;install&lt;/code&gt; listener is important to understand. See
&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#skip_the_waiting_phase&quot; rel=&quot;noopener&quot;&gt;Skip the waiting phase&lt;/a&gt;
for an explanation. Without it, the code changes that you make to your service worker
wouldn&#39;t take effect immediately. You may or may not want to use this feature on
your own website depending on your needs, but either way it&#39;s important to understand its effect.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;open-a-url-when-a-user-clicks-a-notification&quot;&gt;Open a URL when a user clicks a notification &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#open-a-url-when-a-user-clicks-a-notification&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the real-world, you&#39;ll probably use the notification as a way
to re-engage your user and prompt them to visit your site.
To do that, you need to configure your service worker a bit more.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Replace the &lt;code&gt;// TODO&lt;/code&gt; comment in the service worker&#39;s &lt;code&gt;notificationclick&lt;/code&gt;
event handler with the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TODO&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;notification&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clients&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://web.dev&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Go back to the app tab, send yourself another notification, and then
click the notification. Your browser should open a new tab and load
&lt;code&gt;https://web.dev&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-client-codelab/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Look at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/showNotification&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ServiceWorkerRegistration.showNotification()&lt;/code&gt;&lt;/a&gt;
to discover all of the different ways you can customize notifications.&lt;/li&gt;
&lt;li&gt;Read &lt;a href=&quot;https://web.dev/push-notifications-overview&quot;&gt;Push notifications overview&lt;/a&gt;
for a deeper conceptual understanding of how push notifications work.&lt;/li&gt;
&lt;li&gt;Check out &lt;a href=&quot;https://web.dev/push-notifications-server-codelab/&quot;&gt;Codelab: Build a push notification server&lt;/a&gt;
to learn how to build a server that manages subscriptions and sends web push protocol
requests.&lt;/li&gt;
&lt;li&gt;Try out &lt;a href=&quot;https://tests.peter.sh/notification-generator/&quot; rel=&quot;noopener&quot;&gt;Notification Generator&lt;/a&gt;
to test out all the ways you can customize notifications.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Kayce Basques</name>
    </author><author>
      <name>Kate Jeffreys</name>
    </author>
  </entry>
  
  <entry>
    <title>Codelab: Build a push notification server</title>
    <link href="https://web.dev/push-notifications-server-codelab/"/>
    <updated>2020-11-11T00:00:00Z</updated>
    <id>https://web.dev/push-notifications-server-codelab/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;This codelab shows you, step-by-step, how to build a push notification server.
By the end of the codelab you&#39;ll have a server that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keeps track of push notification subscriptions (i.e. the server creates a
new database record when a client opts in to push notifications, and it
deletes an existing database record when a client opts out)&lt;/li&gt;
&lt;li&gt;Sends a push notification to a single client&lt;/li&gt;
&lt;li&gt;Sends a push notification to all subscribed clients&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This codelab is focused on helping you learn by doing and doesn&#39;t
talk about concepts much. Check out
&lt;a href=&quot;https://web.dev/push-notifications-overview/#how&quot;&gt;How do push notifications work?&lt;/a&gt;
to learn about push notification concepts.&lt;/p&gt;
&lt;p&gt;The client code of this codelab is already complete. You&#39;ll only be
implementing the server in this codelab. To learn how to implement a
push notification client, check out &lt;a href=&quot;https://web.dev/push-notifications-client-codelab&quot;&gt;Codelab: Build a push notification
client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://push-notifications-server-codelab-complete.glitch.me/&quot; rel=&quot;noopener&quot;&gt;push-notifications-server-codelab-complete&lt;/a&gt;
(&lt;a href=&quot;https://glitch.com/edit/#!/push-notifications-server-codelab-complete&quot; rel=&quot;noopener&quot;&gt;source&lt;/a&gt;)
to see the complete code.&lt;/p&gt;
&lt;h2 id=&quot;browser-compatibility&quot;&gt;Browser compatibility &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-server-codelab/#browser-compatibility&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This codelab is known to work with the following operating system and browser combinations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows: Chrome, Edge&lt;/li&gt;
&lt;li&gt;macOS: Chrome, Firefox&lt;/li&gt;
&lt;li&gt;Android: Chrome, Firefox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This codelab is known to &lt;strong&gt;not&lt;/strong&gt; work with the following operating systems
(or operating system and browser combinations):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS: Brave, Edge, Safari&lt;/li&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;stack&quot;&gt;Application stack &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-server-codelab/#stack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The server is built on top of &lt;a href=&quot;https://expressjs.com/&quot; rel=&quot;noopener&quot;&gt;Express.js&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://www.npmjs.com/package/web-push&quot; rel=&quot;noopener&quot;&gt;web-push&lt;/a&gt; Node.js library
handles all of the push notification logic.&lt;/li&gt;
&lt;li&gt;Subscription data is written to a JSON file using &lt;a href=&quot;https://www.npmjs.com/package/lowdb&quot; rel=&quot;noopener&quot;&gt;lowdb&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You don&#39;t have to use any of these technologies to implement push notifications.
We chose these technologies because they provide a reliable codelab experience.&lt;/p&gt;
&lt;h2 id=&quot;setup&quot;&gt;Setup &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-server-codelab/#setup&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;remix&quot;&gt;Get an editable copy of the code &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-server-codelab/#remix&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The code editor that you see to the right of these instructions will be called
the &lt;strong&gt;Glitch UI&lt;/strong&gt; throughout this codelab.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click &lt;strong&gt;Remix to Edit&lt;/strong&gt; to make the project editable.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;authentication&quot;&gt;Set up authentication &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-server-codelab/#authentication&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before you can get push notifications working, you need to set up
your server and client with authentication keys.
See &lt;a href=&quot;https://web.dev/push-notifications-overview/#sign&quot;&gt;Sign your web push protocol requests&lt;/a&gt;
to learn why.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the Glitch terminal by clicking &lt;strong&gt;Tools&lt;/strong&gt; and then clicking &lt;strong&gt;Terminal&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the terminal, run &lt;code&gt;npx web-push generate-vapid-keys&lt;/code&gt;. Copy the private key
and public key values.&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;.env&lt;/code&gt; and update &lt;code&gt;VAPID_PUBLIC_KEY&lt;/code&gt; and &lt;code&gt;VAPID_PRIVATE_KEY&lt;/code&gt;. Set
&lt;code&gt;VAPID_SUBJECT&lt;/code&gt; to &lt;code&gt;mailto:test@test.test&lt;/code&gt;. All of these values should be wrapped
in double quotes. After making your updates, your &lt;code&gt;.env&lt;/code&gt; file should look
similar to this:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;VAPID_PUBLIC_KEY=&quot;BKiwTvD9HA…&quot;&lt;br /&gt;VAPID_PRIVATE_KEY=&quot;4mXG9jBUaU…&quot;&lt;br /&gt;VAPID_SUBJECT=&quot;mailto:test@test.test&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Close the Glitch terminal.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;w-aside w-aside--gotchas&quot;&gt;&lt;strong&gt;Gotchas!&lt;/strong&gt;
&lt;p&gt;Environment variable values (the stuff in &lt;code&gt;.env&lt;/code&gt;) are unique to a single Glitch project.
If you remix your project, the values in &lt;code&gt;.env&lt;/code&gt; won&#39;t get copied over.&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;public/index.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;VAPID_PUBLIC_KEY_VALUE_HERE&lt;/code&gt; with the value of your public key.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;manage&quot;&gt;Manage subscriptions &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-server-codelab/#manage&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Your client handles most of the subscription process. The main
things your server needs to do are save new push notification subscriptions
and delete old subscriptions. These subscriptions are what enable you to
push messages to clients in the future.
See &lt;a href=&quot;https://web.dev/push-notifications-overview/#subscription&quot;&gt;Subscribe the client to push notifications&lt;/a&gt;
for more context about the subscription process.&lt;/p&gt;
&lt;h3 id=&quot;save&quot;&gt;Save new subscription information &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-server-codelab/#save&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;To preview the site, press &lt;strong&gt;View App&lt;/strong&gt;. Then press
&lt;strong&gt;Fullscreen&lt;/strong&gt;
&lt;img src=&quot;https://web.dev/images/glitch/fullscreen.svg&quot; alt=&quot;fullscreen&quot; style=&quot;padding: 4px 8px; opacity: .5; border: 1px solid #c3c3c3; border-radius: 5px;&quot; /&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;w-aside w-aside--key-term&quot;&gt;
&lt;p&gt;&lt;strong&gt;Key Term&lt;/strong&gt;:
We&#39;ll refer to the tab that you just opened as the &lt;strong&gt;app tab&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Click &lt;strong&gt;Register service worker&lt;/strong&gt; in the app tab. In the status box you
should see a message similar to this:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Service worker registered. Scope: https://desert-cactus-sunset.glitch.me/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;In the app tab click &lt;strong&gt;Subscribe to push&lt;/strong&gt;. Your browser or operating system will probably
ask you if you want to let the website send you push notifications. Click &lt;strong&gt;Allow&lt;/strong&gt; (or whatever
equivalent phrase your browser/OS uses). In the status box you should see a message similar
to this:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Service worker subscribed to push.  Endpoint: https://fcm.googleapis.com/fcm/send/…&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The endpoint URL changes depending on what browser you&#39;re using.
For example, on Firefox the URL starts with &lt;code&gt;https://updates.push.services.mozilla.com/…&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Go back to your code by clicking &lt;strong&gt;View Source&lt;/strong&gt; in the Glitch UI.&lt;/li&gt;
&lt;li&gt;Open the Glitch Logs by clicking &lt;strong&gt;Tools&lt;/strong&gt; and then clicking &lt;strong&gt;Logs&lt;/strong&gt;. You
should see &lt;code&gt;/add-subscription&lt;/code&gt; followed by some data. &lt;code&gt;/add-subscription&lt;/code&gt; is
the URL that the client sends a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&quot; rel=&quot;noopener&quot;&gt;POST&lt;/a&gt;
request to when it wants to subscribe to push notifications. The data that
follows is the client&#39;s subscription information that you need to save.&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;server.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;/add-subscription&lt;/code&gt; route handler logic with the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/add-subscription&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/add-subscription&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Subscribing &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endpoint&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;subscriptions&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The database writes to &lt;code&gt;.data/db.json&lt;/code&gt;. To inspect this file in Glitch,
click &lt;strong&gt;Tools&lt;/strong&gt;, then click &lt;strong&gt;Terminal&lt;/strong&gt;, then run &lt;code&gt;cat .data/db.json&lt;/code&gt;
in the Terminal. &lt;code&gt;.data/db.json&lt;/code&gt; is deleted every time that you edit your app.
This is because Glitch runs the &lt;code&gt;start&lt;/code&gt; script in &lt;code&gt;package.json&lt;/code&gt; every time you
edit your app, and that script includes a call to &lt;code&gt;rm .data/db.json&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;delete-old-subscription-information&quot;&gt;Delete old subscription information &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-server-codelab/#delete-old-subscription-information&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Go back to the app tab.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Unsubscribe from push&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Look at the Glitch Logs again. You should see &lt;code&gt;/remove-subscription&lt;/code&gt; followed
by the client&#39;s subscription information.&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;/remove-subscription&lt;/code&gt; route handler logic with the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/remove-subscription&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/remove-subscription&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Unsubscribing &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endpoint&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;subscriptions&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;endpoint&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endpoint&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;send-notifications&quot;&gt;Send notifications &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-server-codelab/#send-notifications&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As explained in &lt;a href=&quot;https://web.dev/push-notifications-overview/#send&quot;&gt;Send a push message&lt;/a&gt;,
your server doesn&#39;t actually send the push messages directly to clients.
Rather, it relies on a push service to do that. Your server basically
just kicks off the process of pushing messages to clients by making web
service requests (web push protocol requests) to a web service (the push service)
owned by the browser vendor that your user uses.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;/notify-me&lt;/code&gt; route handler logic with the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/notify-me&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/notify-me&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Notifying &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endpoint&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; subscription &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;      db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;subscriptions&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;endpoint&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endpoint&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;sendNotifications&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;subscription&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;sendNotifications()&lt;/code&gt; function with the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sendNotifications&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// TODO&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Create the notification content.&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; notification &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, Notifications!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;      body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;ID: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Customize how the push service should attempt to deliver the push message.&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// And provide authentication information.&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    &lt;span class=&quot;token constant&quot;&gt;TTL&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    vapidDetails&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; vapidDetails&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Send a push message to each client specified in the subscriptions array.&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  subscriptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; endpoint &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; subscription&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endpoint&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; endpoint&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;endpoint&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; endpoint&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    webpush&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendNotification&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscription&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; notification&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Endpoint ID: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Result: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Endpoint ID: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;error&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;/notify-all&lt;/code&gt; route handler logic with the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/notify-all&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/notify-all&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;del class=&quot;highlight-line highlight-line-remove&quot;&gt;  response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/del&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Notifying all subscribers&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; subscriptions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;      db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;subscriptions&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cloneDeep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;sendNotifications&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriptions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;    response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;409&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;ins class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/ins&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Go back to the app tab.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Unsubscribe from push&lt;/strong&gt; and then click &lt;strong&gt;Subscribe to push&lt;/strong&gt; again.
This is only necessary because, as mentioned before, Glitch restarts the project
every time you edit the code and the project is configured to delete the database on startup.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Notify me&lt;/strong&gt;. You should receive a push notification. The title should
be &lt;code&gt;Hello, Notifications!&lt;/code&gt; and the body should be &lt;code&gt;ID: &amp;lt;ID&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;ID&amp;gt;&lt;/code&gt; is a
random number.&lt;/li&gt;
&lt;li&gt;Open your app on other browsers or devices and try subscribing them to push notifications
and then clicking the &lt;strong&gt;Notify all&lt;/strong&gt; button. You should receive the same notification on
all of your subscribed devices (i.e. the ID in the body of the push notification should
be the same).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/push-notifications-server-codelab/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Read &lt;a href=&quot;https://web.dev/push-notifications-overview&quot;&gt;Push notifications overview&lt;/a&gt;
for a deeper conceptual understanding of how push notifications work.&lt;/li&gt;
&lt;li&gt;Check out &lt;a href=&quot;https://web.dev/push-notifications-client-codelab/&quot;&gt;Codelab: Build a push notification client&lt;/a&gt;
to learn how to build a client that requests notification permission, subscribes
the device to receive push notifications, and uses a service worker to receive
push messages and display the messages as notifications.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Kayce Basques</name>
    </author><author>
      <name>Kate Jeffreys</name>
    </author>
  </entry>
  
  <entry>
    <title>Fast playback with audio and video preload</title>
    <link href="https://web.dev/fast-playback-with-preload/"/>
    <updated>2017-08-17T00:00:00Z</updated>
    <id>https://web.dev/fast-playback-with-preload/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Faster playback start means more people watching your video or listening to your
audio. &lt;a href=&quot;https://www.digitaltrends.com/web/buffer-rage/&quot; rel=&quot;noopener&quot;&gt;That&#39;s a known fact&lt;/a&gt;. In this article I&#39;ll explore
techniques you can use to accelerate your audio and video playback by actively
preloading resources depending on your use case.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;video controls=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; class=&quot;w-screenshot&quot;&gt;
    &lt;source src=&quot;https://storage.googleapis.com/web-dev-assets/fast-playback-with-preload/video-preload-hero.webm#t=1.1&quot; type=&quot;video/webm&quot; /&gt;
    &lt;source src=&quot;https://storage.googleapis.com/web-dev-assets/fast-playback-with-preload/video-preload-hero.mp4#t=1.1&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    &lt;p&gt;Credits: copyright Blender Foundation | &lt;a href=&quot;http://www.blender.org/&quot;&gt;www.blender.org &lt;/a&gt;.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I&#39;ll describe three methods of preloading media files, starting with their pros
and cons.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;
It&#39;s great...
      &lt;/th&gt;
      &lt;th&gt;
But...
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td rowspan=&quot;3&quot; style=&quot;white-space: nowrap&quot;&gt;
&lt;a href=&quot;https://web.dev/fast-playback-with-preload/#video_preload_attribute&quot;&gt;Video preload attribute&lt;/a&gt;
      &lt;/td&gt;
      &lt;td rowspan=&quot;3&quot;&gt;
Simple to use for a unique file hosted on a web server.
      &lt;/td&gt;
      &lt;td&gt;
Browsers may completely ignore the attribute.
      &lt;/td&gt;
    &lt;/tr&gt;&lt;tr&gt;
      &lt;td&gt;
Resource fetching starts when the HTML document has been completely loaded and
parsed.
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
Media Source Extensions (MSE) ignore the &lt;code&gt;preload&lt;/code&gt; attribute on media elements because the app is responsible for
providing media to MSE.
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td rowspan=&quot;2&quot; style=&quot;white-space: nowrap&quot;&gt;
&lt;a href=&quot;https://web.dev/fast-playback-with-preload/#link_preload&quot;&gt;Link preload&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
Forces the browser to make a request for a video resource without blocking
the document&#39;s &lt;code&gt;onload&lt;/code&gt; event.
      &lt;/td&gt;
      &lt;td&gt;
HTTP Range requests are not compatible.
      &lt;/td&gt;
    &lt;/tr&gt;&lt;tr&gt;
      &lt;td&gt;
Compatible with MSE and file segments.
      &lt;/td&gt;
      &lt;td&gt;
Should be used only for small media files (&amp;lt;5 MB) when fetching full resources.
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
&lt;a href=&quot;https://web.dev/fast-playback-with-preload/#manual_buffering&quot;&gt;Manual buffering&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
Full control
      &lt;/td&gt;
      &lt;td&gt;
Complex error handling is the website&#39;s responsibility.
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;video-preload-attribute&quot;&gt;Video preload attribute &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#video-preload-attribute&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the video source is a unique file hosted on a web server, you may want to
use the video &lt;code&gt;preload&lt;/code&gt; attribute to provide a hint to the browser as to &lt;a href=&quot;https://web.dev/video-and-source-tags/#preload&quot;&gt;how
much information or content to preload&lt;/a&gt;. This means &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API&quot; rel=&quot;noopener&quot;&gt;Media Source Extensions
(MSE)&lt;/a&gt; is not compatible with &lt;code&gt;preload&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Resource fetching will start only when the initial HTML document has been
completely loaded and parsed (e.g. the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event has fired)
while the very different &lt;code&gt;load&lt;/code&gt; event will be fired when resource
has actually been fetched.&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt=&quot;&quot; decoding=&quot;async&quot; height=&quot;234&quot; loading=&quot;lazy&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/De8tMHJUn3XyzFfosVLb.svg&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Setting the &lt;code&gt;preload&lt;/code&gt; attribute to &lt;code&gt;metadata&lt;/code&gt; indicates that the user is not
expected to need the video, but that fetching its metadata (dimensions, track
list, duration, and so on) is desirable. Note that starting in &lt;a href=&quot;https://developers.google.com/web/updates/2017/12/chrome-63-64-media-updates#media-preload-defaults-metadata&quot; rel=&quot;noopener&quot;&gt;Chrome
64&lt;/a&gt;, the default value for &lt;code&gt;preload&lt;/code&gt; is &lt;code&gt;metadata&lt;/code&gt;. (It was &lt;code&gt;auto&lt;/code&gt;
previously).&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;metadata&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;file.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;loadedmetadata&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bufferedSeconds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;bufferedSeconds&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds of video are ready to play.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Setting the &lt;code&gt;preload&lt;/code&gt; attribute to &lt;code&gt;auto&lt;/code&gt; indicates that the browser may cache
enough data that complete playback is possible without requiring a stop for
further buffering.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;auto&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;file.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;loadedmetadata&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bufferedSeconds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;bufferedSeconds&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds of video are ready to play.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;There are some caveats though. As this is just a hint, the browser may completely
ignore the &lt;code&gt;preload&lt;/code&gt; attribute. At the time of writing, here are some rules
applied in Chrome:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When &lt;a href=&quot;https://support.google.com/chrome/answer/2392284&quot; rel=&quot;noopener&quot;&gt;Data Saver&lt;/a&gt; is enabled, Chrome forces the &lt;code&gt;preload&lt;/code&gt; value to
&lt;code&gt;none&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In Android 4.3, Chrome forces the &lt;code&gt;preload&lt;/code&gt; value to &lt;code&gt;none&lt;/code&gt; due to an &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=612909&quot; rel=&quot;noopener&quot;&gt;Android
Bug&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;On a cellular connection (2G, 3G, and 4G), Chrome forces the &lt;code&gt;preload&lt;/code&gt; value to
&lt;code&gt;metadata&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#tips&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your website contains many video resources on the same domain, I would
recommend you set the &lt;code&gt;preload&lt;/code&gt; value to &lt;code&gt;metadata&lt;/code&gt; or define the &lt;code&gt;poster&lt;/code&gt;
attribute and set &lt;code&gt;preload&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt;. That way, you would avoid hitting
the maximum number of HTTP connections to the same domain (6 according to the
HTTP 1.1 spec) which can hang loading of resources. Note that this may also
improve page speed if videos aren&#39;t part of your core user experience.&lt;/p&gt;
&lt;h2 id=&quot;link-preload&quot;&gt;Link preload &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#link-preload&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As &lt;a href=&quot;https://developers.google.com/web/updates/2016/03/link-rel-preload&quot; rel=&quot;noopener&quot;&gt;covered&lt;/a&gt; in other &lt;a href=&quot;https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/&quot; rel=&quot;noopener&quot;&gt;articles&lt;/a&gt;, &lt;a href=&quot;https://w3c.github.io/preload/&quot; rel=&quot;noopener&quot;&gt;link preload&lt;/a&gt; is a declarative fetch that
allows you to force the browser to make a request for a resource without
blocking the &lt;code&gt;load&lt;/code&gt; event and while the page is downloading. Resources
loaded via &lt;code&gt;&amp;lt;link rel=&amp;quot;preload&amp;quot;&amp;gt;&lt;/code&gt; are stored locally in the browser, and are
effectively inert until they&#39;re explicitly referenced in the DOM, JavaScript,
or CSS.&lt;/p&gt;
&lt;p&gt;Preload is different from prefetch in that it focuses on current navigation and
fetches resources with priority based on their type (script, style, font,
video, audio, etc.). It should be used to warm up the browser cache for current
sessions.&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt=&quot;&quot; decoding=&quot;async&quot; height=&quot;234&quot; loading=&quot;lazy&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/g5fQKJMivvcsHajmMmi2.svg&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;preload-full-video&quot;&gt;Preload full video &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#preload-full-video&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&#39;s how to preload a full video on your website so that when your
JavaScript asks to fetch video content, it is read from cache as the resource
may have already been cached by the browser. If the preload request hasn&#39;t
finished yet, a regular network fetch will happen.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;link rel&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;preload&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;video&quot;&lt;/span&gt; href&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://cdn.com/small-file.mp4&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;video id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;video&quot;&lt;/span&gt; controls&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;video&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Later on, after some condition has been met, set video source to the&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// preloaded video URL.&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://cdn.com/small-file.mp4&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If preloaded video URL was already cached, playback started immediately.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;I would recommend using this only for small media files (less than 5MB).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Because the preloaded resource is going to be consumed by a video element in
the example, the &lt;code&gt;as&lt;/code&gt; preload link value is &lt;code&gt;video&lt;/code&gt;. If it were an audio
element, it would be &lt;code&gt;as=&amp;quot;audio&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;preload-the-first-segment&quot;&gt;Preload the first segment &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#preload-the-first-segment&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The example below shows how to preload the first segment of a video with &lt;code&gt;&amp;lt;link rel=&amp;quot;preload&amp;quot;&amp;gt;&lt;/code&gt; and use it with Media Source Extensions. If you&#39;re not familiar
with the MSE JavaScript API, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API&quot; rel=&quot;noopener&quot;&gt;MSE basics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the sake of simplicity, let&#39;s assume the entire video has been split into
smaller files like &lt;code&gt;file_1.webm&lt;/code&gt;, &lt;code&gt;file_2.webm&lt;/code&gt;, &lt;code&gt;file_3.webm&lt;/code&gt;, etc.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;preload&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://cdn.com/file_1.webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mediaSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mediaSource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sourceopen&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sourceOpen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sourceOpen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;revokeObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourceBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSourceBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video/webm; codecs=&quot;vp09.00.10.08&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If video is preloaded already, fetch will return immediately a response&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// from the browser cache (memory cache). Otherwise, it will perform a&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// regular network fetch.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://cdn.com/file_1.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;arrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Append the data into the new sourceBuffer.&lt;/span&gt;&lt;br /&gt;      sourceBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// TODO: Fetch file_2.webm when user starts playing video.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// TODO: Show &quot;Video is not available&quot; message to user.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;:
For cross-origin resources, make sure your CORS headers are set properly. As
we can&#39;t create an array buffer from an opaque response retrieved with
&lt;code&gt;fetch(videoFileUrl, { mode: &#39;no-cors&#39; })&lt;/code&gt;, we won&#39;t be able to feed any video
or audio element.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;support&quot;&gt;Support &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#support&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;See MDN&#39;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;Browser compatibility&lt;/a&gt; table to see which
browsers support preload. You may want to detect its availability with the
snippets below to adjust your performance metrics.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;preloadFullVideoSupported&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;as &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;video&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;as &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;video&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;preloadFirstSegmentSupported&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;as &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;as &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;manual-buffering&quot;&gt;Manual buffering &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#manual-buffering&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Cache&quot; rel=&quot;noopener&quot;&gt;Cache API&lt;/a&gt; and service workers, let&#39;s see
how to manually buffer a video with MSE. The example below assumes that your web
server supports HTTP &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;
requests but this would be pretty similar with file
segments. Note that some middleware libraries such as &lt;a href=&quot;https://github.com/google/shaka-player&quot; rel=&quot;noopener&quot;&gt;Google&#39;s Shaka
Player&lt;/a&gt;, &lt;a href=&quot;https://developer.jwplayer.com/&quot; rel=&quot;noopener&quot;&gt;JW Player&lt;/a&gt;, and &lt;a href=&quot;http://videojs.com/&quot; rel=&quot;noopener&quot;&gt;Video.js&lt;/a&gt; are
built to handle this for you.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mediaSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mediaSource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sourceopen&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sourceOpen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sourceOpen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;revokeObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourceBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSourceBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video/webm; codecs=&quot;vp09.00.10.08&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Fetch beginning of the video by setting the Range HTTP request header.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;file.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; range&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bytes=0-567139&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;arrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      sourceBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      sourceBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;updateend&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; updateEnd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Video is now ready to play!&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bufferedSeconds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;bufferedSeconds&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds of video are ready to play.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Fetch the next segment of video when user starts playing the video.&lt;/span&gt;&lt;br /&gt;    video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;playing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fetchNextSegment&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchNextSegment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;file.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; range&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bytes=567140-1196488&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;arrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourceBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sourceBuffers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      sourceBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// TODO: Fetch further segment and append it.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;considerations&quot;&gt;Considerations &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#considerations&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As you&#39;re now in control of the entire media buffering experience, I suggest you
consider the device&#39;s battery level, the &amp;quot;Data-Saver Mode&amp;quot; user preference and
network information when thinking about preloading.&lt;/p&gt;
&lt;h4 id=&quot;battery-awareness&quot;&gt;Battery awareness &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#battery-awareness&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Take into account the battery level of users&#39; devices before thinking
about preloading a video. This will preserve battery life when the power level
is low.&lt;/p&gt;
&lt;p&gt;Disable preload or at least preload a lower resolution video when the
device is running out of battery.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;getBattery&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBattery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;battery&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If battery is charging or battery level is high enough&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;battery&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;charging &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; battery&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// TODO: Preload the first segment of a video.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;detect-&amp;quot;data-saver&amp;quot;&quot;&gt;Detect &amp;quot;Data-Saver&amp;quot; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#detect-%22data-saver%22&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Use the &lt;code&gt;Save-Data&lt;/code&gt; client hint request header to deliver fast and light
applications to users who have opted-in to &amp;quot;data savings&amp;quot; mode in their
browser. By identifying this request header, your application can customize and
deliver an optimized user experience to cost- and performance-constrained
users.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/save-data&quot; rel=&quot;noopener&quot;&gt;Delivering Fast and Light Applications with Save-Data&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;h4 id=&quot;smart-loading-based-on-network-information&quot;&gt;Smart loading based on network information &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#smart-loading-based-on-network-information&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You may want to check &lt;code&gt;navigator.connection.type&lt;/code&gt; prior to preloading. When
it&#39;s set to &lt;code&gt;cellular&lt;/code&gt;, you could prevent preloading and advise users that
their mobile network operator might be charging for the bandwidth, and only start
automatic playback of previously cached content.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;connection&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cellular&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// TODO: Prompt user before preloading video&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// TODO: Preload the first segment of a video.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Check out the &lt;a href=&quot;https://googlechrome.github.io/samples/network-information/&quot; rel=&quot;noopener&quot;&gt;Network Information sample&lt;/a&gt; to learn how to react to network
changes as well.&lt;/p&gt;
&lt;h3 id=&quot;pre-cache-multiple-first-segments&quot;&gt;Pre-cache multiple first segments &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#pre-cache-multiple-first-segments&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now what if I want to speculatively pre-load some media content without
knowing which piece of media the user will eventually pick? If the user is on a
web page that contains 10 videos, we probably have enough memory to fetch one
segment file from each but we should definitely not create 10 hidden &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;
elements and 10 &lt;code&gt;MediaSource&lt;/code&gt; objects and start feeding that data.&lt;/p&gt;
&lt;p&gt;The two-part example below shows you how to pre-cache multiple first segments of
video using the powerful and easy-to-use &lt;a href=&quot;https://web.dev/cache-api-quick-guide/&quot;&gt;Cache API&lt;/a&gt;. Note that something similar
can be achieved with IndexedDB as well. We&#39;re not using service workers yet as
the Cache API is also accessible from the &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;
&lt;h4 id=&quot;fetch-and-cache&quot;&gt;Fetch and cache &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#fetch-and-cache&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; videoFileUrls &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;bat_video_file_1.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;cow_video_file_1.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;dog_video_file_1.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;fox_video_file_1.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Let&#39;s create a video pre-cache and store all first segments of videos inside.&lt;/span&gt;&lt;br /&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video-pre-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;videoFileUrl&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchAndCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchAndCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Check first if video is in the cache.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cacheResponse&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Let&#39;s return cached response if video is already in the cache.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheResponse&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cacheResponse&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Otherwise, fetch the video from the network.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;networkResponse&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Add the response to the cache and return network response in parallel.&lt;/span&gt;&lt;br /&gt;      cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; networkResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; networkResponse&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Note that if I were to use HTTP &lt;code&gt;Range&lt;/code&gt; requests, I would have to manually recreate
a &lt;code&gt;Response&lt;/code&gt; object as the Cache API doesn&#39;t support &lt;code&gt;Range&lt;/code&gt; responses &lt;a href=&quot;https://github.com/whatwg/fetch/issues/144&quot; rel=&quot;noopener&quot;&gt;yet&lt;/a&gt;. Be
mindful that calling &lt;code&gt;networkResponse.arrayBuffer()&lt;/code&gt; fetches the whole content
of the response at once into renderer memory, which is why you may want to use
small ranges.&lt;/p&gt;
&lt;p&gt;For reference, I&#39;ve modified part of the example above to save HTTP Range
requests to the video precache.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; range&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bytes=0-567139&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;networkResponse&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; networkResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;arrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Add the response to the cache and return network response in parallel.&lt;/span&gt;&lt;br /&gt;      cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;play-video&quot;&gt;Play video &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#play-video&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When a user clicks a play button, we&#39;ll fetch the first segment of video
available in the Cache API so that playback starts immediately if available.
Otherwise, we&#39;ll simply fetch it from the network. Keep in mind that browsers
and users may decide to clear the &lt;a href=&quot;https://web.dev/storage-for-the-web/#eviction&quot;&gt;Cache&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As seen before, we use MSE to feed that first segment of video to the video
element.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onPlayButtonClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;videoFileUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Used to be able to play video later.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video-pre-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchAndCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Defined above.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;arrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mediaSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mediaSource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sourceopen&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sourceOpen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sourceOpen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;revokeObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourceBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSourceBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video/webm; codecs=&quot;vp09.00.10.08&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      sourceBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// TODO: Fetch the rest of the video when user starts playing video.&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;:
For cross-origin resources, make sure your CORS headers are set properly. As
we can&#39;t create an array buffer from an opaque response retrieved with
&lt;code&gt;fetch(videoFileUrl, { mode: &#39;no-cors&#39; })&lt;/code&gt;, we won&#39;t be able to feed any video
or audio element.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;create-range-responses-with-a-service-worker&quot;&gt;Create Range responses with a service worker &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#create-range-responses-with-a-service-worker&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now what if you have fetched an entire video file and saved it in
the Cache API? When the browser sends an HTTP &lt;code&gt;Range&lt;/code&gt; request, you certainly don&#39;t
want to bring the entire video into renderer memory as the Cache API doesn&#39;t
support &lt;code&gt;Range&lt;/code&gt; responses &lt;a href=&quot;https://github.com/whatwg/fetch/issues/144&quot; rel=&quot;noopener&quot;&gt;yet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So let me show how to intercept these requests and return a customized &lt;code&gt;Range&lt;/code&gt;
response from a service worker.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadFromCacheOrFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadFromCacheOrFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Search through all available caches for this request.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Fetch from network if it&#39;s not already in the cache.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Note that we may want to add the response to the cache and return&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// network response in parallel as well.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Browser sends a HTTP Range request. Let&#39;s provide one reconstructed&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// manually from the cache.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;range&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Get start position from Range request header.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^bytes\=(\d+)\-&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;range&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;206&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          statusText&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Partial Content&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; slicedResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        slicedResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Content-Range&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bytes &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pos &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        slicedResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;X-From-Cache&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; slicedResponse&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;It is important to note that I used &lt;code&gt;response.blob()&lt;/code&gt; to recreate this sliced
response as this simply gives me a handle to the file while
&lt;code&gt;response.arrayBuffer()&lt;/code&gt; brings the entire file into renderer memory.&lt;/p&gt;
&lt;p&gt;My custom &lt;code&gt;X-From-Cache&lt;/code&gt; HTTP header can be used to know whether this request
came from the cache or from the network. It can be used by a player such as
&lt;a href=&quot;https://github.com/google/shaka-player/blob/master/docs/tutorials/service-worker.md&quot; rel=&quot;noopener&quot;&gt;ShakaPlayer&lt;/a&gt; to ignore the response time as an indicator of
network speed.&lt;/p&gt;
&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;f8EGZa32Mts&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;Have a look at the official &lt;a href=&quot;https://github.com/GoogleChrome/sample-media-pwa&quot; rel=&quot;noopener&quot;&gt;Sample Media App&lt;/a&gt; and in particular its
&lt;a href=&quot;https://github.com/GoogleChrome/sample-media-pwa/blob/master/src/client/scripts/ranged-response.js&quot; rel=&quot;noopener&quot;&gt;ranged-response.js&lt;/a&gt; file for a complete solution for how to handle &lt;code&gt;Range&lt;/code&gt;
requests.&lt;/p&gt;
</content>
    <author>
      <name>François Beaufort</name>
    </author>
  </entry>
  
  <entry>
    <title>Measuring offline usage</title>
    <link href="https://web.dev/measuring-offline-usage/"/>
    <updated>2020-10-28T00:00:00Z</updated>
    <id>https://web.dev/measuring-offline-usage/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;This article shows you how to track offline usage of your site to help you make a case for why your
site needs a better offline mode. It also explains pitfalls and problems to avoid when implementing
offline usage analytics.&lt;/p&gt;
&lt;h2 id=&quot;the-pitfalls-of-the-online-and-offline-browser-events&quot;&gt;The pitfalls of the online and offline browser events &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/measuring-offline-usage/#the-pitfalls-of-the-online-and-offline-browser-events&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The obvious solution for tracking offline usage is to create event listeners for the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;online&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;offline&lt;/code&gt;&lt;/a&gt; events (which
&lt;a href=&quot;https://caniuse.com/#feat=online-status&quot; rel=&quot;noopener&quot;&gt;many browsers support&lt;/a&gt;) and to put your analytics tracking
logic in those listeners. Unfortunately, there are several problems and limitations with this
approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In general tracking every network connection status event might be excessive, and is
counter-productive in a privacy-centric world where as little data as possible should be
collected. Additionally the &lt;code&gt;online&lt;/code&gt; and &lt;code&gt;offline&lt;/code&gt; events can fire for just a split second of
network loss, which a user probably wouldn&#39;t even see or notice.&lt;/li&gt;
&lt;li&gt;The analytics tracking of offline activity would never reach the analytics server because
the user is… well, offline.&lt;/li&gt;
&lt;li&gt;Tracking a timestamp locally when a user goes offline and sending the offline activity to
the analytics server when the user goes back online depends on the user revisiting your site.
If the user drops off your site due to a lack of an offline mode and never revisits, you have
no way to track that. The ability to track offline drop-offs is critical data for building a
case about why your site needs a better offline mode.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;online&lt;/code&gt; event is not very reliable as it
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine&quot; rel=&quot;noopener&quot;&gt;only knows about network access&lt;/a&gt;,
not internet access. Therefore a user might still be offline, and sending the tracking ping can
still fail.&lt;/li&gt;
&lt;li&gt;Even if the user still stays on the current page while being offline, none of the other
analytics events (e.g. scroll events, clicks, etc.) are tracked either, which might be the more
relevant and useful information.&lt;/li&gt;
&lt;li&gt;Being offline in itself is also not too meaningful in general. As a website developer it may
be more important to know what kinds of resources failed to load. This is especially relevant
in the context of SPAs, where a dropped network connection might not lead to a browser offline
error page (which users understand) but more likely to random dynamic parts of the page failing
silently.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can still use this solution to gain a basic understanding of offline usage, but the many
drawbacks and limitations need to be considered carefully.&lt;/p&gt;
&lt;h2 id=&quot;a-better-approach:-the-service-worker&quot;&gt;A better approach: the service worker &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/measuring-offline-usage/#a-better-approach:-the-service-worker&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The solution that enables offline mode turns out to be the better solution for tracking offline
usage.  The basic idea is to store analytics pings into IndexedDB as long as the user is offline,
and just resend them when the user goes online again. For Google Analytics this is already available
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-google-analytics&quot; rel=&quot;noopener&quot;&gt;off-the-shelf through a Workbox module&lt;/a&gt;,
but keep in mind that hits sent more than
&lt;a href=&quot;https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#qt&quot; rel=&quot;noopener&quot;&gt;four hours deferred&lt;/a&gt;
may not be processed. In its simplest form, it can be activated within a Workbox-based service
worker with these two lines:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; googleAnalytics &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-google-analytics&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;googleAnalytics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This tracks all existing events and pageview pings while being offline, but you wouldn&#39;t know that
they happened offline (as they are just replayed as-is). For this
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-google-analytics#using_a_custom_dimension_to_track_online_vs_offline_interactions&quot; rel=&quot;noopener&quot;&gt;you can manipulate tracking requests with Workbox&lt;/a&gt;
by adding an &lt;code&gt;offline&lt;/code&gt; flag to the analytics ping, using a custom dimension (&lt;code&gt;cd1&lt;/code&gt; in the code
sample below):&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; googleAnalytics &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-google-analytics&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;googleAnalytics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  parameterOverrides&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    cd1&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;offline&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;What if the user drops out of the page due to being offline, before an internet connection comes
back? Even though this normally puts the service worker to sleep (i.e. it&#39;s unable to send the data
when the connection comes back), the Workbox Google Analytics module uses the &lt;a href=&quot;https://developers.google.com/web/updates/2015/12/background-sync&quot; rel=&quot;noopener&quot;&gt;Background Sync
API&lt;/a&gt;, which sends the analytics
data later when the connection comes back, even if the user closes the tab or browser.&lt;/p&gt;
&lt;p&gt;There is still a drawback: while this makes existing tracking offline-capable, you would most likely
not see much relevant data coming in until you implement a basic offline mode. Users would still
drop off your site quickly when the connection breaks away. But now you can at least measure and
quantify this, by comparing average session length and user engagement for users with the offline
dimension applied versus your regular users.&lt;/p&gt;
&lt;h2 id=&quot;spas-and-lazy-loading&quot;&gt;SPAs and lazy loading &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/measuring-offline-usage/#spas-and-lazy-loading&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If users visiting a page built as a multi-page website go offline and try to navigate, the browser&#39;s
default offline page shows up, helping users understand what is happening. However, pages built as
single-page applications work differently. The user stays on the same page, and new content is
loaded dynamically through AJAX without any browser navigation. Users do not see the browser error
page when going offline. Instead, the dynamic parts of the page render with errors, go into
undefined states, or just stop being dynamic.&lt;/p&gt;
&lt;p&gt;Similar effects can happen within multi-page websites due to lazy loading. For example, maybe the
initial load happened online, but the user went offline before scrolling. All lazy loaded content
below the fold will silently fail and be missing.&lt;/p&gt;
&lt;p&gt;As these cases are really irritating to users, it makes sense to track them. Service workers are the
perfect spot to catch network errors, and eventually track them using analytics. With Workbox, a
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/advanced-recipes#comprehensive_fallbacks&quot; rel=&quot;noopener&quot;&gt;global catch handler&lt;/a&gt;
can be configured to inform the page about failed requests by sending a message event:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; setCatchHandler &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-routing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCatchHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; event &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Exit early if we don&#39;t have access to the client.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Eg, if it&#39;s cross-origin.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Get the client.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; clients&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Exit early if we don&#39;t get the client.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Eg, if it closed.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Send a message to the client.&lt;/span&gt;&lt;br /&gt;    client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      action&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;network_fail&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      destination&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Rather than listening to all failed requests, another way is to catch errors on specific routes
only. As an example, if we want to report errors happening on routes to &lt;code&gt;/products/*&lt;/code&gt; only, we can
add a check in &lt;code&gt;setCatchHandler&lt;/code&gt; which filters the URI with a regular expression.&lt;br /&gt;
A cleaner solution is to implement registerRoute with a custom handler. This encapsulates the
business logic into a separate route, with better maintainability in more complex service workers:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; registerRoute &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-routing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; NetworkOnly &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-strategies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; networkOnly &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NetworkOnly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https:\/\/example\.com\/products\/.+&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Attempt a network request.&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; networkOnly&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// If it fails, report the error.&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; event &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; clients&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        action&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;network_fail&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        destination&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;products&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;As a final step, the page needs to listen to the &lt;code&gt;message&lt;/code&gt; event, and send out the analytics ping.
Again, make sure to buffer analytics requests that happen offline within the service worker. As
described before, initialize the &lt;code&gt;workbox-google-analytics&lt;/code&gt; plugin for built-in Google Analytics
support.&lt;/p&gt;
&lt;p&gt;The following example uses Google Analytics, but can be applied in the same way for other analytics
vendors.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;serviceWorker&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// ... SW registration here&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// track offline error events&lt;/span&gt;&lt;br /&gt;  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gtag &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;action &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;network_fail&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;gtag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;network_fail&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        event_category&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// event_label: event.data.url,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// value: event.data.value&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This will track failed resource loads in Google Analytics, where they can be analyzed with
&lt;a href=&quot;https://support.google.com/analytics/answer/1033068?hl=en&quot; rel=&quot;noopener&quot;&gt;reporting&lt;/a&gt;. The derived insight can be
used to improve service worker caching and error handling in general, to make the page more robust
and reliable under unstable network conditions.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/measuring-offline-usage/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article showed different ways of tracking offline usage with their advantages and shortcomings.
While this can help to quantify how many of your users go offline and run into problems due to it,
it&#39;s still just a start. As long as your website does not offer a well-built offline mode, you
obviously won&#39;t see much offline usage in analytics.&lt;/p&gt;
&lt;p&gt;We recommend to get the full tracking in place, and then extend your offline capabilities in
iterations with an eye on tracking numbers. Start with a simple offline error page first–with
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/advanced-recipes#offline_page_only&quot; rel=&quot;noopener&quot;&gt;Workbox it&#39;s trivial to
do&lt;/a&gt;–and
should be considered a UX best practice similar to custom 404 pages anyway. Then work your way
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/advanced-recipes#comprehensive_fallbacks&quot; rel=&quot;noopener&quot;&gt;towards more advanced offline fallbacks&lt;/a&gt;
and finally towards real offline content. Make sure you advertise and explain this to your users
well, and you will see increasing usage. After all, everyone goes offline every once in a while.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://web.dev/how-to-report-metrics/&quot;&gt;How to report metrics and build a performance culture&lt;/a&gt;
and &lt;a href=&quot;https://web.dev/fixing-website-speed-cross-functionally/&quot;&gt;Fixing website speed cross-functionally&lt;/a&gt; for tips
on persuading cross-functional stakeholders to invest more in your website. Although those posts
are focused on performance, they should help you get general ideas about how to engage
stakeholders.&lt;/p&gt;
&lt;p&gt;Hero photo by &lt;a href=&quot;https://unsplash.com/@jcgellidon?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; rel=&quot;noopener&quot;&gt;JC Gellidon&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/subway-people?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Stephan Giesau</name>
    </author><author>
      <name>Martin Schierle</name>
    </author>
  </entry>
  
  <entry>
    <title>What is mixed content?</title>
    <link href="https://web.dev/what-is-mixed-content/"/>
    <updated>2019-09-07T00:00:00Z</updated>
    <id>https://web.dev/what-is-mixed-content/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;&lt;strong&gt;Mixed content&lt;/strong&gt; occurs when initial HTML is loaded over a secure
&lt;a href=&quot;https://web.dev/why-https-matters/&quot;&gt;HTTPS&lt;/a&gt; connection, but other resources (such as images,
videos, stylesheets, scripts) are loaded over an insecure HTTP connection.
This is called mixed content
because both HTTP and HTTPS content are being loaded to display the same page,
and the initial request was secure over HTTPS.&lt;/p&gt;
&lt;p&gt;Requesting subresources using the insecure HTTP protocol weakens the security of the entire page,
as these requests are vulnerable to &lt;a href=&quot;https://www.ietf.org/rfc/rfc7835.html#section-2.1.1&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;on-path attacks&lt;/strong&gt;&lt;/a&gt;,
where an attacker eavesdrops on a network connection and views or modifies the communication between two parties.
Using these resources, attackers can track users and replace content on a website,
and in the case of active mixed content, take complete control over the page, not just the insecure resources.&lt;/p&gt;
&lt;p&gt;Although many browsers report mixed content warnings to the user,
by the time this happens, it is too late:
the insecure requests have already been performed and the security of the page is compromised.&lt;/p&gt;
&lt;p&gt;This is why browsers are increasingly blocking mixed content.
If you have mixed content on your site,
then fixing it will ensure the content continues to load as browsers become more strict.&lt;/p&gt;
&lt;h2 id=&quot;the-two-types-of-mixed-content&quot;&gt;The two types of mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#the-two-types-of-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The two types of mixed content are: active and passive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Passive mixed content&lt;/strong&gt; refers to content that doesn&#39;t interact with the rest of the page,
and thus a man-in-the-middle attack is restricted to what they can do if they intercept or change that content.
Passive mixed content is defined as images, video, and audio content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active mixed content&lt;/strong&gt; interacts with the page as a whole and allows an attacker to do almost anything with the page.
Active mixed content includes scripts, stylesheets, iframes,
and other code that the browser can download and execute.&lt;/p&gt;
&lt;h3 id=&quot;passive-mixed-content&quot;&gt;Passive mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#passive-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Passive mixed content is seen as less problematic yet still poses a security threat to your site and your users.
For example, an attacker can intercept HTTP requests for images on your site and swap or replace these images;
the attacker can swap the &lt;em&gt;save&lt;/em&gt; and &lt;em&gt;delete&lt;/em&gt; button images,
causing your users to delete content without intending to;
replace your product diagrams with lewd or pornographic content,
defacing your site; or replace your product pictures with ads for a different site or product.&lt;/p&gt;
&lt;p&gt;Even if the attacker doesn&#39;t alter the content of your site,
an attacker can track users via mixed content requests.
The attacker can tell which pages a user visits and which products they view based on images or other resources that the browser loads.&lt;/p&gt;
&lt;p&gt;If passive mixed content is present most browsers will indicate in the URL bar that the page is not secure,
even when the page itself was loaded over HTTPS.
You can observe this behavior with this &lt;a href=&quot;https://passive-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;demo&lt;/a&gt;
that contains examples of passive mixed content.&lt;/p&gt;
&lt;p&gt;Until recently passive mixed content was loaded in all browsers,
as to block it would have broken many websites.
This is now beginning to change and so it is vital to update any instances of mixed content on your site.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.chromium.org/2019/10/no-more-mixed-messages-about-https.html&quot; rel=&quot;noopener&quot;&gt;Chrome is currently rolling out&lt;/a&gt;
automatic upgrading of passive mixed content where possible.
Automatic upgrading means that if the asset is available over HTTPS, but has been hardcoded as HTTP,
the browser will load the HTTPS version. If no secure version can be found the asset will not load.&lt;/p&gt;
&lt;p&gt;Whenever it detects mixed content or auto-upgrades passive mixed content,
Chrome logs detailed messages to the &lt;strong&gt;Issues&lt;/strong&gt; tab in DevTools
to guide you on how to fix the specific issue.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The Issues tab in Chrome DevTools shows detailed information about the specific mixed content issue and how to fix it&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;310&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;active-mixed-content&quot;&gt;Active mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#active-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Active mixed content poses a greater threat than passive mixed content.
An attacker can intercept and rewrite active content,
thereby taking full control of your page or even your entire website.
This allows the attacker to change anything about the page,
including displaying entirely different content,
stealing user passwords or other login credentials,
stealing user session cookies,
or redirecting the user to a different site entirely.&lt;/p&gt;
&lt;p&gt;Due to the severity of this threat,
most browsers already block this type of content by default to protect users,
but functionality varies between browser vendors and versions.&lt;/p&gt;
&lt;p&gt;This other &lt;a href=&quot;https://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;demo&lt;/a&gt; contains examples of active mixed content.
&lt;a href=&quot;http://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;Load the example over HTTP&lt;/a&gt;
to see the content that&#39;s blocked when you &lt;a href=&quot;https://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;load the example over
HTTPS&lt;/a&gt;. Blocked content will also
be detailed in the &lt;strong&gt;Issues&lt;/strong&gt; tab.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The Issues tab in Chrome DevTools shows detailed information about the specific mixed content issue and how to fix it&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;361&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Browsers also highlight blocked content in their DevTools. Blocked content
issues are detailed in the &lt;strong&gt;Issues&lt;/strong&gt; tab in Chromium-based browsers. Firefox
and Safari log messages in the console.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;the-mixed-content-specification&quot;&gt;The mixed content specification &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#the-mixed-content-specification&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Browsers follow the &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/&quot; rel=&quot;noopener&quot;&gt;mixed content specification&lt;/a&gt;,
which defines the &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/#optionally-blockable-mixed-content&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;optionally blockable content&lt;/strong&gt;&lt;/a&gt;
and &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/#category-blockable&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;blockable content&lt;/strong&gt;&lt;/a&gt; categories.&lt;/p&gt;
&lt;p&gt;From the spec,
a resource qualifies as optionally blockable content
&amp;quot;when the risk of allowing its usage as mixed content is outweighed by the risk of breaking significant portions of the web&amp;quot;;
this is a subset of the passive mixed content category described above.&lt;/p&gt;
&lt;p&gt;All content that is not &lt;strong&gt;optionally blockable&lt;/strong&gt; is considered &lt;strong&gt;blockable&lt;/strong&gt;,
and should be blocked by the browser.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;There is a &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/level2.html&quot; rel=&quot;noopener&quot;&gt;Level 2 of the Mixed Content specification&lt;/a&gt; in progress,
which will add automatic upgrading to the spec.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In recent years, &lt;a href=&quot;https://transparencyreport.google.com/https/overview&quot; rel=&quot;noopener&quot;&gt;HTTPS usage has risen dramatically&lt;/a&gt;,
and has become the clear default on the web.
This makes it more feasible now for browsers to consider blocking all mixed content,
even those subresource types defined in the &lt;a href=&quot;https://w3c.github.io/webappsec/specs/mixedcontent/&quot; rel=&quot;noopener&quot;&gt;mixed content specification&lt;/a&gt; as &lt;strong&gt;optionally blockable&lt;/strong&gt;.
This is why we now see Chrome taking a stricter approach to these subresources.&lt;/p&gt;
&lt;h3 id=&quot;older-browsers&quot;&gt;Older browsers &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#older-browsers&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is important to remember that not every visitor to your website uses the most up-to-date browsers.
Different versions from different browser vendors each treat mixed content differently.
At worst, older browsers and versions don&#39;t block any mixed content at all,
which is very unsafe for the user.&lt;/p&gt;
&lt;p&gt;By fixing your mixed content problems you ensure that your content is visible in new browsers.
You also help protect users from dangerous content that isn&#39;t blocked by older browsers.&lt;/p&gt;
</content>
    <author>
      <name>Jo-el van Bergen</name>
    </author><author>
      <name>Rachel Andrew</name>
    </author>
  </entry>
  
  <entry>
    <title>Fixing mixed content</title>
    <link href="https://web.dev/fixing-mixed-content/"/>
    <updated>2019-09-07T00:00:00Z</updated>
    <id>https://web.dev/fixing-mixed-content/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Supporting HTTPS for your website is an important step to protecting your site and your users from attack,
but mixed content can render that protection useless.
Increasingly insecure mixed content will be blocked by browsers, as explained in &lt;a href=&quot;https://web.dev/what-is-mixed-content&quot;&gt;What is mixed content?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this guide we will demonstrate techniques and tools for fixing existing mixed content issues
and preventing new ones from happening.&lt;/p&gt;
&lt;h2 id=&quot;finding-mixed-content-by-visiting-your-site&quot;&gt;Finding mixed content by visiting your site &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#finding-mixed-content-by-visiting-your-site&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When visiting an HTTPS page in Google Chrome,
the browser alerts you to mixed content as errors and warnings in the JavaScript console.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://web.dev/what-is-mixed-content&quot;&gt;What is mixed content?&lt;/a&gt;,
you can find a number of examples and see how the problems are reported in Chrome DevTools.&lt;/p&gt;
&lt;p&gt;The example of &lt;a href=&quot;https://passive-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;passive mixed content&lt;/a&gt; will give the following warnings.
If the browser is able to find the content at an &lt;code&gt;https&lt;/code&gt; URL it automatically upgrades it, then shows a message.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Chrome DevTools showing the warnings displayed when mixed content is detected and upgraded&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;294&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;Active mixed content&lt;/a&gt; is blocked and displays a warning.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Chrome DevTools showing the warnings displayed when active mixed content is blocked&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;304&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;If you find warnings like these for &lt;code&gt;http://&lt;/code&gt; URLs on your site,
you need to fix them in your site&#39;s source.
It&#39;s helpful to make a list of these URLs, along with the page you found them on, for use when you fix them.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Mixed content errors and warnings are only shown for the page you are currently viewing,
and the JavaScript console is cleared every time you navigate to a new  page.
This means you will have to view every page of your site individually to find these errors.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;finding-mixed-content-in-your-site&quot;&gt;Finding mixed content in your site &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#finding-mixed-content-in-your-site&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can search for mixed content directly in your source code.
Search for &lt;code&gt;http://&lt;/code&gt; in your source and look for tags that include HTTP URL attributes.
Note that having &lt;code&gt;http://&lt;/code&gt; in the &lt;code&gt;href&lt;/code&gt; attribute of anchor tags (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;)
is often not a mixed content issue, with some notable exceptions discussed later.&lt;/p&gt;
&lt;p&gt;If your site is published using a content management system,
it is possible that links to insecure URLs are inserted when pages are published.
For example, images may be included with a full URL rather than a relative path.
You will need to find and fix these within the CMS content.&lt;/p&gt;
&lt;h3 id=&quot;fixing-mixed-content&quot;&gt;Fixing mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#fixing-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you&#39;ve found mixed content in your site&#39;s source,
you can follow these steps to fix it.&lt;/p&gt;
&lt;p&gt;If you get a console message that a resource request has been automatically upgraded from HTTP to HTTPS,
you can safely change the &lt;code&gt;http://&lt;/code&gt; URL for the resource in your code to &lt;code&gt;https://&lt;/code&gt;.
You can also check to see if a resource is available securely by changing &lt;code&gt;http://&lt;/code&gt; to &lt;code&gt;https://&lt;/code&gt; in the browser URL bar
and attempting to open the URL in a browser tab.&lt;/p&gt;
&lt;p&gt;If the resource is not available via &lt;code&gt;https://&lt;/code&gt;, you should consider one of the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Include the resource from a different host, if one is available.&lt;/li&gt;
&lt;li&gt;Download and host the content on your site directly, if you are legally allowed to do so.&lt;/li&gt;
&lt;li&gt;Exclude the resource from your site altogether.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having fixed the problem,
view the page where you found the error originally and verify that the error no longer appears.&lt;/p&gt;
&lt;h3 id=&quot;beware-of-non-standard-tag-usage&quot;&gt;Beware of non-standard tag usage &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#beware-of-non-standard-tag-usage&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Beware of non-standard tag usage on your site.
For instance, anchor (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) tag URLs don&#39;t result in mixed content errors,
as they cause the browser to navigate to a new page.
This means they usually don&#39;t need to be fixed.
However some image gallery scripts override the functionality of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;
tag and load the HTTP resource specified by the &lt;code&gt;href&lt;/code&gt; attribute into a lightbox display on the page,
causing a mixed content problem.&lt;/p&gt;
&lt;h2 id=&quot;handle-mixed-content-at-scale&quot;&gt;Handle mixed content at scale &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#handle-mixed-content-at-scale&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The manual steps above work well for smaller websites;
but for large websites or sites with many separate development teams,
it can be tough to keep track of all the content being loaded.
To help with this task, you can use content security policy
to instruct the browser to notify you about mixed content and ensure that your pages never unexpectedly load insecure resources.&lt;/p&gt;
&lt;h3 id=&quot;content-security-policy&quot;&gt;Content security policy &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#content-security-policy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/security/csp/&quot; rel=&quot;noopener&quot;&gt;Content security policy&lt;/a&gt; (CSP)
is a multi-purpose browser feature that you can use to manage mixed content at scale.
The CSP reporting mechanism can be used to track mixed content on your site,
and provide enforcement policies to protect users by upgrading or blocking mixed content.&lt;/p&gt;
&lt;p&gt;You can enable these features for a page by including the
&lt;code&gt;Content-Security-Policy&lt;/code&gt; or &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt; header in the response sent from your server.
Additionally you can set &lt;code&gt;Content-Security-Policy&lt;/code&gt;
(though &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt;) using a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your page.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Modern browsers enforce all content security policies that they receive.
Multiple CSP header values received by the browser in the response header or
&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; elements are combined and enforced as a single policy;
reporting policies are likewise combined.
Policies are combined by taking the intersection of the policies;
that is to say, each policy after the first can only further restrict the allowed content, not broaden it.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;finding-mixed-content-with-content-security-policy&quot;&gt;Finding mixed content with content security policy &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#finding-mixed-content-with-content-security-policy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use content security policy to collect reports of mixed content on your site.
To enable this feature, set the &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt; directive by adding it as a response header for your site.&lt;/p&gt;
&lt;p&gt;Response header:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Content-Security-Policy-Report-Only: default-src https: &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;; report-uri https://example.com/reportingEndpoint&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-uri&quot; rel=&quot;noopener&quot;&gt;report-uri&lt;/a&gt; response header is being deprecated in favor of
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to&quot; rel=&quot;noopener&quot;&gt;report-to&lt;/a&gt;.
Browser support for &lt;code&gt;report-to&lt;/code&gt; is currently limited to Chrome and Edge.
You can provide both headers, in which case &lt;code&gt;report-uri&lt;/code&gt; will be ignored if the browser supports &lt;code&gt;report-to&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Whenever a user visits a page on your site,
their browser sends JSON-formatted reports regarding anything that violates the content security policy to
&lt;code&gt;https://example.com/reportingEndpoint&lt;/code&gt;.
In this case, anytime a subresource is loaded over HTTP, a report is sent.
These reports include the page URL where the policy violation occurred and the subresource URL that violated the policy.
If you configure your reporting endpoint to log these reports,
you can track the mixed content on your site without visiting each page yourself.&lt;/p&gt;
&lt;p&gt;The two caveats to this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users have to visit your page in a browser that understands the CSP header. This is true for most modern browsers.&lt;/li&gt;
&lt;li&gt;You only get reports for pages visited by your users.
So if you have pages that don&#39;t get much traffic,
it might be some time before you get reports for your entire site.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://developers.google.com/web/fundamentals/security/csp/&quot; rel=&quot;noopener&quot;&gt;Content security policy&lt;/a&gt;
guide has more information and an example endpoint.&lt;/p&gt;
&lt;h3 id=&quot;alternatives-to-reporting-with-csp&quot;&gt;Alternatives to reporting with CSP &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#alternatives-to-reporting-with-csp&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your site is hosted for you by a platform such as Blogger,
you may not have access to modify headers and add a CSP.
Instead, a viable alternative could be to use a website crawler to find issues across your site for you, such as
&lt;a href=&quot;https://httpschecker.net/how-it-works#httpsChecker&quot; rel=&quot;noopener&quot;&gt;HTTPSChecker&lt;/a&gt;
or
&lt;a href=&quot;https://github.com/bramus/mixed-content-scan&quot; rel=&quot;noopener&quot;&gt;Mixed Content Scan&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;upgrading-insecure-requests&quot;&gt;Upgrading insecure requests &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#upgrading-insecure-requests&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Browsers are beginning to upgrade and block insecure requests.
You can use CSP directives to force automatic upgrading or blocking of these assets.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.w3.org/TR/upgrade-insecure-requests/&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;upgrade-insecure-requests&lt;/code&gt;&lt;/a&gt;
CSP directive instructs the browser to upgrade insecure URLs before making network requests.&lt;/p&gt;
&lt;p&gt;As an example, if a page contains an image tag with an HTTP URL such as
&lt;code&gt;&amp;lt;img src=&amp;quot;http://example.com/image.jpg&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The browser instead makes a secure request for
&lt;code&gt;https://example.com/image.jpg&lt;/code&gt;, thus saving the user from mixed content.&lt;/p&gt;
&lt;p&gt;You can enable this behavior either by sending a &lt;code&gt;Content-Security-Policy&lt;/code&gt; header with this directive:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-markup&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;Content-Security-Policy: upgrade-insecure-requests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Or by embedding that same directive inline in the document&#39;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
section using a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Content-Security-Policy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;upgrade-insecure-requests&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;As with browser automatic upgrading, if the resource is not available over HTTPS,
the upgraded request fails and the resource is not loaded.
This maintains the security of your page. The &lt;code&gt;upgrade-insecure-requests&lt;/code&gt; directive will go further than automatic browser upgrading,
attempting to upgrade requests that the browser currently does not.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;upgrade-insecure-requests&lt;/code&gt; directive cascades into &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; documents,
ensuring the entire page is protected.&lt;/p&gt;
&lt;h3 id=&quot;blocking-all-mixed-content&quot;&gt;Blocking all mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#blocking-all-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An alternative option for protecting users is the
&lt;a href=&quot;https://www.w3.org/TR/mixed-content/#strict-checking&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;block-all-mixed-content&lt;/code&gt;&lt;/a&gt; CSP directive.
This directive instructs the browser to never load mixed content;
all mixed content resource requests are blocked,
including both active and passive mixed content.
This option also cascades into &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; documents, ensuring the entire page is mixed content free.&lt;/p&gt;
&lt;p&gt;A page can opt itself into this behavior either by sending a
&lt;code&gt;Content-Security-Policy&lt;/code&gt; header with this directive:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-markup&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;Content-Security-Policy: block-all-mixed-content&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Or by embedding that same directive inline in the document&#39;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
section using a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Content-Security-Policy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;block-all-mixed-content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;If you set both &lt;code&gt;upgrade-insecure-requests&lt;/code&gt; and &lt;code&gt;block-all-mixed-content&lt;/code&gt;
&lt;code&gt;upgrade-insecure-requests&lt;/code&gt; will be evaluated and used first.
The browser will not go on to block requests.
Therefore you should use one or the other.&lt;/p&gt;
&lt;/div&gt;
</content>
    <author>
      <name>Jo-el van Bergen</name>
    </author><author>
      <name>Rachel Andrew</name>
    </author>
  </entry>
  
  <entry>
    <title>Content delivery networks (CDNs)</title>
    <link href="https://web.dev/content-delivery-networks/"/>
    <updated>2020-09-22T00:00:00Z</updated>
    <id>https://web.dev/content-delivery-networks/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Content delivery networks (CDNs) improve site performance by using a distributed network of servers to deliver resources to users. Because CDNs reduce server load, they reduce server costs and are well-suited to handling traffic spikes. This article discusses how CDNs work and provides platform-agnostic guidance on choosing, configuring, and optimizing a CDN setup.&lt;/p&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#overview&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A content delivery network consists of a network of servers that are optimized for quickly delivering content to users. Although CDNs are arguably best known for serving cached content, CDNs can also improve the delivery of uncacheable content. Generally speaking, the more of your site delivered by your CDN, the better.&lt;/p&gt;
&lt;p&gt;At a high-level, the performance benefits of CDNs stem from a handful of principles: CDN servers are located closer to users than &lt;a href=&quot;https://en.wikipedia.org/wiki/Upstream_server&quot; rel=&quot;noopener&quot;&gt;origin servers&lt;/a&gt; and therefore have a shorter &lt;a href=&quot;https://en.wikipedia.org/wiki/Round-trip_delay&quot; rel=&quot;noopener&quot;&gt;round-trip time (RTT)&lt;/a&gt; latency; networking optimizations allow CDNs to deliver content more quickly than if the content was loaded &amp;quot;directly&amp;quot; from the origin server; lastly, CDN caches eliminate the need for a request to travel to the origin server.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--key-term&quot;&gt;
&lt;p&gt;&lt;strong&gt;Key Term&lt;/strong&gt;:
&lt;strong&gt;Origin server&lt;/strong&gt; refers to the server that a CDN retrieves content from.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;resource-delivery&quot;&gt;Resource delivery &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#resource-delivery&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Although it may seem non-intuitive, using a CDN to deliver resources (even uncacheable ones) will typically be faster than having the user load the resource &amp;quot;directly&amp;quot; from your servers.&lt;/p&gt;
&lt;p&gt;When a CDN is used to deliver resources from the origin, a new connection is established between the client and a nearby CDN server. The remainder of the journey (in other words, the data transfer between the CDN server and origin) occurs over the CDN&#39;s network - which often includes existing, persistent connections with the origin. The benefits of this are twofold: terminating the new connection as close to the user as possible eliminates unnecessary connection setup costs (establishing a new connection is expensive and requires multiple roundtrips); using a pre-warmed connection allows data to be immediately transferred at the maximum possible throughput.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Comparison of connection setup with and without a CDN&quot; decoding=&quot;async&quot; height=&quot;512&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/M9kzM7J7FenUyO7E9MF0.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Some CDNs improve upon this even further by routing traffic to the origin through multiple CDN servers spread across the Internet. Connections between CDN servers occur over reliable and highly optimized routes, rather than routes determined by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Border_Gateway_Protocol&quot; rel=&quot;noopener&quot;&gt;Border Gateway Protocol (BGP)&lt;/a&gt;. Although BGP is the internet&#39;s de facto routing protocol, its routing decisions are not always performance-oriented. Therefore, BGP-determined routes are likely to be less performant than the finely-tuned routes between CDN servers.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Comparison of connection setup with and without a CDN&quot; decoding=&quot;async&quot; height=&quot;449&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/ZLMPFySQgBkpWvgujuJP.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;caching&quot;&gt;Caching &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#caching&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Caching resources on a CDN&#39;s servers eliminates the need for a request to travel all the way to the origin in order to be served. As a result, the resource is delivered more quickly; this also reduces the load on the origin server.&lt;/p&gt;
&lt;h4 id=&quot;adding-resources-to-the-cache&quot;&gt;Adding resources to the cache &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#adding-resources-to-the-cache&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The most commonly used method of populating CDN caches is to have the CDN &amp;quot;pull&amp;quot; resources as they are needed - this is known as &amp;quot;origin pull&amp;quot;. The first time that a particular resource is requested from the cache the CDN will request it from the origin server and cache the response. In this manner, the contents of the cache are built-up over time as additional uncached resources are requested.&lt;/p&gt;
&lt;h4 id=&quot;removing-resources-from-the-cache&quot;&gt;Removing resources from the cache &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#removing-resources-from-the-cache&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;CDNs use cache eviction to periodically remove not-so-useful resources from the cache. In addition, site owners can use purging to explicitly remove resources.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cache eviction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Caches have a finite storage capacity. When a cache nears its capacity, it makes room for new resources by removing resources that haven&#39;t been accessed recently, or which take up a lot of space. This process is known as cache eviction. A resource being evicted from one cache does not necessarily mean that it has been evicted from all caches in a CDN network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purging&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Purging (also known as &amp;quot;cache invalidation&amp;quot;) is a mechanism for removing a resource from a CDN&#39;s caches without having to wait for it to expire or be evicted. It is typically executed via an API. Purging is critical in situations where content needs to be retracted (for example, correcting typos, pricing errors, or incorrect news articles). On top of that, it can also play a crucial role in a site&#39;s caching strategy.&lt;/p&gt;
&lt;p&gt;If a CDN supports near instant purging, purging can be used as a mechanism for managing the caching of dynamic content: cache dynamic content using a long TTL, then purge the resource whenever it is updated. In this way, it is possible to maximize the caching duration of a dynamic resource, despite not knowing in advance when the resource will change. This technique is sometimes referred to as &amp;quot;hold-till-told caching&amp;quot;.&lt;/p&gt;
&lt;p&gt;When purging is used at scale it is typically used in conjunction with a concept known as &amp;quot;cache tags&amp;quot; or &amp;quot;surrogate cache keys&amp;quot;. This mechanism allows site owners to associate one or more additional identifiers (sometimes referred to as &amp;quot;tags&amp;quot;) with a cached resource. These tags can then be used to carry out highly granular purging. For example, you might add a &amp;quot;footer&amp;quot; tag to all resources (for example, &lt;code&gt;/about&lt;/code&gt;, &lt;code&gt;/blog&lt;/code&gt;) that contain your site footer. When the footer is updated, instruct your CDN to purge all resources associated with the &amp;quot;footer&amp;quot; tag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;cacheable-resources&quot;&gt;Cacheable resources &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#cacheable-resources&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If and how a resource should be cached depends on whether it is public or private; static or dynamic.&lt;/p&gt;
&lt;h5 id=&quot;private-and-public-resources&quot;&gt;Private and public resources &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#private-and-public-resources&quot;&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Private Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Private resources contain data intended for a single user and therefore should not be cached by a CDN. Private resources are indicated by the &lt;code&gt;Cache-Control: private&lt;/code&gt; header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Public Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Public resources do not contain user-specific information and therefore are cacheable by a CDN. A resource may be considered cacheable by a CDN if it does not have a &lt;code&gt;Cache-Control: no-store&lt;/code&gt; or &lt;code&gt;Cache-Control: private&lt;/code&gt; header. The length of time that a public resource can be cached depends on how frequently the asset changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;dynamic-and-static-content&quot;&gt;Dynamic and static content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#dynamic-and-static-content&quot;&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dynamic content is content that changes frequently. An API response and a store homepage are examples of this content type. However, the fact that this content changes frequently doesn&#39;t necessarily preclude it from being cached. During periods of heavy traffic, caching these responses for very short periods of time (for example, 5 seconds) can significantly reduce the load on the origin server, while having minimal impact on data freshness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Static content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Static content changes infrequently, if ever. Images, videos, and versioned libraries are typically examples of this content type. Because static content does not change, it should be cached with a long Time to Live (TTL) - for example, 6 months or 1 year.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;choosing-a-cdn&quot;&gt;Choosing a CDN &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#choosing-a-cdn&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Performance is typically a top consideration when choosing a CDN. However, the other features that a CDN offers (for example, security and analytics features), as well as a CDN&#39;s pricing, support, and onboarding are all important to consider when choosing a CDN.&lt;/p&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#performance&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At a high-level, a CDN&#39;s performance strategy can be thought of in terms of the tradeoff between minimizing latency and maximizing cache hit ratio. CDNs with many points of presence (PoPs) can deliver lower latency but may experience lower cache hit ratios as a result of traffic being split across more caches. Conversely, CDNs with fewer PoPs may be located geographically further from users, but can achieve higher cache hit ratios.&lt;/p&gt;
&lt;p&gt;As a result of this tradeoff, some CDNs use a tiered approach to caching: PoPs located close to users (also known as &amp;quot;edge caches&amp;quot;) are supplemented with central PoPs that have higher cache hit ratios. When an edge cache can&#39;t find a resource, it will look to a central PoP for the resource. This approach trades slightly greater latency for a higher likelihood that the resource can be served from a CDN cache - though not necessarily an edge cache.&lt;/p&gt;
&lt;p&gt;The tradeoff between minimizing latency and minimizing cache hit ratio is a spectrum. No particular approach is universally better; however, depending on the nature of your site and its user base, you may find that one of these approaches delivers significantly better performance than the other.&lt;/p&gt;
&lt;p&gt;It&#39;s also worth noting that CDN performance can vary significantly depending on geography, time of day, and even current events. Although it&#39;s always a good idea to do your own research on a CDN&#39;s performance, it can be difficult to predict the exact performance you&#39;ll get from a CDN.&lt;/p&gt;
&lt;h3 id=&quot;additional-features&quot;&gt;Additional features &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#additional-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CDNs typically offer a wide variety of features in addition to their core CDN offering. Commonly offered features include: load balancing, image optimization, video streaming, edge computing, and security products.&lt;/p&gt;
&lt;h2 id=&quot;how-to-setup-and-configure-a-cdn&quot;&gt;How to setup and configure a CDN &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#how-to-setup-and-configure-a-cdn&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ideally you should use a CDN to serve your entire site. At a high-level, the setup process for this consists of signing up with a CDN provider, then updating your CNAME DNS record to point at the CDN provider. For example, the CNAME record for &lt;code&gt;www.example.com&lt;/code&gt; might point to &lt;code&gt;example.my-cdn.com&lt;/code&gt;. As a result of this DNS change, traffic to your site will be routed through the CDN.&lt;/p&gt;
&lt;p&gt;If using a CDN to serve all resources is not an option, you can configure a CDN to only serve a subset of resources - for example, only static resources. You can do this by creating a separate CNAME record that will only be used for resources that should be served by the CDN. For example, you might create a &lt;code&gt;static.example.com&lt;/code&gt; CNAME record that points to &lt;code&gt;example.my-cdn.com&lt;/code&gt;. You would also need to rewrite the URLs of resources being served by the CDN to point to the &lt;code&gt;static.example.com&lt;/code&gt; subdomain that you created.&lt;/p&gt;
&lt;p&gt;Although your CDN will be set up at this point, there will likely be inefficiencies in your configuration. The next two sections of this article will explain how to get the most out of your CDN by increasing cache hit ratio and enabling performance features.&lt;/p&gt;
&lt;h2 id=&quot;improving-cache-hit-ratio&quot;&gt;Improving cache hit ratio &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#improving-cache-hit-ratio&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An effective CDN setup will serve as many resources as possible from the cache. This is commonly measured by cache hit ratio (CHR). Cache hit ratio is defined as the number of cache hits divided by the number of total requests during a given time interval.&lt;/p&gt;
&lt;p&gt;A freshly initialized cache will have a CHR of 0 but this increases as the cache is populated with resources. A CHR of 90% is a good goal for most sites. Your CDN provider should supply you with analytics and reporting regarding your CHR.&lt;/p&gt;
&lt;p&gt;When optimizing CHR, the first thing to verify is that all cacheable resources are being cached and cached for the correct length of time. This is a simple assessment that should be undertaken by all sites.&lt;/p&gt;
&lt;p&gt;The next level of CHR optimization, broadly speaking, is to fine tune your CDN settings to make sure that logically equivalent server responses aren&#39;t being cached separately. This is a common inefficiency that occurs due to the impact of factors like query params, cookies, and request headers on caching.&lt;/p&gt;
&lt;h3 id=&quot;initial-audit&quot;&gt;Initial audit &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#initial-audit&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most CDNs will provide cache analytics. In addition, tools like &lt;a href=&quot;https://webpagetest.org/&quot; rel=&quot;noopener&quot;&gt;WebPageTest&lt;/a&gt; and &lt;a href=&quot;https://web.dev/uses-long-cache-ttl/&quot;&gt;Lighthouse&lt;/a&gt; can also be used to quickly verify that all of a page&#39;s static resources are being cached for the correct length of time. This is accomplished by checking the HTTP Cache headers of each resource. Caching a resource using the maximum appropriate Time To Live (TTL) will avoid unnecessary origin fetches in the future and therefore increase CHR.&lt;/p&gt;
&lt;p&gt;At a minimum, one of these headers typically needs to be set in order for a resource to be cached by a CDN:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cache-Control: max-age=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache-Control: s-maxage=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expires&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, although it does not impact if or how a resource is cached by a CDN, it is good practice to also set the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#Revalidation_and_reloading&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Cache-Control: immutable&lt;/code&gt;&lt;/a&gt; directive.&lt;code&gt;Cache-Control: immutable&lt;/code&gt; indicates that a resource &amp;quot;will not be updated during its freshness lifetime&amp;quot;. As a result, the browser will not revalidate the resource when serving it from the browser cache, thereby eliminating an unnecessary server request. Unfortunately, this directive is only &lt;a href=&quot;https://caniuse.com/#feat=mdn-http_headers_cache-control_immutable&quot; rel=&quot;noopener&quot;&gt;supported&lt;/a&gt; by Firefox and Safari - it is not supported by Chromium-based browsers. This &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=611416&quot; rel=&quot;noopener&quot;&gt;issue&lt;/a&gt; tracks Chromium support for &lt;code&gt;Cache-Control: immutable&lt;/code&gt;. Starring this issue can help encourage support for this feature.&lt;/p&gt;
&lt;p&gt;For a more detailed explanation of HTTP caching, refer to &lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;Prevent unnecessary network requests with the HTTP Cache&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;fine-tuning&quot;&gt;Fine tuning &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#fine-tuning&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A slightly simplified explanation of how CDN caches work is that the URL of a resource is used as the key for caching and retrieving the resource from the cache. In practice, this is still overwhelmingly true, but is complicated slightly by the impact of things like request headers and query params. As a result, rewriting request URLs is an important technique for both maximizing CHR and ensuring that the correct content is served to users. A properly configured CDN instance strikes the correct balance between overly granular caching (which hurts CHR) and insufficiently granular caching (which results in incorrect responses being served to users).&lt;/p&gt;
&lt;h4 id=&quot;query-params&quot;&gt;Query params &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#query-params&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;By default, CDNs take query params into consideration when caching a resource. However, small adjustments to query param handling can have a significant impact on CHR. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unnecessary query params&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By default, a CDN would cache &lt;code&gt;example.com/blog&lt;/code&gt; and &lt;code&gt;example.com/blog?referral_id=2zjk&lt;/code&gt; separately even though they are likely the same underlying resource. This is fixed by adjusting a CDN&#39;s configuration to ignore the &lt;code&gt;referral\_id&lt;/code&gt; query param.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Query param order&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A CDN will cache &lt;code&gt;example.com/blog?id=123&amp;amp;query=dogs&lt;/code&gt; separately from &lt;code&gt;example.com/blog?query=dogs&amp;amp;id=123&lt;/code&gt;. For most sites, query param order does not matter, so configuring the CDN to sort the query params (thereby normalizing the URL used to cache the server response) will increase CHR.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;vary&quot;&gt;Vary &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#vary&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary&quot; rel=&quot;noopener&quot;&gt;Vary&lt;/a&gt; response header informs caches that the server response corresponding to a particular URL can vary depending on the headers set on the request (for example, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language&quot; rel=&quot;noopener&quot;&gt;Accept-Language&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding&quot; rel=&quot;noopener&quot;&gt;Accept-Encoding&lt;/a&gt; request headers). As a result, it instructs a CDN to cache these responses separately. The Vary header is not widely supported by CDNs and may result in an otherwise cacheable resource not being served from a cache.&lt;/p&gt;
&lt;p&gt;Although the Vary header can be a useful tool, inappropriate usage hurts CHR. In addition, if you do use &lt;code&gt;Vary&lt;/code&gt;, normalizing request headers will help improve CHR. For example, without normalization the request headers &lt;code&gt;Accept-Language: en-US&lt;/code&gt; and &lt;code&gt;Accept-Language: en-US,en;q=0.9&lt;/code&gt; would result in two separate cache entries, even though their contents would likely be identical.&lt;/p&gt;
&lt;h4 id=&quot;cookies&quot;&gt;Cookies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#cookies&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Cookies are set on requests via the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/a&gt; header; they are set on responses via the &lt;code&gt;Set-Cookie&lt;/code&gt; header. Unnecessary use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Set-Cookie&lt;/code&gt;&lt;/a&gt; header should be avoided given that caches will typically not cache server responses containing this header.&lt;/p&gt;
&lt;h2 id=&quot;performance-features&quot;&gt;Performance features &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#performance-features&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This section discusses performance features that are commonly offered by CDNs as part of their core product offering. Many sites forget to enable these features, thereby losing out on easy performance wins.&lt;/p&gt;
&lt;h3 id=&quot;compression&quot;&gt;Compression &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#compression&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All text-based responses should be &lt;a href=&quot;https://web.dev/reduce-network-payloads-using-text-compression/#data-compression&quot;&gt;compressed&lt;/a&gt; with either gzip or Brotli. If you have the choice, choose Brotli over gzip. Brotli is a newer compression algorithm, and compared to gzip, it can achieve higher compression ratios.&lt;/p&gt;
&lt;p&gt;There are two types of CDN support for Brotli compression: &amp;quot;Brotli from origin&amp;quot; and &amp;quot;automatic Brotli compression&amp;quot;.&lt;/p&gt;
&lt;h4 id=&quot;brotli-from-origin&quot;&gt;Brotli from origin &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#brotli-from-origin&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Brotli from origin is when a CDN serves resources that were Brotli-compressed by the origin. Although this may seem like a feature that all CDNs should be able to support out of the box, it requires that a CDN be able to cache multiple versions (in other words, gzip-compressed and Brotli-compressed versions) of the resource corresponding to a given URL.&lt;/p&gt;
&lt;h4 id=&quot;automatic-brotli-compression&quot;&gt;Automatic Brotli compression &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#automatic-brotli-compression&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Automatic Brotli compression is when resources are Brotli compressed by the CDN. CDNs can compress both cacheable and non-cacheable resources.&lt;/p&gt;
&lt;p&gt;The first time that a resource is requested it is served using &amp;quot;good enough&amp;quot; compression - for example, Brotli-5. This type of compression is applicable to both cacheable and non-cacheable resources.&lt;/p&gt;
&lt;p&gt;Meanwhile, if a resource is cacheable, the CDN will use offline processing to compress the resource at a more powerful but far slower compression level - for example, Brotli-11. Once this compression completes, the more compressed version will be cached and used for subsequent requests.&lt;/p&gt;
&lt;h4 id=&quot;compression-best-practices&quot;&gt;Compression best practices &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#compression-best-practices&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Sites that want to maximize performance should apply Brotli compression at both their origin server and CDN. Brotli compression at the origin minimizes the transfer size of resources that can&#39;t be served from the cache. To prevent delays in serving requests, the origin should compress dynamic resources using a fairly conservative compression level - for example, Brotli-4; static resources can be compressed using Brotli-11. If an origin does not support Brotli, gzip-6 can be used to compress dynamic resources; gzip-9 can be used to compress static resources.&lt;/p&gt;
&lt;h3 id=&quot;tls-1.3&quot;&gt;TLS 1.3 &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#tls-1.3&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TLS 1.3 is the newest version of &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot; rel=&quot;noopener&quot;&gt;Transport Layer Security (TLS)&lt;/a&gt;, the cryptographic protocol used by &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTPS&quot; rel=&quot;noopener&quot;&gt;HTTPS&lt;/a&gt;. TLS 1.3 provides better privacy and performance compared to TLS 1.2.&lt;/p&gt;
&lt;p&gt;TLS 1.3 shortens the TLS handshake from two roundtrips to one. For connections using HTTP/1 or HTTP/2, shortening the TLS handshake to one roundtrip effectively reduces connection setup time by 33%.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Comparison of the TLS 1.2 and TLS 1.3 handshakes&quot; decoding=&quot;async&quot; height=&quot;448&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/FnCSj1W23jXaiOWCp0Bw.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;http2-and-http3&quot;&gt;HTTP/2 and HTTP/3 &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#http2-and-http3&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;HTTP/2 and HTTP/3 both provide performance benefits over HTTP/1. Of the two, HTTP/3 offers greater &lt;em&gt;potential&lt;/em&gt; performance benefits. HTTP/3 isn&#39;t fully standardized yet, but it will be widely &lt;a href=&quot;https://caniuse.com/#feat=http3&quot; rel=&quot;noopener&quot;&gt;supported&lt;/a&gt; once this occurs.&lt;/p&gt;
&lt;h4 id=&quot;http2&quot;&gt;HTTP/2 &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#http2&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If your CDN hasn&#39;t already enabled &lt;a href=&quot;https://almanac.httparchive.org/en/2019/http2&quot; rel=&quot;noopener&quot;&gt;HTTP/2&lt;/a&gt; by default, you should consider turning it on. HTTP/2 provides multiple &lt;a href=&quot;https://hpbn.co/http2&quot; rel=&quot;noopener&quot;&gt;performance benefits&lt;/a&gt; over HTTP/1 and is &lt;a href=&quot;https://caniuse.com/#feat=http2&quot; rel=&quot;noopener&quot;&gt;supported&lt;/a&gt; by all major browsers. Performance features of HTTP/2 include: &lt;a href=&quot;https://hpbn.co/http2/#request-and-response-multiplexing&quot; rel=&quot;noopener&quot;&gt;multiplexing&lt;/a&gt;, &lt;a href=&quot;https://hpbn.co/http2/#stream-prioritization&quot; rel=&quot;noopener&quot;&gt;stream prioritization&lt;/a&gt;, &lt;a href=&quot;https://almanac.httparchive.org/en/2019/http2#http2-push&quot; rel=&quot;noopener&quot;&gt;server push&lt;/a&gt;, and &lt;a href=&quot;https://tools.ietf.org/html/rfc7541/&quot; rel=&quot;noopener&quot;&gt;header compression&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multiplexing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Multiplexing is arguably the most important feature of HTTP/2. Multiplexing enables a single TCP connection to serve multiple request-response pairs at the same time. This eliminates the overhead of unnecessary connection setups; given that the number of connections that a browser can have open at a given time is limited, this also has the implication that the browser is now able to request more of a page&#39;s resources in parallel. Multiplexing theoretically removes the need for HTTP/1 optimizations like concatenation and sprite sheets - however, in practice, these techniques will remain relevant given that larger files compress better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stream prioritization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Multiplexing enables multiple concurrent streams; &lt;a href=&quot;https://httpwg.org/specs/rfc7540.html#StreamPriority&quot; rel=&quot;noopener&quot;&gt;stream prioritization&lt;/a&gt; provides an interface for communicating relative priority of each of these streams. This helps the server to send the most important resources first - even if they weren&#39;t requested first.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stream prioritization is expressed by the browser via a dependency tree and is merely a statement of &lt;em&gt;preference&lt;/em&gt;: in other words, the server is not obligated to meet (or even consider) the priorities supplied by the browser. Stream prioritization becomes more effective when more of a site is served through a CDN.&lt;/p&gt;
&lt;p&gt;CDN implementations of HTTP/2 resource prioritization vary wildly. To identify whether your CDN fully and properly supports HTTP/2 resource prioritization, check out &lt;a href=&quot;https://ishttp2fastyet.com/&quot; rel=&quot;noopener&quot;&gt;Is HTTP/2 Fast Yet?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Although switching your CDN instance to HTTP/2 is largely a matter of flipping a switch, it&#39;s important to thoroughly test this change before enabling it in production. HTTP/1 and HTTP/2 use the same conventions for request and response headers - but HTTP/2 is far less forgiving when these conventions aren&#39;t adhered to. As a result, non-spec practices like including non-ASCII or uppercase characters in headers may begin causing errors once HTTP/2 is enabled. If this occurs, a browser&#39;s attempts to download the resource will fail. The failed download attempt will be visible in the &amp;quot;Network&amp;quot; tab of DevTools. In addition, the error message &amp;quot;ERR_HTTP2_PROTOCOL_ERROR&amp;quot; will be displayed in the console.&lt;/p&gt;
&lt;h4 id=&quot;http3&quot;&gt;HTTP/3 &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#http3&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP/3&quot; rel=&quot;noopener&quot;&gt;HTTP/3&lt;/a&gt; is the successor to &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP/2&quot; rel=&quot;noopener&quot;&gt;HTTP/2&lt;/a&gt;. As of September 2020, all major browsers have experimental &lt;a href=&quot;https://caniuse.com/#feat=http3&quot; rel=&quot;noopener&quot;&gt;support&lt;/a&gt; for HTTP/3 and some CDNs support it. Performance is the primary benefit of HTTP/3 over HTTP/2. Specifically, HTTP/3 eliminates head-of-line blocking at the connection level and reduces connection setup time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Elimination of head-of-line blocking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 introduced multiplexing, a feature that allows a single connection to be used to transmit multiple streams of data simultaneously. However, with HTTP/2, a single dropped packet blocks all streams on a connection (a phenomena known as a head-of-line blocking). With HTTP/3, a dropped packet only blocks a single stream. This improvement is largely the result of HTTP/3 using &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot; rel=&quot;noopener&quot;&gt;UDP&lt;/a&gt; (HTTP/3 uses UDP via &lt;a href=&quot;https://en.wikipedia.org/wiki/QUIC&quot; rel=&quot;noopener&quot;&gt;QUIC&lt;/a&gt;) rather than &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot; rel=&quot;noopener&quot;&gt;TCP&lt;/a&gt;. This makes HTTP/3 particularly useful for data transfer over congested or lossy networks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Diagram showing the differences in data transmission between HTTP/1, HTTP/2, and HTTP/3&quot; decoding=&quot;async&quot; height=&quot;449&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/B7YKfqGG4eS2toSoTDdS.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reduced connection setup time&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP/3 uses TLS 1.3 and therefore shares its performance benefits: establishing a new connection only requires a single round-trip and resuming an existing connection does not require any roundtrips.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Comparison of connection resumption between TLS 1.2, TLS 1.3, TLS 1.3 0-RTT, and HTTP/3&quot; decoding=&quot;async&quot; height=&quot;400&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/7ffDEjblsisTNsfkynt6.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;HTTP/3 will have the biggest impact on users on poor network connections: not only because HTTP/3 handles packet loss better than its predecessors, but also because the absolute time savings resulting from a 0-RTT or 1-RTT connection setup will be greater on networks with high latency.&lt;/p&gt;
&lt;h3 id=&quot;image-optimization&quot;&gt;Image optimization &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#image-optimization&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CDN image optimization services typically focus on image optimizations that can be applied automatically in order to reduce image transfer size. For example: stripping &lt;a href=&quot;https://en.wikipedia.org/wiki/Exif&quot; rel=&quot;noopener&quot;&gt;EXIF&lt;/a&gt; data, applying lossless compression, and converting images to newer file formats (for example, WebP). Images make up ~50% of the transfer bytes on the median web page, so optimizing images can significantly reduce page size.&lt;/p&gt;
&lt;h3 id=&quot;minification&quot;&gt;Minification &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#minification&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/reduce-network-payloads-using-text-compression/#minification&quot;&gt;Minification&lt;/a&gt; removes unnecessary characters from JavaScript, CSS, and HTML. It&#39;s preferable to do minification at the origin server, rather than the CDN. Site owners have more context about the code to be minified and therefore can often use more aggressive minification techniques than those employed by CDNs. However, if minifying code at the origin is not an option, minification by the CDN is a good alternative.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/content-delivery-networks/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use a CDN:&lt;/strong&gt; CDNs deliver resources quickly, reduce load on the origin server, and are helpful for dealing with traffic spikes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache content as aggressively as possible:&lt;/strong&gt; Both static and dynamic content can and should be cached - albeit for varying durations. Periodically audit your site to make sure that you are optimally cacheing content.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enable CDN performance features:&lt;/strong&gt; Features like Brotli, TLS 1.3, HTTP/2, and HTTP/3 further improve performance.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Katie Hempenius</name>
    </author>
  </entry>
  
  <entry>
    <title>Adaptive loading with service workers</title>
    <link href="https://web.dev/adaptive-loading-with-service-workers/"/>
    <updated>2020-06-23T00:00:00Z</updated>
    <id>https://web.dev/adaptive-loading-with-service-workers/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;fhqCwDP69PI&quot; videoStartAt=&quot;161&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;Users access websites through a wide variety of devices and network connections. Even in major cities, where mobile networks are fast and reliable, one can end up experiencing slower load times, for example, when commuting in the subway, in a car, or just when moving around.
In regions like emerging markets, this phenomenon is even more common, not only due to unreliable networks, but also because devices tend to have less memory and CPU processing power.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/adaptive-loading-cds-2019/&quot;&gt;Adaptive loading&lt;/a&gt; is a web performance pattern that lets you adapt your site based on the user&#39;s network and device conditions.&lt;/p&gt;
&lt;p&gt;The adaptive loading pattern is made possible by &lt;a href=&quot;https://web.dev/service-workers-cache-storage/&quot;&gt;service workers&lt;/a&gt;, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt;, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency&quot; rel=&quot;noopener&quot;&gt;Hardware Concurrency API&lt;/a&gt;, and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory&quot; rel=&quot;noopener&quot;&gt;Device Memory API&lt;/a&gt;. In this guide we explore how you can use service workers and the Network Information API to achieve an adaptive loading strategy.&lt;/p&gt;
&lt;h2 id=&quot;production-case&quot;&gt;Production case &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/adaptive-loading-with-service-workers/#production-case&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.terra.com.br/&quot; rel=&quot;noopener&quot;&gt;Terra&lt;/a&gt; is one of the biggest media companies in Brazil. It has a large user base, coming from a wide variety of devices and networks.&lt;/p&gt;
&lt;p&gt;To provide a more reliable experience to all their users, Terra combines service workers and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt; to deliver lower quality images to users on 2G or 3G connections.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of Terra&amp;#x27;s home page connected to different image qualities according to the connection type.&quot; decoding=&quot;async&quot; height=&quot;381&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 734px) 734px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EQst12doZ2b8CLO0MtO5.png?auto=format&amp;w=1468 1468w&quot; width=&quot;734&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The company also found that the scripts and assets (like banners) loaded by ad networks were especially detrimental to users navigating in 3G or slower connections.&lt;/p&gt;
&lt;p&gt;As is the case with many publishers, Terra serves &lt;a href=&quot;https://amp.dev/&quot; rel=&quot;noopener&quot;&gt;AMP&lt;/a&gt; versions of their pages to users coming from search engines and other link sharing platforms. AMP pages are usually lightweight and help mitigate the impact of ads in performance by deprioritizing their load with respect to the main content of the page.&lt;/p&gt;
&lt;p&gt;Taking that into consideration, Terra decided to start serving AMP versions of their pages not only to users coming from search engines, but also to those navigating their site in 3G connections or slower.&lt;/p&gt;
&lt;p&gt;To achieve that, they use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt; in the service worker to detect if the request comes from 3G or slower. If that&#39;s the case, they change the URL of the page to request the AMP version of the page instead.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of Terra&amp;#x27;s article page connected to different image qualities according to the connection type.&quot; decoding=&quot;async&quot; height=&quot;379&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 741px) 741px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/4kfDfkeIzxVXLoaTylug.png?auto=format&amp;w=1482 1482w&quot; width=&quot;741&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Thanks to this technique, they send &lt;strong&gt;70% less bytes&lt;/strong&gt; to users on slower connections. The &lt;strong&gt;time spent&lt;/strong&gt; in AMP pages is higher for 3G users and ads in AMP pages have a better &lt;strong&gt;CTR (click-through-rate)&lt;/strong&gt; for that group.&lt;/p&gt;
&lt;h2 id=&quot;implement-adaptive-loading-with-workbox&quot;&gt;Implement adaptive loading with Workbox &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/adaptive-loading-with-service-workers/#implement-adaptive-loading-with-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section we&#39;ll explore how &lt;a href=&quot;https://web.dev/workbox/&quot;&gt;Workbox&lt;/a&gt; can be used to implement adaptive loading strategies.&lt;/p&gt;
&lt;p&gt;Workbox provides several &lt;a href=&quot;https://web.dev/runtime-caching-with-workbox/&quot;&gt;runtime caching strategies&lt;/a&gt; out of the box. They are used to indicate how the service worker generates a response after receiving a &lt;code&gt;fetch&lt;/code&gt; event.&lt;/p&gt;
&lt;p&gt;For example, in a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#cache_first_cache_falling_back_to_network&quot; rel=&quot;noopener&quot;&gt;Cache First&lt;/a&gt; strategy the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; will be fulfilled using the cached response (if available). If there isn&#39;t a cached response, the &lt;code&gt;Request&lt;/code&gt; will be fulfilled by a network request and the response will be cached.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;registerRoute&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-routing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;CacheFirst&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-strategies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/img/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CacheFirst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Caching strategies can be customized with &lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/using-plugins&quot; rel=&quot;noopener&quot;&gt;Workbox plugins&lt;/a&gt;. These allow you to add additional behaviors by manipulating requests and responses during the lifecycle of a request. Workbox has several built-in plugins for common cases and APIs, but you can also define a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/using-plugins#custom_plugins&quot; rel=&quot;noopener&quot;&gt;custom plugin&lt;/a&gt;, and introduce some custom logic of your choice.&lt;/p&gt;
&lt;p&gt;To achieve adapting loading, define a custom plugin, called, for example, &lt;code&gt;adaptiveLoadingPlugin&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; adaptiveLoadingPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;requestWillFetch&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; urlParts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; imageQuality&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      navigator &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;effectiveType&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3g&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        imageQuality &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;q_30&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; urlParts&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;urlParts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; imageQuality&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newRequest &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newUrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newRequest&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The previous code does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implements a &lt;code&gt;requestWillFetch()&lt;/code&gt; callback: This is called whenever a network request is about to be made, so you can alter the &lt;code&gt;Request&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Checks the connection type, by using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt;. Based on the status of the network, it creates a new URL part, indicating the quality of the image to fetch (e.g. &lt;code&gt;q_30&lt;/code&gt; for 3G users).&lt;/li&gt;
&lt;li&gt;Creates a new URL based on the dynamic &lt;code&gt;newPart&lt;/code&gt; value, and returns the new &lt;code&gt;Request&lt;/code&gt; to be made, based on that URL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, pass the plugin to a &lt;code&gt;cacheFirst&lt;/code&gt; strategy containing a regular expression to match image URLs (e.g. &lt;code&gt;/img/&lt;/code&gt;):&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;routing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/img/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cacheFirst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;images&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      adaptiveLoadingPlugin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expiration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        maxEntries&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        purgeOnQuotaError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;As a result, when requests for images are intercepted, the runtime caching strategy will try to fulfill the request from the cache. If it&#39;s not available, it will run the logic in the plugin, to decide which image quality to fetch from the network.&lt;/p&gt;
&lt;p&gt;Finally the response will be persisted in the cache, and sent back to the page.&lt;/p&gt;
&lt;h2 id=&quot;cloudinary-workbox-plugin&quot;&gt;Cloudinary Workbox Plugin &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/adaptive-loading-with-service-workers/#cloudinary-workbox-plugin&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cloudinary, a video and image hosting service, has a &lt;a href=&quot;https://www.npmjs.com/package/cloudinary-workbox-plugin&quot; rel=&quot;noopener&quot;&gt;Workbox Plugin&lt;/a&gt; that encapsulates the functionality explained in the previous section, making it even easier to implement.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Cloudinary and Workbox logos.&quot; decoding=&quot;async&quot; height=&quot;269&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 637px) 637px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iY2R0e4PvimaoVORo8Go.png?auto=format&amp;w=1274 1274w&quot; width=&quot;637&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The plugin is designed to work with the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin&quot; rel=&quot;noopener&quot;&gt;Workbox webpack plugin&lt;/a&gt;. To implement it, use the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-webpack-plugin.GenerateSW&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;GenerateSW()&lt;/code&gt;&lt;/a&gt; class:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workboxPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GenerateSW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  swDest&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sw.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  importScripts&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./cloudinaryPlugin.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  runtimeCaching&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      urlPattern&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;^https://res.cloudinary.com/.*/image/upload/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      handler&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CacheFirst&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cloudinary-images&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function-variable function&quot;&gt;requestWillFetch&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;              cloudinaryPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestWillFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The previous code does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses the &lt;code&gt;GenerateSW()&lt;/code&gt; class to configure webpack to generate a service worker in the destination indicated in &lt;code&gt;swDest&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Imports the cloudinary plugin script.&lt;/li&gt;
&lt;li&gt;Defines a Cache First runtime caching strategy for requests for images to the Cloudinary CDN.&lt;/li&gt;
&lt;li&gt;Passes the &lt;a href=&quot;https://www.npmjs.com/package/cloudinary-workbox-plugin&quot; rel=&quot;noopener&quot;&gt;Cloudinary Workbox Plugin&lt;/a&gt; to adjust the image quality according to the network conditions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;explore-more-adaptive-loading-strategies&quot;&gt;Explore more adaptive loading strategies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/adaptive-loading-with-service-workers/#explore-more-adaptive-loading-strategies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can go beyond this, by mapping device signals, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency&quot; rel=&quot;noopener&quot;&gt;hardware concurrency&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory&quot; rel=&quot;noopener&quot;&gt;device memory&lt;/a&gt; to device categories and then serving different assets depending on the device type (low-, mid- or high-end).&lt;/p&gt;
</content>
    <author>
      <name>Demian Renzulli</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>App shell UX with service workers and streams</title>
    <link href="https://web.dev/app-shell-ux-with-service-workers/"/>
    <updated>2020-06-23T00:00:00Z</updated>
    <id>https://web.dev/app-shell-ux-with-service-workers/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;fhqCwDP69PI&quot; videoStartAt=&quot;438&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot; rel=&quot;noopener&quot;&gt;Single-page app (SPA)&lt;/a&gt; is an architectural pattern in which the browser runs JavaScript code to update the existing page when the user visits a different section of the site, as opposed to loading an entire new page.&lt;/p&gt;
&lt;p&gt;This means that the web app doesn&#39;t perform an actual page reload. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot; rel=&quot;noopener&quot;&gt;History API&lt;/a&gt; is used instead to navigate back and forth through the user&#39;s history and manipulate the contents of the history stack.&lt;/p&gt;
&lt;p&gt;Using this type of architecture can provide an &lt;a href=&quot;https://developers.google.com/web/fundamentals/architecture/app-shell&quot; rel=&quot;noopener&quot;&gt;app shell UX&lt;/a&gt; that&#39;s fast, reliable, and usually consumes less data when navigating.&lt;/p&gt;
&lt;p&gt;In multi-page apps (MPAs) each time a user navigates to a new URL, the browser progressively renders HTML specific to that page. This means a full page refresh every time you visit a new page.&lt;/p&gt;
&lt;p&gt;While both are equally valid models to use, you might want to bring some of the benefits of the app shell UX of SPAs to your existing MPA site.
In this article we&#39;ll analyze how you can achieve an SPA-like architecture in multi-page apps by combining partials, service workers, and streams.&lt;/p&gt;
&lt;h2 id=&quot;production-case&quot;&gt;Production case &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#production-case&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/&quot; rel=&quot;noopener&quot;&gt;DEV&lt;/a&gt; is a community where software developers write articles, take part in discussions, and build their professional profiles.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of https://dev.to&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;482&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Vk2qqXg5PmLV7oCR7xVh.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Their architecture is a multi-page app based on traditional backend templating through Ruby on Rails. Their team was interested in some of the benefits of an app shell model, but didn&#39;t want to undertake a major architectural change or move away from their original tech stack.&lt;/p&gt;
&lt;p&gt;Here&#39;s how their solution works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, they create partials of their home page for the header and the footer (&lt;code&gt;shell_top.html&lt;/code&gt; and &lt;code&gt;shell_bottom.html&lt;/code&gt;) and deliver them as standalone HTML snippets with an endpoint. These assets are added to the cache at the service worker &lt;code&gt;install&lt;/code&gt; event (what&#39;s commonly referred to as &lt;a href=&quot;https://web.dev/precache-with-workbox/&quot;&gt;precaching&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;When a navigation request is intercepted by the service worker, they create a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream&quot; rel=&quot;noopener&quot;&gt;streamed response&lt;/a&gt; by combining the cached header and footer with the main page content that just came from the server. The body is the only actual part of the page that requires fetching data from the network.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Dev&amp;#x27;s architecture consisting on static headers and footers that are cached and a body requested from the network.&quot; decoding=&quot;async&quot; height=&quot;363&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QkGCrnzggZmrp1PXrbHb.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The key element of this solution is the usage of &lt;a href=&quot;https://developers.google.com/web/updates/2016/06/sw-readablestreams&quot; rel=&quot;noopener&quot;&gt;streams&lt;/a&gt;, which enables &lt;a href=&quot;https://streams.spec.whatwg.org/#intro&quot; rel=&quot;noopener&quot;&gt;incremental creations and updates&lt;/a&gt; of data sources. The Streams API also provides an interface for reading or writing asynchronous chunks of data, only a subset of which might be available in memory at any given time.
This way, the header of the page can be rendered as soon as it&#39;s picked from the cache, while the rest of the content is being fetched from the network. As a result, the navigation experience is so fast that users don&#39;t perceive an actual page refresh, only the new content (the body) being updated.&lt;/p&gt;
&lt;p&gt;The resulting UX is similar to the app shell UX pattern of SPAs, implemented on a MPA site.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The previous section contains a quick summary of DEV&#39;s solution. For a more detailed explanation check out their &lt;a href=&quot;https://dev.to/devteam/instant-webpages-and-terabytes-of-data-savings-through-the-magic-of-service-workers-1mkc&quot; rel=&quot;noopener&quot;&gt;blog post&lt;/a&gt; on this topic.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;implement-an-app-shell-ux-architecture-in-mpas-with-workbox&quot;&gt;Implement an app shell UX architecture in MPAs with Workbox &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#implement-an-app-shell-ux-architecture-in-mpas-with-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section we&#39;ll cover a summary of the different parts involved in implementing an app shell UX architecture in MPAs.
For a more detailed post on how to implement this on a real site, check out &lt;a href=&quot;https://developers.google.com/web/updates/2018/05/beyond-spa&quot; rel=&quot;noopener&quot;&gt;Beyond SPAs: alternative architectures for your PWA&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-server&quot;&gt;The server &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#the-server&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;partials&quot;&gt;Partials &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#partials&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first step is to adopt a site structure based on HTML partials. These are just modular pieces of your pages that can be reused across your site and also delivered as standalone HTML snippets.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;head partial&lt;/strong&gt; can contain all the logic needed to style and render the header of the page. The &lt;strong&gt;navbar partial&lt;/strong&gt; can contain the logic for the navigation bar, the &lt;strong&gt;footer partial&lt;/strong&gt; the code that needs to execute there, and so forth.&lt;/p&gt;
&lt;p&gt;The first time the user visits the site, your server generates a response by assembling the different parts of the page:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;routes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headPartial &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; navbarPartial&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tag &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEFAULT_TAG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;requestData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;templates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;footPartial&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;By using the &lt;code&gt;res&lt;/code&gt; (response) object&#39;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_response_write_chunk_encoding_callback&quot; rel=&quot;noopener&quot;&gt;write() method&lt;/a&gt;, and referencing locally stored partial templates, the response can be &lt;a href=&quot;https://github.com/substack/stream-handbook&quot; rel=&quot;noopener&quot;&gt;streamed&lt;/a&gt; immediately, without getting blocked by any external data source. The browser takes this initial HTML and renders a meaningful interface and loading message right away.&lt;/p&gt;
&lt;p&gt;The next portion of the page uses API data, which involves a network request. The web app can&#39;t render anything else until it gets a response back and processes it, but at least users aren&#39;t staring at a blank screen while they wait.&lt;/p&gt;
&lt;h3 id=&quot;the-service-worker&quot;&gt;The service worker &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#the-service-worker&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first time a user visits a site, the header of the page will be rendered faster, without having to wait for the body of the page. The browser still needs to go to the network to fetch the rest of the page.&lt;/p&gt;
&lt;p&gt;After the first page load, the service worker is registered, allowing you to fetch the partials for the different static parts of the page (header, navbar, footer, etc.) from the cache.&lt;/p&gt;
&lt;h4 id=&quot;precaching-static-assets&quot;&gt;Precaching static assets &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#precaching-static-assets&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first step is to cache the partial HTML templates, so they are immediately available.
With &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-precaching&quot; rel=&quot;noopener&quot;&gt;Workbox precaching&lt;/a&gt; you can store these files at the &lt;code&gt;install&lt;/code&gt; event of the service worker and keep them up to date when changes are deployed to the web app.&lt;/p&gt;
&lt;p&gt;Depending on the build process, Workbox has different solutions to generate a service worker and indicate the list of files to precache, including &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin&quot; rel=&quot;noopener&quot;&gt;webpack&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/codelabs/gulp&quot; rel=&quot;noopener&quot;&gt;gulp&lt;/a&gt; plugins, a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-build&quot; rel=&quot;noopener&quot;&gt;generic node module&lt;/a&gt; and a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-cli&quot; rel=&quot;noopener&quot;&gt;command line interface&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a partials configuration like the one described earlier, the resulting service worker file should contain something similar to the following:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;precaching&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;precacheAndRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;partials/about.html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    revision&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;518747aad9d7e&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;partials/foot.html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    revision&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;69bf746a9ecc6&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// etc.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;streaming&quot;&gt;Streaming &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/app-shell-ux-with-service-workers/#streaming&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Next, add the service worker logic so that the precached partial HTML can be sent back to the web app immediately. This is a crucial part of being reliably fast. Using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Streams_API&quot; rel=&quot;noopener&quot;&gt;Streams API&lt;/a&gt; within our service worker makes that possible.
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-streams&quot; rel=&quot;noopener&quot;&gt;Workbox Streams&lt;/a&gt; abstracts the details of how streaming works. The package lets you pass to the library a mix of streaming sources, both from caches and runtime data that might come from the network. Workbox takes care of coordinating the individual sources and stitching them together into a single, streaming response.&lt;/p&gt;
&lt;p&gt;First, set up the strategies in Workbox to handle the different sources that will make up the streaming response.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cacheStrategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cacheFirst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;core&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cacheNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;precache&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; apiStrategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;staleWhileRevalidate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_CACHE_NAME&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expiration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;maxEntries&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The first strategy reads data that&#39;s been precached, like the partial HTML templates.&lt;/li&gt;
&lt;li&gt;The second strategy implements the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#stale-while-revalidate&quot; rel=&quot;noopener&quot;&gt;stale-while-revalidate&lt;/a&gt; caching logic, along with &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-expiration#restrict_the_number_of_cache_entries&quot; rel=&quot;noopener&quot;&gt;least-recently-used cache expiration&lt;/a&gt; logic once we reach 50 entries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, tell Workbox how to use the strategies to construct a complete, streaming response, by passing in an array of sources as functions to execute immediately:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;streams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; cacheStrategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      request&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCacheKeyForURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/head.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; cacheStrategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      request&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCacheKeyForURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/navbar.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchParams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;tag&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEFAULT_TAG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; listResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; apiStrategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; listResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; templates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; cacheStrategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      request&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCacheKeyForURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/foot.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The first two sources are precached partial templates read directly from the service worker&#39;s cache, so they&#39;ll always be available immediately.&lt;/li&gt;
&lt;li&gt;The next source function fetches data from the network, and processes the response into the HTML that the web app expects.&lt;/li&gt;
&lt;li&gt;Finally, a cached copy of the footer and closing HTML tags is streamed to complete the response.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Workbox takes the result from each source and streams it to the web app, in sequence, only delaying if the next function in the array hasn&#39;t completed yet.
As a result, the user immediately sees the page being painted. The experience is so fast that when navigating the header stays in its position without making the user perceive the full page refresh. This is very similar to the UX that the app shell SPA model provides.&lt;/p&gt;
</content>
    <author>
      <name>Demian Renzulli</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Instant navigation experiences</title>
    <link href="https://web.dev/instant-navigation-experiences/"/>
    <updated>2020-06-23T00:00:00Z</updated>
    <id>https://web.dev/instant-navigation-experiences/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;fhqCwDP69PI&quot; videoStartAt=&quot;285&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;Performing a task on a site commonly involves several steps. For example, purchasing a product in an e-commerce website might involve searching for a product, picking an item from the list of results, adding the item to the cart, and completing the operation by checking out.&lt;/p&gt;
&lt;p&gt;In technical terms, moving through different pages means making a &lt;strong&gt;navigation request&lt;/strong&gt;. As a general rule, you &lt;strong&gt;don&#39;t&lt;/strong&gt; want to use long-lived &lt;code&gt;Cache-Control&lt;/code&gt; headers to cache the HTML response for a navigation request. They should normally be satisfied via the network, with &lt;code&gt;Cache-Control: no-cache&lt;/code&gt;, to ensure that the HTML, along with the chain of subsequent network requests, is (reasonably) fresh.
Having to go against the network each time the user navigates to a new page unfortunately means that each navigation might be slow—at the very least, it means that it won&#39;t be &lt;em&gt;reliably&lt;/em&gt; fast.&lt;/p&gt;
&lt;p&gt;To speed up these requests, if you can anticipate the user&#39;s action, you can request these pages and assets beforehand and keep them in the cache for a short period of time until the user clicks on these links. This technique is called &lt;a href=&quot;https://web.dev/link-prefetch/&quot;&gt;prefetching&lt;/a&gt; and it&#39;s commonly implemented by adding &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tags to pages, indicating the resource to prefetch.&lt;/p&gt;
&lt;p&gt;In this guide we&#39;ll explore different ways in which &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot; rel=&quot;noopener&quot;&gt;service workers&lt;/a&gt; can be used as a complement of traditional prefetching techniques.&lt;/p&gt;
&lt;h2 id=&quot;production-cases&quot;&gt;Production cases &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#production-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mercadolibre.com.ar/&quot; rel=&quot;noopener&quot;&gt;MercadoLibre&lt;/a&gt; is the biggest e-commerce site in Latin America. To speed up navigations, they dynamically inject &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tags in some parts of the flow. For example, in listing pages, they fetch the next result page as soon as the user scrolls to the bottom of the listing:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of MercadoLibre&amp;#x27;s listing pages one and two and a Link Prefetch tag connecting both.&quot; decoding=&quot;async&quot; height=&quot;397&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 682px) 682px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/80D6QavdktSNb6xnhXE0.png?auto=format&amp;w=1364 1364w&quot; width=&quot;682&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Prefetched files are requested at the &amp;quot;Lowest&amp;quot; priority and stored in the &lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;HTTP cache&lt;/a&gt; or the &lt;a href=&quot;https://calendar.perfplanet.com/2016/a-tale-of-four-caches/&quot; rel=&quot;noopener&quot;&gt;memory cache&lt;/a&gt; (depending on whether the resource is cacheable or not), for an amount of time that varies by browsers. For example, as of Chrome 85, this value is 5 minutes. Resources are kept around for five minutes, after which the normal &lt;code&gt;Cache-Control&lt;/code&gt; rules for the resource apply.&lt;/p&gt;
&lt;p&gt;Using service worker caching can help you extend the lifetime of prefetch resources beyond the five-minute window.&lt;/p&gt;
&lt;p&gt;For example, Italian sports portal &lt;a href=&quot;https://sport.virgilio.it/&quot; rel=&quot;noopener&quot;&gt;Virgilio Sport&lt;/a&gt; uses service workers to prefetch the most popular posts in their home page. They also use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API&quot; rel=&quot;noopener&quot;&gt;Network Information API&lt;/a&gt; to avoid prefetching for users that are on a 2G connection.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Virgilio Sport logo.&quot; decoding=&quot;async&quot; height=&quot;100&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 340px) 340px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bqiSoliDKZ9SR1NX2Ek3.png?auto=format&amp;w=680 680w&quot; width=&quot;340&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;As a result of this, over 3 weeks of observation Virgilio Sport witnessed load times for navigation to articles improve &lt;strong&gt;78%&lt;/strong&gt;, and the number of article impressions increase &lt;strong&gt;45%&lt;/strong&gt;.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of Virgilio Sport home and article pages, with impact metrics after prefetching.&quot; decoding=&quot;async&quot; height=&quot;442&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 536px) 536px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/wn7OR4CA21QJUYhs8OUu.png?auto=format&amp;w=1072 1072w&quot; width=&quot;536&quot; /&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;implement-precaching-with-workbox&quot;&gt;Implement precaching with Workbox &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#implement-precaching-with-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the following section we&#39;ll use &lt;a href=&quot;https://web.dev/workbox/&quot;&gt;Workbox&lt;/a&gt; to show how to implement different caching techniques in the service worker that can be used as a complement to &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt;, or even a replacement for it, by delegating this task completely to the service worker.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--caution&quot;&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;:  You must take steps to ensure that adding a service worker to your site doesn&#39;t end up actually slowing down your navigations. Starting up the service worker without using it to respond to a navigation request will introduce a small amount of latency (as explained in &lt;a href=&quot;https://www.youtube.com/watch?v=25aCD5XL1Jk&quot; rel=&quot;noopener&quot;&gt;Building Faster, More Resilient Apps with Service Workers&lt;/a&gt;). You can mitigate this overhead by enabling a feature called &lt;a href=&quot;https://developers.google.com/web/updates/2017/02/navigation-preload&quot; rel=&quot;noopener&quot;&gt;navigation preload&lt;/a&gt;, and then using the &lt;a href=&quot;https://developers.google.com/web/updates/2017/02/navigation-preload#using_the_preloaded_response&quot; rel=&quot;noopener&quot;&gt;network response&lt;/a&gt; that&#39;s been preloaded inside of your fetch event handler.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;1.-precache-static-pages-and-page-subresources&quot;&gt;1. Precache static pages and page subresources &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#1.-precache-static-pages-and-page-subresources&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/precache-with-workbox/&quot;&gt;Precaching&lt;/a&gt; is the ability of the service worker to save files to the cache while it&#39;s installing.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Precaching sounds similar to prefetching, but it&#39;s a different technique. In the first one, the service worker fetches and stores resources (typically static files) while it&#39;s installing and keeps them in the cache until a new version of the file is available. In the second, resources are requested ahead of time to have it in the cache for brief periods of time in order to speed up subsequent navigations.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the following cases precaching is used to achieve a similar goal as prefetching: making navigations faster.&lt;/p&gt;
&lt;h4 id=&quot;precaching-static-pages&quot;&gt;Precaching static pages &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#precaching-static-pages&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For pages that are generated at build time (e.g. &lt;code&gt;about.html&lt;/code&gt;, &lt;code&gt;contact.html&lt;/code&gt;), or in completely static sites, one can just add the site&#39;s documents to the precache list, so they are already available in the cache every time the user accesses them:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;precaching&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;precacheAndRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/about.html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; revision&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;abcd1234&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// ... other entries ...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;precaching-page-subresources&quot;&gt;Precaching page subresources &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#precaching-page-subresources&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Precaching static assets that the different sections of the site might use (e.g. JavaScript, CSS, etc.), is a general best practice and can give an extra boost in prefetching scenarios.&lt;/p&gt;
&lt;p&gt;To speed up navigations in an e-commerce site, you can use  &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tags in listing pages to prefetch product detail pages for the first few products of a listing page. If you have already precached the product page subresources, this can make the navigation even faster.&lt;/p&gt;
&lt;p&gt;To implement this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tag to the page:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;prefetch&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/phones/smartphone-5x.html&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Add the page subresources to the precache list in the service worker:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;precaching&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;precacheAndRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;/styles/product-page.ac29.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// ... other entries ...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;2.-extend-the-lifetime-of-prefetch-resources&quot;&gt;2. Extend the lifetime of prefetch resources &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#2.-extend-the-lifetime-of-prefetch-resources&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned earlier, &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; fetches and keeps resources in the HTTP cache for a limited amount of time, after which point the &lt;code&gt;Cache-Control&lt;/code&gt; rules for a resource apply. As of Chrome 85, this value is 5 minutes.&lt;/p&gt;
&lt;p&gt;Service workers allow you to extend the lifetime of the prefetch pages, while providing the added benefit of making those resources available for offline usage.&lt;/p&gt;
&lt;p&gt;In the previous example, one could complement the &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; used to prefetch a product page with a &lt;a href=&quot;https://web.dev/runtime-caching-with-workbox/&quot;&gt;Workbox runtime caching strategy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To implement that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tag to the page:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;prefetch&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/phones/smartphone-5x.html&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Implement a runtime caching strategy in the service worker for these types of requests:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StaleWhileRevalidate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  cacheName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;document-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expiration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      maxAgeSeconds&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 30 Days&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;In this case, we have opted to use a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#stale-while-revalidate&quot; rel=&quot;noopener&quot;&gt;stale-while-revalidate strategy&lt;/a&gt;. In this strategy, pages can be requested from both the cache and the network, in parallel. The response comes from the cache if available, otherwise from the network. The cache is always kept up to date with the network response with each successful request.&lt;/p&gt;
&lt;h3 id=&quot;3.-delegate-prefetching-to-the-service-worker&quot;&gt;3. Delegate prefetching to the service worker &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/instant-navigation-experiences/#3.-delegate-prefetching-to-the-service-worker&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In most cases the best approach is to use &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt;. The tag is a &lt;a href=&quot;https://www.w3.org/TR/resource-hints/&quot; rel=&quot;noopener&quot;&gt;resource hint&lt;/a&gt; designed to make prefetching as efficient as possible.&lt;/p&gt;
&lt;p&gt;In some cases, though, it might be better to delegate this task completely to the service worker.
For example: to prefetch the first few products in a client-side rendered product listing page, one might need to inject several &lt;code&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot;&amp;gt;&lt;/code&gt; tags dynamically in the page, based on an API response. This can momentarily consume time on the page&#39;s main thread and make the implementation more difficult.&lt;/p&gt;
&lt;p&gt;In cases like this, use a &amp;quot;page to service worker communication strategy&amp;quot;, to delegate the task of prefetching completely to the service worker. This type of communication can be achieved by using &lt;a href=&quot;https://html.spec.whatwg.org/multipage/workers.html#dom-worker-postmessage&quot; rel=&quot;noopener&quot;&gt;worker.postMessage()&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;An icon of a page making two way communication with a service worker.&quot; decoding=&quot;async&quot; height=&quot;205&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 626px) 626px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vokHySREOo6Y3PpxzxRC.png?auto=format&amp;w=1252 1252w&quot; width=&quot;626&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-window&quot; rel=&quot;noopener&quot;&gt;Workbox Window package&lt;/a&gt; simplifies this type of communication, abstracting many details of the underlying call being done.&lt;/p&gt;
&lt;p&gt;Prefetching with Workbox Window can be implemented in the following way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the page: call the service worker passing it the type of message, and the list of URLs to prefetch:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; wb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Workbox&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/sw.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;wb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prefetchResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; wb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;messageSW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;PREFETCH_URLS&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; urls&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;In the service worker: implement a message handler to issue a &lt;code&gt;fetch()&lt;/code&gt; request for each URL to prefetch:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;PREFETCH_URLS&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Fetch URLs and store them in the cache&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>
    <author>
      <name>Demian Renzulli</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author><author>
      <name>Gilberto Cocchi</name>
    </author>
  </entry>
  
  <entry>
    <title>Resilient search experiences</title>
    <link href="https://web.dev/resilient-search-experiences/"/>
    <updated>2020-06-23T00:00:00Z</updated>
    <id>https://web.dev/resilient-search-experiences/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;fhqCwDP69PI&quot; videoStartAt=&quot;35&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;Even in locations with fast networks a user might lose connection or connect to a flaky network, at some moments of the day.
For example: a user is on the subway searching on the phone for a product on an e-commerce website. They type the product name, click the &amp;quot;search&amp;quot; button, and while waiting for the results, the connection is lost, leading to the standard browser offline page.&lt;/p&gt;
&lt;p&gt;As a result, unless the user decides to come back to the site later, and repeat the same task, the site might lose a potential transaction and customer.&lt;/p&gt;
&lt;p&gt;To provide a more resilient search experience in these cases you can use the &lt;a href=&quot;https://developers.google.com/web/updates/2015/12/background-sync&quot; rel=&quot;noopener&quot;&gt;Background Sync API&lt;/a&gt;, which persists failed queries so they can be retried once the connection is recovered. This technique, in combination with &lt;a href=&quot;https://developers.google.com/web/fundamentals/push-notifications&quot; rel=&quot;noopener&quot;&gt;Web Push Notifications&lt;/a&gt; lets you inform the user of the search results, allowing you to keep them engaged with your service.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--codelab&quot;&gt;
&lt;p&gt;&lt;strong&gt;Try it&lt;/strong&gt;!
Try the &lt;a href=&quot;https://web.dev/codelab-building-resilient-search-experiences&quot;&gt;Building resilient search experiences with Workbox&lt;/a&gt;
for a hands-on demonstration of the ideas explained in this guide.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;production-case&quot;&gt;Production case &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resilient-search-experiences/#production-case&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For concrete application of this technique let&#39;s take a look at Google Search for Chrome in Android.
When visiting the Google Search web app and going offline, instead of showing the standard network error page, the site serves a custom offline response, but allows users to enter their search query immediately.
The page also prompts the user to opt-in for notifications, to receive a link to the search results page once the connection is recovered.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A screenshot of the background retry interface in Google Search.&quot; decoding=&quot;async&quot; height=&quot;475&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 257px) 257px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/TqDtqgbKOsxRFnr2lNSy.png?auto=format&amp;w=514 514w&quot; width=&quot;257&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;When the user performs a search, the service worker allows the query to be deferred and sent to Google&#39;s servers as soon as the device goes back online by using the &lt;a href=&quot;https://developers.google.com/web/updates/2015/12/background-sync&quot; rel=&quot;noopener&quot;&gt;Background Sync API&lt;/a&gt;, and to inform the user of the result by using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API&quot; rel=&quot;noopener&quot;&gt;Push API&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;A screenshot of the offline flow in Google Search.&quot; decoding=&quot;async&quot; height=&quot;436&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/ZZItVQMLUPmVbwJlfDck.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;Service workers allow Google Search to provide a &lt;a href=&quot;https://web.dev/google-search-sw/#meaningful-offline-experience&quot;&gt;meaningful offline experience&lt;/a&gt; and keep the user engaged, letting them complete their task.&lt;/p&gt;
&lt;h2 id=&quot;implement-resilient-search-experiences-with-workbox&quot;&gt;Implement resilient search experiences with Workbox &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resilient-search-experiences/#implement-resilient-search-experiences-with-workbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While Google Search implements this functionality without using Workbox, the &lt;a href=&quot;https://developers.google.com/web/tools/workbox&quot; rel=&quot;noopener&quot;&gt;Workbox library&lt;/a&gt; makes it easier by providing a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-background-sync&quot; rel=&quot;noopener&quot;&gt;Background Sync module&lt;/a&gt;, which takes care of many implementation details for us.&lt;/p&gt;
&lt;img alt=&quot;A service worker and a cache object communicating with each other.&quot; decoding=&quot;async&quot; height=&quot;383&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/X06meG8U60SABUabxwHb.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;To implement a resilient search experience in Workbox, first, import the following modules in your service worker:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;BackgroundSyncPlugin&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-background-sync&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;registerRoute&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-routing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NetworkOnly&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-strategies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Next, create an instance of the &lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/v4/workbox.backgroundSync.Plugin&quot; rel=&quot;noopener&quot;&gt;workbox.backgroundSync plugin&lt;/a&gt;, to automatically add failed requests to a queue, so they can be retried later:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bgSyncPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundSync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;offlineQueryQueue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  maxRetentionTime&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;onSync&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shiftRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;offline-search-responses&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; offlineUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;amp;notification=true&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offlineUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;showNotification&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offlineUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unshiftRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The plugin receives the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offlineQueryQueue&lt;/code&gt;: The name of the queue that will be used to persist the failed requests in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API&quot; rel=&quot;noopener&quot;&gt;IndexedDB&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxRetentionTime&lt;/code&gt;: The amount of time in minutes a request may be retried, after which point they will be discarded.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onSync&lt;/code&gt;: The callback that will be triggered when the connection is recovered. At that point, each failed request can be dequeued and processed, by calling &lt;code&gt;queue.shiftRequest()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, define a &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#network_only&quot; rel=&quot;noopener&quot;&gt;networkOnly&lt;/a&gt; runtime caching strategy for requests to the search URL (e.g. &lt;code&gt;/search_action&lt;/code&gt;) and pass it the &lt;code&gt;bgSyncPlugin&lt;/code&gt; defined previously:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;routing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  matchSearchUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;workbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NetworkOnly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bgSyncPlugin&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This tells Workbox to always go to the network when the service worker intercepts a request for the search endpoint, and to delegate to the Background Sync plugin the task of managing offline scenarios.&lt;/p&gt;
&lt;p&gt;As a result, when the user goes offline while searching, the query is automatically saved. When the connection is recovered the offline logic is triggered to process the request and inform the user of the result.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resilient-search-experiences/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this article you learned how to implement a search experience capable of responding gracefully to offline scenarios, by combining the &lt;a href=&quot;https://developers.google.com/web/updates/2015/12/background-sync&quot; rel=&quot;noopener&quot;&gt;Background Sync API&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API&quot; rel=&quot;noopener&quot;&gt;Push API&lt;/a&gt;.
We used Workbox to show how to implement this feature, as it simplifies the process, but the same can be achieved by writing vanilla service worker code.&lt;/p&gt;
&lt;p&gt;In the code samples we focused on the core part of the feature: how requests are intercepted and managed by the service worker. For a step-by-step guide on how to implement this functionality, including the offline page and the notification logic, check out the codelab at the end of this article.&lt;/p&gt;
</content>
    <author>
      <name>Demian Renzulli</name>
    </author><author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Streaming requests with the fetch API</title>
    <link href="https://web.dev/fetch-upload-streaming/"/>
    <updated>2020-07-22T00:00:00Z</updated>
    <id>https://web.dev/fetch-upload-streaming/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Chrome 85 has an experimental implementation of request streams, meaning you can
start making a request before you have the whole body available.&lt;/p&gt;
&lt;p&gt;You could use this to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Warm up the server. In other words, you could start the request once the user
focuses a text input field, and get all of the headers out of the way, then
wait until the user presses &#39;send&#39; before sending the data they entered.&lt;/li&gt;
&lt;li&gt;Gradually send data generated on the client, such as audio, video, or input data.&lt;/li&gt;
&lt;li&gt;Recreate web sockets over HTTP.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But since this is a low-level web platform feature, don&#39;t be limited by &lt;em&gt;my&lt;/em&gt; ideas.
Maybe you can think of a much more exciting use-case for request streaming.&lt;/p&gt;
&lt;h2 id=&quot;try-out-request-streams&quot;&gt;Try out request streams &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#try-out-request-streams&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;enable-flags&quot;&gt;Enabling via about://flags &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#enable-flags&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Try out request streams in Chrome 85 by flipping an experimental flag:
&lt;code&gt;enable-experimental-web-platform-features&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;enabling-support-during-the-origin-trial-phase&quot;&gt;Enabling support during the origin trial phase &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#enabling-support-during-the-origin-trial-phase&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fetch request streams are available in an origin trial as of Chrome 85. The
origin trial is expected to end in Chrome 87.&lt;/p&gt;
&lt;p&gt;Origin trials allow you to try new features and give feedback on their
usability, practicality, and effectiveness to the web standards community. For
more information, see the &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md&quot; rel=&quot;noopener&quot;&gt;Origin Trials Guide for Web Developers&lt;/a&gt;.
To sign up for this or another origin trial, visit the &lt;a href=&quot;https://developers.chrome.com/origintrials/#/trials/active&quot; rel=&quot;noopener&quot;&gt;registration page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;register-for-ot&quot;&gt;Register for the origin trial &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#register-for-ot&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.chrome.com/origintrials/#/view_trial/-7680889164480380927&quot; rel=&quot;noopener&quot;&gt;Request a token&lt;/a&gt; for your origin.&lt;/li&gt;
&lt;li&gt;Add the token to your pages. There are two ways to do that:
&lt;ul&gt;
&lt;li&gt;Add an &lt;code&gt;origin-trial&lt;/code&gt; &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag to the head of each page. For example,
this may look something like: &lt;br /&gt;
&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;origin-trial&amp;quot; content=&amp;quot;TOKEN_GOES_HERE&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you can configure your server, you can also add the token
using an &lt;code&gt;Origin-Trial&lt;/code&gt; HTTP header. The resulting response header should
look something like:&lt;br /&gt;
&lt;code&gt;Origin-Trial: TOKEN_GOES_HERE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#demo&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 480px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/fetch-request-stream?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=index.html&amp;previewSize=100&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;fetch-request-stream on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;This shows how you can stream data from the user to the server, and send data
back that can be processed in real time.&lt;/p&gt;
&lt;p&gt;Yeah ok it isn&#39;t the most imaginative example, I just wanted to keep it simple,
okay?&lt;/p&gt;
&lt;p&gt;Anyway, how does this work?&lt;/p&gt;
&lt;h2 id=&quot;previously-on-the-exciting-adventures-of-fetch-streams&quot;&gt;Previously on the exciting adventures of fetch streams &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#previously-on-the-exciting-adventures-of-fetch-streams&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Response&lt;/em&gt; streams have been available in all modern browsers for a while now.
They allow you to access parts of a response as they arrive from the server:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; done &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Received&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Response fully received&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Each &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;Uint8Array&lt;/code&gt; of bytes. The number of arrays you get and the
size of the arrays depends on the speed of the network. If you&#39;re on a fast
connection, you&#39;ll get fewer, larger &#39;chunks&#39; of data. If you&#39;re on a slow
connection, you&#39;ll get more, smaller chunks.&lt;/p&gt;
&lt;p&gt;If you want to convert the bytes into text, you can use
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/decode&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;TextDecoder&lt;/code&gt;&lt;/a&gt;,
or the newer transform stream if your &lt;a href=&quot;https://caniuse.com/#feat=mdn-api_textdecoderstream&quot; rel=&quot;noopener&quot;&gt;target browsers support
it&lt;/a&gt;:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipeThrough&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TextDecoderStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;TextDecoderStream&lt;/code&gt; is a transform stream that grabs all those &lt;code&gt;Uint8Array&lt;/code&gt;
chunks and converts them to strings.&lt;/p&gt;
&lt;p&gt;Streams are great, as you can start acting on the data as it arrives. For
instance, if you&#39;re receiving a list of 100 &#39;results&#39;, you can display the first
result as soon as you receive it, rather than waiting for all 100.&lt;/p&gt;
&lt;p&gt;Anyway, that&#39;s response streams, the exciting new thing I wanted to talk about
is request streams.&lt;/p&gt;
&lt;h2 id=&quot;streaming-request-bodies&quot;&gt;Streaming request bodies &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#streaming-request-bodies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Requests can have bodies:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; requestBody&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Previously, you needed the whole body ready to go before you could start the
request, but now in Chrome 85 you can provide your own &lt;code&gt;ReadableStream&lt;/code&gt; of data:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;milliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; milliseconds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReadableStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    controller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;This &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    controller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;is &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    controller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    controller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;slow &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    controller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    controller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipeThrough&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TextEncoderStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;text/plain&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The above will send &amp;quot;This is a slow request&amp;quot; to the server, one word at a time,
with a one second pause between each word.&lt;/p&gt;
&lt;p&gt;Each chunk of a request body needs to be a &lt;code&gt;Uint8Array&lt;/code&gt; of bytes, so I&#39;m using
&lt;code&gt;pipeThrough(new TextEncoderStream())&lt;/code&gt; to do the conversion for me.&lt;/p&gt;
&lt;h3 id=&quot;writable-streams&quot;&gt;Writable streams &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#writable-streams&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes it&#39;s easier to work with streams when you have a &lt;code&gt;WritableStream&lt;/code&gt;. You can do this using an &#39;identity&#39; stream, which is a readable/writable pair that takes anything that&#39;s passed to its writable end, and sends it to the readable end. You can create one of these by creating a &lt;code&gt;TransformStream&lt;/code&gt; without any arguments:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; readable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; writable &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransformStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; responsePromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; readable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Now, anything you send to the writable stream will be part of the request. This
lets you compose streams together. For instance, here&#39;s a silly example where
data is fetched from one URL, compressed, and sent to another URL:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Get from url1:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; readable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; writable &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransformStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Compress the data from url1:&lt;/span&gt;&lt;br /&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipeThrough&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CompressionStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gzip&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipeTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;writable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Post to url2:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; readable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The above example uses &lt;a href=&quot;https://chromestatus.com/feature/5855937971617792&quot; rel=&quot;noopener&quot;&gt;compression
streams&lt;/a&gt; to compress
arbitrary data using gzip.&lt;/p&gt;
&lt;h3 id=&quot;feature-detection&quot;&gt;Feature detection &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#feature-detection&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; supportsRequestStreamsP &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; supportsStreamsInRequestObjects &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReadableStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;supportsStreamsInRequestObjects&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data:a/a;charset=utf-8,&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReadableStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Note: supportsRequestStreamsP is a promise.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; supportsRequestStreamsP&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// …&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// …&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;If you&#39;re curious, here&#39;s how the feature detection works:&lt;/p&gt;
&lt;p&gt;If the browser doesn&#39;t support a particular &lt;code&gt;body&lt;/code&gt; type, it calls &lt;code&gt;toString()&lt;/code&gt; on the object and uses the result as the body. So, if the browser doesn&#39;t support request streams, the request body becomes the string &lt;code&gt;&amp;quot;[object ReadableStream]&amp;quot;&lt;/code&gt;. When a string is used as a body, it conveniently sets the &lt;code&gt;Content-Type&lt;/code&gt; header to &lt;code&gt;text/plain;charset=UTF-8&lt;/code&gt;. So, if that header is set, then we know the browser &lt;em&gt;doesn&#39;t&lt;/em&gt; support streams in request objects, and we can exit early.&lt;/p&gt;
&lt;p&gt;Unfortunately, Safari &lt;em&gt;does&lt;/em&gt; support streams in request objects, but &lt;em&gt;doesn&#39;t&lt;/em&gt; allow them to be used with &lt;code&gt;fetch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To test that, we try &lt;code&gt;fetch&lt;/code&gt; with a stream body. The test would be flakey and slow if it depended on the network, but thankfully a quirk in the spec allows for &lt;code&gt;POST&lt;/code&gt; requests to be made to &lt;code&gt;data:&lt;/code&gt; URLs. This is fast and works without a connection. Safari will reject this call because it doesn&#39;t support the stream body.&lt;/p&gt;
&lt;h2 id=&quot;restrictions&quot;&gt;Restrictions &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#restrictions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Streaming requests are a new power for the web, so they come with a few
restrictions:&lt;/p&gt;
&lt;h3 id=&quot;restricted-redirects&quot;&gt;Restricted redirects &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#restricted-redirects&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some forms of HTTP redirect require the browser to resend the body of the
request to another URL. To support this, the browser would have to buffer the
contents of the stream, which sort-of defeats the point, so it doesn&#39;t do that.&lt;/p&gt;
&lt;p&gt;Instead, if the request has a streaming body, and the response is an HTTP
redirect other than 303, the fetch will reject and the redirect will &lt;em&gt;not&lt;/em&gt; be
followed.&lt;/p&gt;
&lt;p&gt;303 redirects are allowed, since they explicitly change the method to &lt;code&gt;GET&lt;/code&gt; and
discard the request body.&lt;/p&gt;
&lt;h3 id=&quot;http2-only-by-default&quot;&gt;HTTP/2 only by default &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#http2-only-by-default&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By default, the fetch will be rejected if the connection isn&#39;t HTTP/2. If you
want to use streaming requests over HTTP/1.1, you need to opt in:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  allowHTTP1ForStreamingUpload&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--caution&quot;&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;:
&lt;code&gt;allowHTTP1ForStreamingUpload&lt;/code&gt; is non-standard and will only be used as part of
Chrome&#39;s experimental implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;According to HTTP/1.1 rules, request and response bodies either need to send a
&lt;code&gt;Content-Length&lt;/code&gt; header, so the other side knows how much data it&#39;ll receive, or
change the format of the message to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Chunked_transfer_encoding&quot; rel=&quot;noopener&quot;&gt;chunked
encoding&lt;/a&gt;. With chunked
encoding, the body is split into parts, each with their own content length.&lt;/p&gt;
&lt;p&gt;Chunked encoding is pretty common when it comes to HTTP/1.1 &lt;em&gt;responses&lt;/em&gt;, but
very rare when it comes to &lt;em&gt;requests&lt;/em&gt;. Because of this, Chrome is a little worried
about compatibility, so it&#39;s opt-in for now.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This isn&#39;t an issue for HTTP/2, as HTTP/2 data is always &#39;chunked&#39;, although it
calls the chunks
&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/http2#streams_messages_and_frames&quot; rel=&quot;noopener&quot;&gt;frames&lt;/a&gt;.
Chunked encoding wasn&#39;t introduced until HTTP/1.1, so requests with streaming
bodies will always fail on HTTP/1 connections.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Depending on how this trial goes, the spec will either restrict streaming
responses to HTTP/2, or always allow it for both HTTP/1.1 and HTTP/2.&lt;/p&gt;
&lt;h3 id=&quot;no-duplex-communication&quot;&gt;No duplex communication &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#no-duplex-communication&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A little-known feature of HTTP (although, whether this is standard behaviour
depends on who you ask) is that you can start receiving the response while
you&#39;re still sending the request. However, it&#39;s so little-known, that it isn&#39;t
well supported by servers, and, well, browsers.&lt;/p&gt;
&lt;p&gt;In Chrome&#39;s current implementation, you won&#39;t get the response until the body
has been fully sent. In the following example &lt;code&gt;responsePromise&lt;/code&gt; won&#39;t resolve
until the readable stream has been closed. Anything the server sends before that
point will be buffered.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; responsePromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; readableStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The next best thing to duplex communication is to make one fetch with a
streaming request, then make another fetch to receive the streaming response.
The server will need some way to associate these two requests, like an ID in the
URL. That&#39;s how the &lt;a href=&quot;https://web.dev/fetch-upload-streaming/#demo&quot;&gt;demo&lt;/a&gt; works.&lt;/p&gt;
&lt;h2 id=&quot;potential-issues&quot;&gt;Potential issues &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#potential-issues&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yeah, so… this is a new feature, and one that&#39;s underused on the internet today.
Here are some issues to look out for:&lt;/p&gt;
&lt;h3 id=&quot;incompatibility-on-the-server-side&quot;&gt;Incompatibility on the server side &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#incompatibility-on-the-server-side&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some app servers don&#39;t support streaming requests, and instead wait for the full
request to be received before letting you see any of it, which kinda defeats the
point. Instead, use an app server that supports streaming, like
&lt;a href=&quot;https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_class_http_incomingmessage&quot; rel=&quot;noopener&quot;&gt;NodeJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, you&#39;re not out of the woods yet! The application server, such as NodeJS,
usually sits behind another server, often called a &amp;quot;front-end server&amp;quot;, which may
in turn sit behind a CDN. If any of those decide to buffer the request before
giving it to the next server in the chain, you lose the benefit of request
streaming.&lt;/p&gt;
&lt;p&gt;Also, if you&#39;re using HTTP/1.1, one of the servers may not be prepared for
chunked encoding, and may fail with an error. But hey, at least you can test
that and try to change servers if needed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;…long sigh…&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;incompatibility-outside-of-your-control&quot;&gt;Incompatibility outside of your control &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#incompatibility-outside-of-your-control&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you&#39;re using HTTPS you don&#39;t need to worry about proxies between you and the
user, but the user may be running a proxy on their machine. Some internet
protection software does this to allow it to monitor everything that goes
between the browser and network.&lt;/p&gt;
&lt;p&gt;There may be cases where this software buffers request bodies, or in the case of
HTTP/1.1, doesn&#39;t expect chunked encoding, and breaks in some exciting way.&lt;/p&gt;
&lt;p&gt;Right now, it&#39;s not clear how often this will happen, if at all.&lt;/p&gt;
&lt;p&gt;If you want to protect against this, you can create a &#39;feature test&#39; similar to
the &lt;a href=&quot;https://web.dev/fetch-upload-streaming/#demo&quot;&gt;demo above&lt;/a&gt;, where you try to stream some data without closing the
stream. If the server receives the data, it can respond via a different fetch.
Once this happens, you know the client supports streaming requests end-to-end.&lt;/p&gt;
&lt;h2 id=&quot;feedback-welcome&quot;&gt;Feedback welcome &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fetch-upload-streaming/#feedback-welcome&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Feedback from the community is crucial to the design of new APIs, so please try
it out and tell us what you think! If you encounter any bugs, please &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list&quot; rel=&quot;noopener&quot;&gt;report
them&lt;/a&gt;, but if you have general
feedback, please send it to the &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!forum/blink-network-dev&quot; rel=&quot;noopener&quot;&gt;blink-network-dev Google
Group&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@lauralefurgeysmith?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; rel=&quot;noopener&quot;&gt;Laura
Lefurgey-Smith&lt;/a&gt;
on
&lt;a href=&quot;https://unsplash.com/s/photos/canoe-stream?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jake Archibald</name>
    </author>
  </entry>
  
  <entry>
    <title>Service worker caching and HTTP caching</title>
    <link href="https://web.dev/service-worker-caching-and-http-caching/"/>
    <updated>2020-07-17T00:00:00Z</updated>
    <id>https://web.dev/service-worker-caching-and-http-caching/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;While service workers and PWAs are becoming standards of modern web applications, resource caching
has become more complex than ever. This article covers the big picture of browser caching,
including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The use cases of and differences between service worker caching and HTTP caching.&lt;/li&gt;
&lt;li&gt;The pros and cons of different service worker caching expiry strategies compared to regular
HTTP caching strategies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;overview-of-caching-flow&quot;&gt;Overview of caching flow &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#overview-of-caching-flow&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At a high-level, a browser follows the caching order below when it requests a resource:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Service worker cache&lt;/strong&gt;: The service worker checks if the resource is in its cache and
decides whether to return the resource itself based on its programmed caching strategies. Note
that this does not happen automatically. You need to create a fetch event handler in your
service worker and intercept network requests so that the requests are served from the service
worker&#39;s cache rather than the network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP cache (also known as the browser cache)&lt;/strong&gt;: If the resource is found in the &lt;a href=&quot;https://web.dev/http-cache&quot;&gt;HTTP
Cache&lt;/a&gt; and has not yet expired, the browser automatically uses the
resource from the  HTTP cache.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server-side:&lt;/strong&gt; If nothing is found in the service worker cache or the HTTP cache, the
browser goes to the network to request the resource. If the resource isn&#39;t cached in a CDN, the
request must go all the way back to the origin server.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt=&quot;Caching flow&quot; decoding=&quot;async&quot; height=&quot;585&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/vtKWC9Bg9dAMzoFKTeAM.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Note that some browsers like Chrome have a &lt;strong&gt;memory cache&lt;/strong&gt; layer in front of the service
worker cache. The details of the memory cache depend on each browser&#39;s implementation.
Unfortunately, there is no clear specification for this part yet.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;caching-layers&quot;&gt;Caching layers &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#caching-layers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;service-worker-caching&quot;&gt;Service worker caching &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#service-worker-caching&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A service worker intercepts network-type HTTP requests and uses a
&lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook#serving-suggestions&quot; rel=&quot;noopener&quot;&gt;caching strategy&lt;/a&gt;
to determine what resources should be returned to the browser. The service worker cache and the HTTP
cache serve the same general purpose, but the service worker cache offers more caching capabilities,
such as fine-grained control over exactly what is cached and how caching is done.&lt;/p&gt;
&lt;h4 id=&quot;controlling-the-service-worker-cache&quot;&gt;Controlling the service worker cache &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#controlling-the-service-worker-cache&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A service worker intercepts HTTP requests with &lt;a href=&quot;https://github.com/mdn/sw-test/blob/gh-pages/sw.js#L19&quot; rel=&quot;noopener&quot;&gt;event
listeners&lt;/a&gt; (usually the &lt;code&gt;fetch&lt;/code&gt; event). This
&lt;a href=&quot;https://github.com/mdn/sw-test/blob/gh-pages/sw.js#L19&quot; rel=&quot;noopener&quot;&gt;code snippet&lt;/a&gt; demonstrates the logic of a
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-strategies#cache_first_cache_falling_back_to_network&quot; rel=&quot;noopener&quot;&gt;Cache-First&lt;/a&gt;
caching strategy.&lt;/p&gt;
&lt;img alt=&quot;A diagram showing how service workers intercept HTTP requests&quot; decoding=&quot;async&quot; height=&quot;516&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/INLfnhEpmL4KpMmFXnTL.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;It&#39;s highly recommended to use &lt;a href=&quot;https://developers.google.com/web/tools/workbox&quot; rel=&quot;noopener&quot;&gt;Workbox&lt;/a&gt; to avoid
reinventing the wheel. For example, you can
&lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-routing#how_to_register_a_regular_expression_route&quot; rel=&quot;noopener&quot;&gt;register resource URL paths with a single line of regex code&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;registerRoute&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;workbox-routing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;styles/.*\\.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; callbackHandler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;service-worker-caching-strategies-and-use-cases&quot;&gt;Service worker caching strategies and use cases &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#service-worker-caching-strategies-and-use-cases&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The next table outlines common service worker caching strategies and when each strategy is useful.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Strategies&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Freshness rationale&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Use cases&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook#network-only&quot;&gt;Network
only&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The content has to be up-to-date at all times.&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;&lt;li&gt;Payments and checkouts&lt;/li&gt;
&lt;li&gt;Balance statements&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook#network-falling-back-to-cache&quot;&gt;Network
falling back to cache &lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It&#39;s preferable to serve the fresh content. However if the network fails or is unstable, it&#39;s
acceptable to serve slightly old content.&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;&lt;li&gt;Timely data&lt;/li&gt;
&lt;li&gt;Prices and rates (requires disclaimers)&lt;/li&gt;
&lt;li&gt;Order statuses&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://web.dev/stale-while-revalidate/&quot;&gt;Stale-while-revalidate&lt;/a&gt;&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;It&#39;s okay to serve cached content right away, but updated cached content should be used in the
future.&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;&lt;li&gt;News feeds&lt;/li&gt;
&lt;li&gt;Product listing pages&lt;/li&gt;
&lt;li&gt;Messages&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook#cache-then-network&quot;&gt;Cache first, fall back to network&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The content is non-critical and can be served from the cache for performance gains, but the
service worker should occasionally check for updates.&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;&lt;li&gt;App shells&lt;/li&gt;
&lt;li&gt;Common resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook#cache-only&quot;&gt;Cache only&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The content rarely changes.&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;&lt;li&gt;Static content&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;additional-benefits-of-service-worker-caching&quot;&gt;Additional benefits of service worker caching &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#additional-benefits-of-service-worker-caching&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In addition to fine-grained control of caching logic, service worker caching also provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More memory and storage space for your origin:&lt;/strong&gt; The browser allocates HTTP cache
resources on a per-&lt;a href=&quot;https://web.dev/same-site-same-origin/#origin&quot;&gt;origin&lt;/a&gt; basis. In other
words, if you have multiple subdomains, they all share the same HTTP cache. There is no
guarantee that the content of your origin/domain stays in the HTTP cache for a long time. For
example, a user may purge the cache by manually cleaning up from a browser&#39;s settings UI, or
triggering a hard-reload on a page. With a service worker cache you have a much higher
likelihood that your cached content stays cached. See &lt;a href=&quot;https://developers.google.com/web/updates/2016/06/persistent-storage&quot; rel=&quot;noopener&quot;&gt;Persistent
storage&lt;/a&gt; to learn more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Higher flexibility with flaky networks or offline experiences:&lt;/strong&gt; With the HTTP cache you
only have a binary choice: either the resource is cached, or not. With service worker caching
you can mitigate little &amp;quot;hiccups&amp;quot; much easier (with the &amp;quot;stale-while-revalidate&amp;quot; strategy),
offer a complete offline experience (with the &amp;quot;Cache only&amp;quot; strategy) or even something in
between, like customized UIs with parts of the page coming from the service worker cache and
some parts excluded (with the &amp;quot;Set catch handler&amp;quot; strategy) where appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;http-caching&quot;&gt;HTTP caching &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#http-caching&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first time a browser loads a web page and related resources, it stores these resources in its
HTTP cache. The HTTP cache is usually enabled automatically by browsers, unless it has been
explicitly disabled by the end user.&lt;/p&gt;
&lt;p&gt;Using HTTP caching means relying on the server to determine when to cache a resource and for how
long.&lt;/p&gt;
&lt;h4 id=&quot;control-http-cache-expiry-with-http-response-headers&quot;&gt;Control HTTP cache expiry with HTTP response headers &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#control-http-cache-expiry-with-http-response-headers&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When a server responds to a browser request for a resource, the server uses HTTP response headers to
tell a browser how long it should cache the resource. See &lt;a href=&quot;https://web.dev/http-cache/#response-headers&quot;&gt;Response headers: configure your web
server&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;h4 id=&quot;http-caching-strategies-and-use-cases&quot;&gt;HTTP caching strategies and use cases &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#http-caching-strategies-and-use-cases&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;HTTP caching is much simpler than service worker caching, because HTTP caching only deals with
time-based (TTL) resource expiration logic. See
&lt;a href=&quot;https://web.dev/http-cache/#response-header-strategies&quot;&gt;Which response header values should you use?&lt;/a&gt;
and &lt;a href=&quot;https://web.dev/http-cache/#summary&quot;&gt;Summary&lt;/a&gt; to learn more about HTTP caching strategies.&lt;/p&gt;
&lt;h2 id=&quot;designing-your-cache-expiry-logic&quot;&gt;Designing your cache expiry logic &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#designing-your-cache-expiry-logic&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This section explains the pros and cons of using consistent expiry logic across the service worker
cache and HTTP cache layers, as well as the pros and cons of separate expiry logic across these
layers.&lt;/p&gt;
&lt;p&gt;The Glitch below demonstrates how service worker caching and HTTP caching work in action across
different scenarios:&lt;/p&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 480px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/compare-sw-and-http-caching?attributionHidden=true&amp;sidebarCollapsed=true&amp;previewSize=100&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;compare-sw-and-http-caching on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h3 id=&quot;consistent-expiry-logic-for-all-cache-layers&quot;&gt;Consistent expiry logic for all cache layers &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#consistent-expiry-logic-for-all-cache-layers&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To demonstrate the pros and cons, we&#39;ll look at 3 scenarios: long-term, medium-term, and
short-term.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Scenarios&lt;/th&gt;
&lt;th&gt;Long-term caching&lt;/th&gt;
&lt;th&gt;Medium-term caching&lt;/th&gt;
&lt;th&gt;Short-term caching&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Service worker caching strategy&lt;/td&gt;
&lt;td&gt;Cache, falling back to network&lt;/td&gt;
&lt;td&gt;Stale-while-revalidate&lt;/td&gt;
&lt;td&gt;Network falling back to cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service worker cache TTL&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;30 days&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1 day&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;10 mins&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP cache max-age&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;30 days&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1 day&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;10 mins&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;scenario:-long-term-caching-(cache-falling-back-to-network)&quot;&gt;Scenario: Long-term caching (Cache, falling back to network) &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#scenario:-long-term-caching-(cache-falling-back-to-network)&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When a cached resource is valid (&amp;lt;= 30 days): The service worker returns the cached
resource immediately without going to the network.&lt;/li&gt;
&lt;li&gt;When a cached resource is expired (&amp;gt; 30 days): The service worker goes to the network to
fetch the resource. The browser doesn&#39;t have a copy of the resource in its HTTP cache, so it
goes server-side for the resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Con: In this scenario, HTTP caching provides less value because the browser will always
pass the request to the server-side when the cache expires in the service worker.&lt;/p&gt;
&lt;h4 id=&quot;scenario:-medium-term-caching-(stale-while-revalidate)&quot;&gt;Scenario: Medium-term caching (Stale-while-revalidate) &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#scenario:-medium-term-caching-(stale-while-revalidate)&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When a cached resource is valid (&amp;lt;= 1 day): The service worker returns the cached
resource immediately, and goes to the network to fetch the resource. The browser has a copy of
the resource in its HTTP cache, so it returns that copy to the service worker.&lt;/li&gt;
&lt;li&gt;When a cached resource is expired (&amp;gt; 1 day): The service worker returns the cached
resource immediately, and goes to the network to fetch the resource. The browser doesn&#39;t have a
copy of the resource in its HTTP cache, so it goes server-side to fetch the resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Con: The service worker requires additional cache-busting to override the HTTP cache in
order to make the most of the &amp;quot;revalidate&amp;quot; step.&lt;/p&gt;
&lt;h4 id=&quot;scenario:-short-term-caching-(network-falling-back-to-cache)&quot;&gt;Scenario: Short-term caching (Network falling back to cache) &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#scenario:-short-term-caching-(network-falling-back-to-cache)&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When a cached resource is valid (&amp;lt;= 10 mins): The service worker goes to the network
to fetch the resource. The browser has a copy of the resource in its HTTP cache so it returns
that to the service worker without going server-side.&lt;/li&gt;
&lt;li&gt;When a cached resource is expired (&amp;gt; 10 mins): The service worker returns the cached
resource immediately, and goes to the network to fetch the resource. The browser doesn&#39;t have a
copy of the resource in its HTTP cache, so it goes server-side to fetch the resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Con: Similar to the medium-term caching scenario, the service worker requires additional
cache-busting logic to override the HTTP cache in order to fetch the latest resource from the
server-side.&lt;/p&gt;
&lt;h4 id=&quot;service-worker-in-all-scenarios&quot;&gt;Service worker in all scenarios &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#service-worker-in-all-scenarios&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In all scenarios, the service worker cache can still return cached resources when the network is
unstable. On the other hand, the HTTP cache is not reliable when the network is unstable or down.&lt;/p&gt;
&lt;h3 id=&quot;different-cache-expiry-logic-at-the-service-worker-cache-and-http-layers&quot;&gt;Different cache expiry logic at the service worker cache and HTTP layers &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#different-cache-expiry-logic-at-the-service-worker-cache-and-http-layers&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To demonstrate the pros and cons, we&#39;ll again look at long-term, medium-term, and short-term
scenarios.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Scenarios&lt;/th&gt;
&lt;th&gt;Long-term caching&lt;/th&gt;
&lt;th&gt;Medium-term caching&lt;/th&gt;
&lt;th&gt;Short-term caching&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Service worker caching strategy&lt;/td&gt;
&lt;td&gt;Cache, falling back to network&lt;/td&gt;
&lt;td&gt;Stale-while-revalidate&lt;/td&gt;
&lt;td&gt;Network falling back to cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service worker cache TTL&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;90 days&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;30 days&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1 day&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP cache max-age&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;30 days&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1 day&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;10 mins&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;scenario:-long-term-caching-(cache-falling-back-to-network)-2&quot;&gt;Scenario: Long-term caching (Cache, falling back to network) &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#scenario:-long-term-caching-(cache-falling-back-to-network)-2&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When a cached resource is valid in the service worker cache (&amp;lt;= 90 days): The service
worker returns the cached resource immediately.&lt;/li&gt;
&lt;li&gt;When a cached resource is expired in the service worker cache (&amp;gt; 90 days): The service
worker goes to the network to fetch the resource. The browser doesn&#39;t have a copy of the
resource in its HTTP cache, so it goes server-side.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pros and cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pro: Users experience instant response as the service worker returns cached resources
immediately.&lt;/li&gt;
&lt;li&gt;Pro: The service worker has more fine-grained control of when to use its cache and when
to request new versions of resources.&lt;/li&gt;
&lt;li&gt;Con: A well-defined service worker caching strategy is required.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;scenario:-mid-term-caching-(stale-while-revalidate)&quot;&gt;Scenario: Mid-term caching (Stale-while-revalidate) &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#scenario:-mid-term-caching-(stale-while-revalidate)&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When a cached resource is valid in the service worker cache (&amp;lt;= 30 days): The service
worker returns the cached resource immediately.&lt;/li&gt;
&lt;li&gt;When a cached resource is expired in the service worker cache (&amp;gt; 30 days): The service
worker goes to the network for the resource. The browser doesn&#39;t have a copy of the resource in
its HTTP cache, so it goes server-side.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pros and cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pro: Users experience instant response as the service worker returns cached resources
immediately.&lt;/li&gt;
&lt;li&gt;Pro: The service worker can ensure that the &lt;strong&gt;next&lt;/strong&gt; request for a given URL uses a
fresh response from the network, thanks to the revalidation that happens &amp;quot;in the background.&amp;quot;&lt;/li&gt;
&lt;li&gt;Con: A well-defined service worker caching strategy is required.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;scenario:-short-term-caching-(network-falling-back-to-cache)-2&quot;&gt;Scenario: Short-term caching (Network falling back to cache) &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#scenario:-short-term-caching-(network-falling-back-to-cache)-2&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When a cached resource is valid in the service worker cache (&amp;lt;= 1 day): The service
worker goes to the network for the resource. The browser returns the resource from the HTTP
cache if it&#39;s there. If the network is down, the service worker returns the resource from the
service worker cache&lt;/li&gt;
&lt;li&gt;When a cached resource is expired in the service worker cache (&amp;gt; 1 day): The service
worker goes to the network to fetch the resource. The browser fetches the resources over the
network as the cached version in its HTTP cache is expired.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pros and cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pro: When the network is unstable or down, the service worker returns cached
resources immediately.&lt;/li&gt;
&lt;li&gt;Con: The service worker requires additional cache-busting to override the HTTP Cache and
make &amp;quot;Network first&amp;quot; requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given the complexity of the combination of caching scenarios, it&#39;s not possible to design one rule
that covers all cases. However, based on the findings in the previous sections, there are a few
suggestions to look at when designing your cache strategies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service worker caching logic doesn&#39;t need to be consistent with HTTP caching expiry
logic. If possible, use longer expiry logic in the service worker to grant the service worker
more control.&lt;/li&gt;
&lt;li&gt;HTTP caching still plays an important role, but it&#39;s not reliable when the network is
unstable or down.&lt;/li&gt;
&lt;li&gt;Revisit your caching strategies for each resource to make sure your service worker caching
strategy provides its value, without conflicting with the HTTP cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;learn-more&quot;&gt;Learn more &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/service-worker-caching-and-http-caching/#learn-more&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/reliable/&quot;&gt;Network reliability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/http-cache&quot;&gt;Prevent unnecessary network requests with the HTTP Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/codelab-http-cache/&quot;&gt;HTTP cache codelab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/showcase/2016/service-worker-perf&quot; rel=&quot;noopener&quot;&gt;Measuring the real-world performance impact of service workers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5799906/what-s-the-difference-between-expires-and-cache-control-headers&quot; rel=&quot;noopener&quot;&gt;Cache-Control vs. Expires&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Jonathan Chen</name>
    </author>
  </entry>
  
  <entry>
    <title>Handling navigation requests</title>
    <link href="https://web.dev/handling-navigation-requests/"/>
    <updated>2020-07-13T00:00:00Z</updated>
    <id>https://web.dev/handling-navigation-requests/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Navigation requests are requests for HTML documents made by your browser whenever you enter a new
URL in the navigation bar, or follow a link on a page taking you to a new URL. This is where service
workers make their biggest impact on performance: if you use a service worker to respond to
navigation requests without waiting for the network, you can ensure that navigations are reliably
fast, in addition to being resilient when the network is unavailable. This is the single biggest
performance win that comes from a service worker, versus what&#39;s possible with &lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;HTTP
caching&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As detailed in the &lt;a href=&quot;https://web.dev/identify-resources-via-network-panel/&quot;&gt;Identify resources loaded from the
network&lt;/a&gt; guide, a navigation request is the first of
potentially many requests made in the
&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network/reference#waterfall&quot; rel=&quot;noopener&quot;&gt;&amp;quot;waterfall&amp;quot;&lt;/a&gt;
of network traffic. The HTML that you load via a navigation request kicks off the flow of all other
requests for subresources like images, scripts, and styles.&lt;/p&gt;
&lt;p&gt;Inside of a service worker&#39;s &lt;code&gt;fetch&lt;/code&gt; event handler, you can determine whether a request is a
navigation by checking the &lt;code&gt;request.mode&lt;/code&gt; property on the &lt;code&gt;FetchEvent&lt;/code&gt;. If it&#39;s set to &lt;code&gt;&#39;navigate&#39;&lt;/code&gt;,
then it&#39;s a navigation request.&lt;/p&gt;
&lt;p&gt;As a general rule, do not use long-lived &lt;code&gt;&lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;Cache-Control headers&lt;/a&gt;&lt;/code&gt; to cache
the HTML response for a navigation request. They should normally be satisfied via the network, with
&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;, to ensure that the HTML, along with the chain of subsequent
network requests, is (reasonably) fresh. Going against the network each time the user navigates to a
new page unfortunately means that each navigation &lt;em&gt;might&lt;/em&gt; be slow. At the very least, it
means that it won&#39;t be &lt;em&gt;reliably&lt;/em&gt; fast.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;&lt;code&gt;Cache-Control: no-cache&lt;/code&gt; means the browser must check (or &amp;quot;revalidate&amp;quot;) with the server before
using a previously cached resource. This requires a round-trip network communication to complete
before the resource can be used.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;different-approaches-for-architectures&quot;&gt;Different approaches for architectures &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/handling-navigation-requests/#different-approaches-for-architectures&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Figuring out &lt;em&gt;how&lt;/em&gt; to respond to navigation requests while avoiding the network can be tricky. The
right approach depends very much on your web site&#39;s architecture and the number of unique URLs that
users might navigate to.&lt;/p&gt;
&lt;p&gt;While there&#39;s no one-size-fits all solution, the following general guidelines should help you decide
which approach is the most viable.&lt;/p&gt;
&lt;h3 id=&quot;small-static-sites&quot;&gt;Small static sites &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/handling-navigation-requests/#small-static-sites&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your web app consists of a relatively small number (think: a couple of dozen) unique URLs, and
each of those URLs corresponds to a different static HTML file, then one viable approach is to just
cache all of those HTML files, and respond to navigation requests with the appropriate cached HTML.&lt;/p&gt;
&lt;p&gt;Using &lt;a href=&quot;https://web.dev/precache-with-workbox/&quot;&gt;precaching&lt;/a&gt;, you can cache the HTML in advance, as soon as the
service worker is installed, and update the cached HTML each time you rebuild your site and redeploy
your service worker.&lt;/p&gt;
&lt;p&gt;Alternatively, if you would rather avoid precaching all of your HTML—perhaps because users tend to
navigate to only a subset of URLs on your site—you can use a
&lt;a href=&quot;https://web.dev/runtime-caching-with-workbox/#stale-while-revalidate&quot;&gt;stale-while-revalidate&lt;/a&gt; runtime caching
strategy. Be careful about this approach, though, as each individual HTML document is cached and
updated separately. Using runtime caching for HTML is most appropriate if you have a small number of
URLs that are revisited &lt;strong&gt;frequently&lt;/strong&gt; by the same set of users, and if you feel comfortable about
those URLs being revalidated independently of each other.&lt;/p&gt;
&lt;h3 id=&quot;single-page-apps&quot;&gt;Single-page apps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/handling-navigation-requests/#single-page-apps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A single-page architecture is frequently used by modern web applications. In it, client-side
JavaScript modifies the HTML in response to user actions. This model uses the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot; rel=&quot;noopener&quot;&gt;History
API&lt;/a&gt; to modify the current URL as the
user interacts with the web app, leading to what&#39;s effectively a &amp;quot;simulated&amp;quot; navigation. While
subsequent navigations might be &amp;quot;fake&amp;quot;, the initial navigation is real, and it&#39;s still important to
make sure that it isn&#39;t blocked on the network.&lt;/p&gt;
&lt;p&gt;Fortunately, if you&#39;re using the single-page architecture, there&#39;s a straightforward pattern to
follow for serving the initial navigation from the cache: the &lt;a href=&quot;https://developers.google.com/web/fundamentals/architecture/app-shell&quot; rel=&quot;noopener&quot;&gt;application
shell&lt;/a&gt;. In this model, your
service worker responds to navigation requests by returning the same, single HTML file that has
already been precached—regardless of the URL being requested. This HTML should be bare-bones,
consisting of, perhaps, a generic loading indicator or &lt;a href=&quot;https://css-tricks.com/building-skeleton-screens-css-custom-properties/&quot; rel=&quot;noopener&quot;&gt;skeleton
content&lt;/a&gt;. Once the browser
has loaded this HTML from the cache, your existing client-side JavaScript takes over, and renders
the correct HTML content for the URL from the original navigation request.&lt;/p&gt;
&lt;p&gt;Workbox provides the tools that you need to implement this approach; the &lt;code&gt;&lt;a href=&quot;https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.generateSW&quot; rel=&quot;noopener&quot;&gt;navigateFallback
option&lt;/a&gt;&lt;/code&gt;
allows you to specify which HTML document to use as your app shell, along with an optional allow and
deny list to limit this behavior to a subset of your URLs.&lt;/p&gt;
&lt;h3 id=&quot;multi-page-apps&quot;&gt;Multi-page apps &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/handling-navigation-requests/#multi-page-apps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your web server generates your site&#39;s HTML dynamically, or if you have more than a few dozen
unique pages,  then it&#39;s much harder to avoid the network when handling navigation requests. The
advice in &lt;a href=&quot;https://web.dev/handling-navigation-requests/#everything-else&quot;&gt;Everything else&lt;/a&gt; will likely apply to you.&lt;/p&gt;
&lt;p&gt;But for a certain subset of multi-page apps, you might be able to implement a service worker that
fully replicates the logic used in your web server to generate HTML. This works best if you can
share routing and templating information between the server and service worker environments, and in
particular, if your web server uses JavaScript (without relying on
&lt;a href=&quot;https://nodejs.org/&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt;-specific features, like file system access).&lt;/p&gt;
&lt;p&gt;If your web server falls into that category and you would like to explore one approach to moving
HTML generation off the network and into your service worker, the guidance in &lt;a href=&quot;https://developers.google.com/web/updates/2018/05/beyond-spa&quot; rel=&quot;noopener&quot;&gt;Beyond SPAs:
alternative architectures for your
PWA&lt;/a&gt; can get you started.&lt;/p&gt;
&lt;h3 id=&quot;everything-else&quot;&gt;Everything else &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/handling-navigation-requests/#everything-else&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you can&#39;t respond to navigation requests with cached HTML, you must take steps to ensure that
adding a service worker to your site (to handle other, non-HTML requests) doesn&#39;t end up slowing
down your navigations. Starting up the service worker without using it to respond to a navigation
request will introduce a small amount of latency (as explained in &lt;a href=&quot;https://youtu.be/25aCD5XL1Jk&quot; rel=&quot;noopener&quot;&gt;Building Faster, More Resilient
Apps with Service Worker&lt;/a&gt;). You can mitigate this overhead by enabling
a feature called &lt;a href=&quot;https://developers.google.com/web/updates/2017/02/navigation-preload&quot; rel=&quot;noopener&quot;&gt;navigation
preload&lt;/a&gt;, and then &lt;a href=&quot;https://developers.google.com/web/updates/2017/02/navigation-preload#using_the_preloaded_response&quot; rel=&quot;noopener&quot;&gt;using the
network
response&lt;/a&gt;
that&#39;s been preloaded inside of your &lt;code&gt;fetch&lt;/code&gt; event handler.&lt;/p&gt;
&lt;p&gt;Workbox &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-navigation-preload&quot; rel=&quot;noopener&quot;&gt;provides a helper
library&lt;/a&gt; that
feature-detects whether navigation preload is supported, and if so, simplifies the process of
telling your service worker to use the network response.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@aaronburden?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Aaron Burden&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/navigate?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;,&lt;/em&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Measure performance with the RAIL model</title>
    <link href="https://web.dev/rail/"/>
    <updated>2020-06-10T00:00:00Z</updated>
    <id>https://web.dev/rail/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;&lt;strong&gt;RAIL&lt;/strong&gt; is a &lt;strong&gt;user-centric&lt;/strong&gt; performance model that provides a structure for
thinking about performance. The model breaks down the user&#39;s experience into key
actions (for example, tap, scroll, load) and helps you define performance goals
for each of them.&lt;/p&gt;
&lt;p&gt;RAIL stands for four distinct aspects of web app life cycle: response,
animation, idle, and load. Users have different performance expectations for
each of these contexts, so performance goals are defined based on the context
and &lt;a href=&quot;https://www.nngroup.com/articles/response-times-3-important-limits/&quot; rel=&quot;noopener&quot;&gt;UX research on how users perceive
delays&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The 4 parts of the RAIL performance model: response, animation, idle, and load.&quot; decoding=&quot;async&quot; height=&quot;290&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;The 4 parts of the RAIL performance model
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;focus-on-the-user&quot;&gt;Focus on the user &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#focus-on-the-user&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Make users the focal point of your performance effort. The table below describes
key metrics of how users perceive performance delays:&lt;/p&gt;
&lt;table class=&quot;w-table-wrapper&quot;&gt;
  &lt;thead&gt;
  User perception of performance delays
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;0&amp;nbsp;to&amp;nbsp;16&amp;nbsp;ms&lt;/td&gt;
    &lt;td&gt;Users are exceptionally good at tracking motion, and they dislike it when animations aren&#39;t smooth. They perceive animations as smooth so long as 60 new frames are rendered every second. That&#39;s 16&amp;nbsp;ms per frame, including the time it takes for the browser to paint the new frame to the screen, leaving an app about 10&amp;nbsp;ms to produce a frame.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;0&amp;nbsp;to&amp;nbsp;100&amp;nbsp;ms&lt;/td&gt;
    &lt;td&gt;Respond to user actions within this time window and users feel like the result is immediate. Any longer, and the connection between action and reaction is broken.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;100&amp;nbsp;to&amp;nbsp;1000&amp;nbsp;ms&lt;/td&gt;
    &lt;td&gt;Within this window, things feel part of a natural and continuous progression of tasks. For most users on the web, loading pages or changing views represents a task.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1000&amp;nbsp;ms&amp;nbsp;or&amp;nbsp;more&lt;/td&gt;
    &lt;td&gt;Beyond 1000 milliseconds (1 second), users lose focus on the task they are performing.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;10000&amp;nbsp;ms or more&lt;/td&gt;
    &lt;td&gt;Beyond 10000 milliseconds (10 seconds), users are frustrated and are likely to abandon tasks. They may or may not come back later.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Users perceive performance delays differently, depending on network
conditions and hardware. For example, loading sites on a powerful desktop
machine over a fast Wi-Fi connection commonly happens in under 1 s and
users have grown accustomed to that. Loading sites on mobile devices with slow
3G connections takes more time, so mobile users are generally more patient and
loading in 5 s on mobile is a more realistic goal. &lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;goals-and-guidelines&quot;&gt;Goals and guidelines &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#goals-and-guidelines&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the context of RAIL, the terms &lt;strong&gt;goals&lt;/strong&gt; and &lt;strong&gt;guidelines&lt;/strong&gt; have specific
meanings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;. Key performance metrics related to user experience. For example,
tap to paint in under 100 milliseconds. Since human perception is relatively
constant, these goals are unlikely to change any time soon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;. Recommendations that help you achieve goals. These may be
specific to current hardware and network connection conditions, and therefore
may change over time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;response:-process-events-in-under-50ms&quot;&gt;Response: process events in under 50ms &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#response:-process-events-in-under-50ms&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: Complete a transition initiated by user input within 100 ms, so
users feel like the interactions are instantaneous.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To ensure a visible response within 100 ms, process user input events
within 50 ms. This applies to most inputs, such as clicking buttons,
toggling form controls, or starting animations. This does not apply to touch
drags or scrolls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Though it may sound counterintuitive, it&#39;s not always the right call to
respond to user input immediately. You can use this 100 ms window to do
other expensive work, but be careful not to block the user. If possible, do
work in the background.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For actions that take longer than 50 ms to complete, always provide
feedback.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;50-ms-or-100-ms&quot;&gt;50 ms or 100 ms? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#50-ms-or-100-ms&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The goal is to respond to input in under 100 ms, so why is our budget only
50 ms? This is because there is generally other work being done in addition
to input handling, and that work takes up part of the time available for
acceptable input response. If an application is performing work in the
recommended 50 ms chunks during idle time, that means input can be queued
for up to 50 ms if it occurs during one of those chunks of work. Accounting
for this, it&#39;s safe to assume only the remaining 50 ms is available for
actual input handling. This effect is visualized in the diagram below which
shows how input received during an idle task is queued, reducing the available
processing time:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Diagram showing how input received during an idle task is queued, reducing available input processing time to 50ms&quot; decoding=&quot;async&quot; height=&quot;400&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;How idle tasks affect input response budget.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;animation:-produce-a-frame-in-10-ms&quot;&gt;Animation: produce a frame in 10 ms &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#animation:-produce-a-frame-in-10-ms&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Produce each frame in an animation in 10 ms or less. Technically, the
maximum budget for each frame is 16 ms (1000 ms / 60 frames per
second ≈ 16 ms), but browsers need about 6 ms to render each frame,
hence the guideline of 10 ms per frame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aim for visual smoothness. Users notice when frame rates vary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In high pressure points like animations, the key is to do nothing where you
can, and the absolute minimum where you can&#39;t. Whenever possible, make use of
the 100 ms response to pre-calculate expensive work so that you maximize
your chances of hitting 60 fps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/rendering&quot; rel=&quot;noopener&quot;&gt;Rendering
Performance&lt;/a&gt;
for various animation optimization strategies.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Recognize all the types of animations. Animations aren&#39;t just fancy
UI effects. Each of these interactions are considered animations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual animations, such as entrances and exits,
&lt;a href=&quot;https://www.webopedia.com/TERM/T/tweening.html&quot; rel=&quot;noopener&quot;&gt;tweens&lt;/a&gt;, and loading
indicators.&lt;/li&gt;
&lt;li&gt;Scrolling. This includes flinging, which is when the user starts scrolling,
then lets go, and the page continues scrolling.&lt;/li&gt;
&lt;li&gt;Dragging. Animations often follow user interactions, such as panning a map or
pinching to zoom. &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

&lt;h2 id=&quot;idle:-maximize-idle-time&quot;&gt;Idle: maximize idle time &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#idle:-maximize-idle-time&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: Maximize idle time to increase the odds that the page responds to user
input within 50 ms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use idle time to complete deferred work. For example, for the initial page
load, load as little data as possible, then use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback&quot; rel=&quot;noopener&quot;&gt;idle
time&lt;/a&gt;
to load the rest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perform work during idle time in 50 ms or less. Any longer, and you risk
interfering with the app&#39;s ability to respond to user input within 50 ms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a user interacts with a page during idle time work, the user interaction
should always take the highest priority and interrupt the idle time work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;load:-deliver-content-and-become-interactive-in-under-5-seconds&quot;&gt;Load: deliver content and become interactive in under 5 seconds &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#load:-deliver-content-and-become-interactive-in-under-5-seconds&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When pages load slowly, user attention wanders, and users perceive the task as
broken. Sites that load quickly have &lt;a href=&quot;https://www.thinkwithgoogle.com/intl/en-154/insights-inspiration/research-data/need-mobile-speed-how-mobile-latency-impacts-publisher-revenue/&quot; rel=&quot;noopener&quot;&gt;longer average sessions, lower bounce
rates, and higher ad
viewability&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Optimize for fast loading performance relative to the device and network
capabilities of your users. Currently, a good target for first loads is to
load the page and be &lt;a href=&quot;https://web.dev/interactive/&quot;&gt;interactive&lt;/a&gt; in &lt;a href=&quot;https://web.dev/performance-budgets-101/#establish-a-baseline&quot;&gt;5 seconds
or less on mid-range mobile devices with slow 3G
connections&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For subsequent loads, a good target is to load the page in under 2 seconds.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Be aware that these targets may change over time.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Test your load performance on the mobile devices and network connections that
are common among your users. You can use &lt;a href=&quot;https://web.dev/chrome-ux-report/&quot;&gt;Chrome User Experience
Report&lt;/a&gt; to find out the &lt;a href=&quot;https://web.dev/chrome-ux-report-data-studio-dashboard/#using-the-dashboard&quot;&gt;connection
distribution&lt;/a&gt;
of your users. If the data is not available for your site, &lt;a href=&quot;https://www.gsma.com/mobileeconomy/&quot; rel=&quot;noopener&quot;&gt;The Mobile Economy
2019&lt;/a&gt; suggests that a good global
baseline is a mid-range Android phone, such as a Moto G4, and a slow 3G
network (defined as 400 ms RTT and 400 kbps transfer speed). This
combination is available on &lt;a href=&quot;https://www.webpagetest.org/easy&quot; rel=&quot;noopener&quot;&gt;WebPageTest&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep in mind that although your typical mobile user&#39;s device might claim that
it&#39;s on a 2G, 3G, or 4G connection, in reality the &lt;a href=&quot;https://web.dev/adaptive-serving-based-on-network-quality/#how-it-works&quot;&gt;effective connection
speed&lt;/a&gt;
is often significantly slower, due to packet loss and network variance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/render-blocking-resources/&quot;&gt;Eliminate render blocking
resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You don&#39;t have to load everything in under 5 seconds to produce the perception
of a complete load. Consider &lt;a href=&quot;https://web.dev/browser-level-image-lazy-loading/&quot;&gt;lazy-loading
images&lt;/a&gt;, &lt;a href=&quot;https://web.dev/reduce-javascript-payloads-with-code-splitting/&quot;&gt;code-splitting JavaScript
bundles&lt;/a&gt;, and
other &lt;a href=&quot;https://web.dev/fast/&quot;&gt;optimizations suggested on web.dev&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Recognize the factors that affect page load performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network speed and latency&lt;/li&gt;
&lt;li&gt;Hardware (slower CPUs, for example)&lt;/li&gt;
&lt;li&gt;Cache eviction&lt;/li&gt;
&lt;li&gt;Differences in L2/L3 caching&lt;/li&gt;
&lt;li&gt;Parsing JavaScript &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

&lt;h2 id=&quot;tools-for-measuring-rail&quot;&gt;Tools for measuring RAIL &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#tools-for-measuring-rail&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a few tools to help you automate your RAIL measurements. Which one you
use depends on what type of information you need, and what type of workflow you
prefer.&lt;/p&gt;
&lt;h3 id=&quot;chrome-devtools&quot;&gt;Chrome DevTools &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#chrome-devtools&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools&quot; rel=&quot;noopener&quot;&gt;Chrome DevTools&lt;/a&gt;
provides in-depth analysis on everything that happens while your page loads or
runs. See &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance&quot; rel=&quot;noopener&quot;&gt;Get Started With Analyzing Runtime
Performance&lt;/a&gt;
to get familiar with the &lt;strong&gt;Performance&lt;/strong&gt; panel UI.&lt;/p&gt;
&lt;p&gt;The following DevTools features are especially relevant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#cpu-throttle&quot; rel=&quot;noopener&quot;&gt;Throttle your
CPU&lt;/a&gt;
to simulate a less-powerful device.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#network-throttle&quot; rel=&quot;noopener&quot;&gt;Throttle the
network&lt;/a&gt;
to simulate slower connections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#main&quot; rel=&quot;noopener&quot;&gt;View main thread
activity&lt;/a&gt;
to view every event that occurred on the main thread while you were recording.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#activities&quot; rel=&quot;noopener&quot;&gt;View main thread activities in a
table&lt;/a&gt;
to sort activities based on which ones took up the most time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#fps&quot; rel=&quot;noopener&quot;&gt;Analyze frames per second
(FPS)&lt;/a&gt;
to measure whether your animations truly run smoothly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2017/11/devtools-release-notes#perf-monitor&quot; rel=&quot;noopener&quot;&gt;Monitor CPU usage, JS heap size, DOM nodes, layouts per second, and
more&lt;/a&gt;
in real-time with the &lt;strong&gt;Performance Monitor&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#network&quot; rel=&quot;noopener&quot;&gt;Visualize network
requests&lt;/a&gt;
that occurred while you were recording with the &lt;strong&gt;Network&lt;/strong&gt; section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#screenshots&quot; rel=&quot;noopener&quot;&gt;Capture screenshots while
recording&lt;/a&gt;
to play back exactly how the page looked while the page loaded, or an
animation fired, and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#interactions&quot; rel=&quot;noopener&quot;&gt;View
interactions&lt;/a&gt;
to quickly identify what happened on a page after a user interacted with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#scrolling-performance-issues&quot; rel=&quot;noopener&quot;&gt;Find scroll performance issues in
real-time&lt;/a&gt;
by highlighting the page whenever a potentially problematic listener fires.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#paint-flashing&quot; rel=&quot;noopener&quot;&gt;View paint events in
real-time&lt;/a&gt;
to identify costly paint events that may be harming the performance of your
animations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lighthouse&quot;&gt;Lighthouse &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#lighthouse&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse&quot; rel=&quot;noopener&quot;&gt;Lighthouse&lt;/a&gt; is available in
Chrome DevTools,  at &lt;a href=&quot;https://web.dev/measure/&quot;&gt;web.dev/measure&lt;/a&gt;, as a
Chrome Extension, as a Node.js module, and within WebPageTest. You give it a
URL, it simulates a mid-range device with a slow 3G connection, runs a series of
audits on the page, and then gives you a report on load performance, as well as
suggestions on how to improve.&lt;/p&gt;
&lt;p&gt;The following audits are especially relevant:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/lighthouse-max-potential-fid/&quot;&gt;Max Potential First Input
Delay&lt;/a&gt;. Estimates how long your
app will take to respond to user input, based on main thread idle time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/uses-passive-event-listeners/&quot;&gt;Does not use passive listeners to improve scrolling
performance&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/lighthouse-total-blocking-time/&quot;&gt;Total Blocking Time&lt;/a&gt;.
Measures the total amount of time that a page is blocked from responding to
user input, such as mouse clicks, screen taps, or keyboard presses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive&quot; rel=&quot;noopener&quot;&gt;Time To
Interactive&lt;/a&gt;.
Measures when a user can consistently interact with all page elements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Load&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/service-worker/&quot;&gt;Does not register a service worker that controls page and
start_url&lt;/a&gt;. A service worker can cache common
resources on a user&#39;s device, reducing time spent fetching resources over the
network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/load-fast-enough-for-pwa/&quot;&gt;Page load is not fast enough on mobile
networks&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/blocking-resources&quot; rel=&quot;noopener&quot;&gt;Eliminate render-blocking
resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/offscreen-images/&quot;&gt;Defer offscreen images&lt;/a&gt;. Defer the loading
of offscreen images until they&#39;re needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/uses-responsive-images/&quot;&gt;Properly size images&lt;/a&gt;. Don&#39;t serve
images that are significantly larger than the size that&#39;s rendered in the
mobile viewport.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/critical-request-chains/&quot;&gt;Avoid chaining critical requests&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/uses-http2/&quot;&gt;Does not use HTTP/2 for all of its resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/uses-optimized-images/&quot;&gt;Efficiently encode images&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/uses-text-compression/&quot;&gt;Enable text compression&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/total-byte-weight/&quot;&gt;Avoid enormous network payloads&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/dom-size/&quot;&gt;Avoid an excessive DOM size&lt;/a&gt;. Reduce network bytes
by only shipping DOM nodes that are needed for rendering the page.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;webpagetest&quot;&gt;WebPageTest &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#webpagetest&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WebPageTest is a web performance tool that uses real browsers to access web
pages and collect timing metrics. Enter a URL at
&lt;a href=&quot;https://webpagetest.org/easy&quot; rel=&quot;noopener&quot;&gt;webpagetest.org/easy&lt;/a&gt; to get a detailed report on
the page&#39;s load performance on a real Moto G4 device with a slow 3G connection.
You can also configure it to include a Lighthouse audit.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#summary&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;RAIL is a lens for looking at a website&#39;s user experience as a journey composed
of distinct interactions. Understand how users perceive your site in order to
set performance goals with the greatest impact on user experience.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Focus on the user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Respond to user input in under 100 ms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Produce a frame in under 10 ms when animating or scrolling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maximize main thread idle time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load interactive content in under 5000 ms.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
  </entry>
</feed>
