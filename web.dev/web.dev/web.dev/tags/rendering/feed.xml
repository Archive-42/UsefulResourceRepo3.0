<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://web.dev/</id>
  <title>Rendering on web.dev</title>
  <updated>2021-08-11T17:14:17Z</updated>
  <author>
    <name>Google Developers</name>
  </author>
  <link href="https://web.dev/tags/rendering/feed.xml" rel="self"/>
  <link href="https://web.dev/"/>
  <category term="Rendering on web.dev"/>
  <icon>https://web.dev/images/social.png</icon>
  <logo>https://web.dev/images/shared/rss-banner.png</logo>
  <subtitle>Our latest news, updates, and stories about Rendering.</subtitle>
  
  
  <entry>
    <title>Declarative Shadow DOM</title>
    <link href="https://web.dev/declarative-shadow-dom/"/>
    <updated>2020-09-30T00:00:00Z</updated>
    <id>https://web.dev/declarative-shadow-dom/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Declarative Shadow DOM is a proposed web platform feature that the Chrome team is looking for
feedback on. Try it out using the &lt;a href=&quot;https://web.dev/declarative-shadow-dom/#detection-support&quot;&gt;experimental flag&lt;/a&gt; or &lt;a href=&quot;https://web.dev/declarative-shadow-dom/#polyfill&quot;&gt;polyfill&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/web-components/shadowdom&quot; rel=&quot;noopener&quot;&gt;Shadow DOM&lt;/a&gt;
is one of the three Web Components standards, rounded out by
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots&quot; rel=&quot;noopener&quot;&gt;HTML templates&lt;/a&gt;
and
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot; rel=&quot;noopener&quot;&gt;Custom Elements&lt;/a&gt;.
Shadow DOM provides a way to scope CSS styles to a specific DOM subtree and isolate that subtree
from the rest of the document. The &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element gives us a way to control where the children
of a Custom Element should be inserted within its Shadow Tree. These features combined enable a
system for building self-contained, reusable components that integrate seamlessly into existing
applications just like a built-in HTML element.&lt;/p&gt;
&lt;p&gt;Until now, the only way to use Shadow DOM was to construct a shadow root using JavaScript:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; host &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;host&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; shadowRoot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; host&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachShadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;mode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;open&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;shadowRoot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;h1&gt;Hello Shadow DOM&amp;lt;/h1&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;An imperative API like this works fine for client-side rendering: the same JavaScript modules that
define our Custom Elements also create their Shadow Roots and set their content. However, many web
applications need to render content server-side or to static HTML at build time. This can be an
important part of delivering a reasonable experience to visitors who may not be capable of running
JavaScript.&lt;/p&gt;
&lt;p&gt;The justifications for
&lt;a href=&quot;https://developers.google.com/web/updates/2019/02/rendering-on-the-web&quot; rel=&quot;noopener&quot;&gt;Server-Side Rendering&lt;/a&gt;
(SSR) vary from project to project. Some websites must provide fully functional server-rendered
HTML in order to meet accessibility guidelines, others choose to deliver a baseline no-JavaScript
experience as a way to guarantee good performance on slow connections or devices.&lt;/p&gt;
&lt;p&gt;Historically, it has been difficult to use Shadow DOM in combination with Server-Side Rendering
because there was no built-in way to express Shadow Roots in the server-generated HTML. There are
also performance implications when attaching Shadow Roots to DOM elements that have already been
rendered without them. This can cause layout shifting after the page has loaded, or temporarily
show a flash of unstyled content (&amp;quot;FOUC&amp;quot;) while loading the Shadow Root&#39;s stylesheets.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mfreed7/declarative-shadow-dom/blob/master/README.md&quot; rel=&quot;noopener&quot;&gt;Declarative Shadow DOM&lt;/a&gt;
(DSD) removes this limitation, bringing Shadow DOM to the server.&lt;/p&gt;
&lt;h2 id=&quot;building&quot;&gt;Building a Declarative Shadow Root &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#building&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A Declarative Shadow Root is a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element with a &lt;code&gt;shadowroot&lt;/code&gt; attribute:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;host-element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;shadowroot&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;open&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Light content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;host-element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;A template element with the &lt;code&gt;shadowroot&lt;/code&gt; attribute is detected by the HTML parser and immediately
applied as the shadow root of its parent element. Loading the pure HTML markup from the above
sample results in the following DOM tree:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;host-element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  #shadow-root (open)&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    â†³&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Light content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;host-element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This code sample is following the Chrome DevTools Elements panel&#39;s conventions
for displaying Shadow DOM content. For example, the &lt;code&gt;â†³&lt;/code&gt; character represents
slotted Light DOM content.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This gives us the benefits of Shadow DOM&#39;s encapsulation and slot projection in static HTML. No
JavaScript is needed to produce the entire tree, including the Shadow Root.&lt;/p&gt;
&lt;h2 id=&quot;serialization&quot;&gt;Serialization &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#serialization&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to introducing the new &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; syntax for creating shadow roots and attaching
them to elements, Declarative Shadow Dom also includes a new API for getting the HTML contents of
an element. The new &lt;code&gt;getInnerHTML()&lt;/code&gt; method works like &lt;code&gt;.innerHTML&lt;/code&gt;, but provides an option to
control whether shadow roots should be included in the returned HTML:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; html &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInnerHTML&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;includeShadowRoots&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;host-element&gt;&lt;br /&gt;  &amp;lt;template shadowroot=&quot;open&quot;&gt;&amp;lt;slot&gt;&amp;lt;/slot&gt;&amp;lt;/template&gt;&lt;br /&gt;  &amp;lt;h2&gt;Light content&amp;lt;/h2&gt;&lt;br /&gt;&amp;lt;/host-element&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Passing the &lt;code&gt;includeShadowRoots:true&lt;/code&gt; option serializes the entire subtree of an element,
&lt;strong&gt;including its shadow roots&lt;/strong&gt;. The included shadow roots are serialized using the
&lt;code&gt;&amp;lt;template shadowroot&amp;gt;&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;In order to preserve encapsulation semantics, any
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/mode&quot; rel=&quot;noopener&quot;&gt;closed shadow roots&lt;/a&gt; within an
element will not be serialized by default. To include closed shadow roots in the serialized HTML,
an array of references to those shadow roots can be passed via a new &lt;code&gt;closedRoots&lt;/code&gt; option:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; html &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInnerHTML&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  includeShadowRoots&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  closedRoots&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;shadowRoot1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; shadowRoot2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;When serializing the HTML within an element, any closed shadow roots that are present in the
&lt;code&gt;closedRoots&lt;/code&gt; array will be serialized using the same template syntax as open shadow roots:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;host-element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;shadowroot&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;closed&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Light content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;host-element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Serialized closed shadow roots are indicated by a &lt;code&gt;shadowroot&lt;/code&gt; attribute with a value of &lt;code&gt;closed&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;hydration&quot;&gt;Component hydration &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#hydration&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Declarative Shadow DOM can be used on its own as a way to encapsulate styles or customize child
placement, but it&#39;s most powerful when used with Custom Elements. Components built using Custom
Elements get automatically upgraded from static HTML. With the introduction of Declarative Shadow
DOM, it&#39;s now possible for a Custom Element to have a shadow root before it gets upgraded.&lt;/p&gt;
&lt;p&gt;A Custom Element being upgraded from HTML that includes a Declarative Shadow Root will already have
that shadow root attached. This means the element will have a &lt;code&gt;shadowRoot&lt;/code&gt; property already
available when it is instantiated, without your code explicitly creating one. It&#39;s best to check
&lt;code&gt;this.shadowRoot&lt;/code&gt; for any existing shadow root in your element&#39;s constructor. If there is already
a value, the HTML for this component included a Declarative Shadow Root. If the value is null,
there was no Declarative Shadow Root present in the HTML or the browser doesn&#39;t support Declarative
Shadow DOM.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;menu-toggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;shadowroot&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;open&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  Open Menu&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;menu-toggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MenuToggle&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Detect whether we have SSR content already:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shadowRoot&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// A Declarative Shadow Root exists!&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// wire up event listeners, references, etc.:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shadowRoot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstElementChild&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        button&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; toggle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// A Declarative Shadow Root doesn&#39;t exist.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Create a new shadow root and populate it:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; shadow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachShadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;mode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;open&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        shadow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;button&gt;&amp;lt;slot&gt;&amp;lt;/slot&gt;&amp;lt;/button&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        shadow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstChild&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; toggle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  customElements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;menu-toggle&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MenuToggle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Custom Elements have been around for a while, and until now there was no reason to check for an
existing shadow root before creating one using &lt;code&gt;attachShadow()&lt;/code&gt;. Declarative Shadow DOM includes a
small change that allows existing components to work despite this: calling the &lt;code&gt;attachShadow()&lt;/code&gt;
method on an element with an existing &lt;strong&gt;Declarative&lt;/strong&gt; Shadow Root will &lt;strong&gt;not&lt;/strong&gt; throw an error.
Instead, the Declarative Shadow Root is emptied and returned. This allows older components not
built for Declarative Shadow DOM to continue working, since declarative roots are preserved until
an imperative replacement is created.&lt;/p&gt;
&lt;p&gt;For newly-created Custom Elements, a new
&lt;a href=&quot;https://github.com/w3c/webcomponents/issues/871&quot; rel=&quot;noopener&quot;&gt;ElementInternals.shadowRoot&lt;/a&gt; property provides
an explicit way to get a reference to an element&#39;s existing Declarative Shadow Root, both open and
closed. This can be used to check for and use any Declarative Shadow Root, while still falling back
to&lt;code&gt;attachShadow()&lt;/code&gt; in cases where one was not provided.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MenuToggle&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; internals &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachInternals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// check for a Declarative Shadow Root:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; shadow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; internals&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shadowRoot&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;shadow&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// there wasn&#39;t one. create a new Shadow Root:&lt;/span&gt;&lt;br /&gt;      shadow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachShadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;mode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;open&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      shadow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;button&gt;&amp;lt;slot&gt;&amp;lt;/slot&gt;&amp;lt;/button&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// in either case, wire up our event listener:&lt;/span&gt;&lt;br /&gt;    shadow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstChild&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; toggle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;customElements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;menu-toggle&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MenuToggle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;shadow-per-root&quot;&gt;One shadow per root &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#shadow-per-root&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A Declarative Shadow Root is only associated with its parent element. This means shadow roots are
always colocated with their associated element. This design decision ensures shadow roots are
streamable like the rest of an HTML document. It&#39;s also convenient for authoring and generation,
since adding a shadow root to an element does not require maintaining a registry of existing shadow
roots.&lt;/p&gt;
&lt;p&gt;The tradeoff of associating shadow roots with their parent element is that it is not possible for
multiple elements to be initialized from the same Declarative Shadow Root &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;. However,
this is unlikely to matter in most cases where Declarative Shadow DOM is used, since the contents
of each shadow root are seldom identical. While server-rendered HTML often contains repeated
element structures, their content generally differsâ€“slight variations in text, attributes, etc.
Because the contents of a serialized Declarative Shadow Root are entirely static, upgrading
multiple elements from a single Declarative Shadow Root would only work if the elements happened to
be identical. Finally, the impact of repeated similar shadow roots on network transfer size is
relatively small due to the effects of compression.&lt;/p&gt;
&lt;p&gt;In the future, it might be possible to revisit shared shadow roots. If the DOM gains support for
&lt;a href=&quot;https://w3c.github.io/webcomponents/proposals/Template-Instantiation.html&quot; rel=&quot;noopener&quot;&gt;built-in templating&lt;/a&gt;,
Declarative Shadow Roots could be treated as templates that are instantiated in order to construct
the shadow root for a given element. The current Declarative Shadow DOM design allows for this
possibility to exist in the future by limiting shadow root association to a single element.&lt;/p&gt;
&lt;h2 id=&quot;timing&quot;&gt;Timing is everything &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#timing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Associating Declarative Shadow Roots directly with their parent element simplifies the process of
upgrading and attaching them to that element. Declarative Shadow Roots are detected during HTML
parsing, and attached immediately when their &lt;strong&gt;closing&lt;/strong&gt; &lt;code&gt;&amp;lt;/template&amp;gt;&lt;/code&gt; tag is encountered.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;    el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shadowRoot&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// null&lt;/span&gt;&lt;br /&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;shadowroot&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;open&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- shadow realm --&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;    el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shadowRoot&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ShadowRoot&lt;/span&gt;&lt;br /&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Prior to being attached, the contents of a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element with the &lt;code&gt;shadowroot&lt;/code&gt; attribute
are an inert Document Fragment and are not accessible via the &lt;code&gt;.content&lt;/code&gt; property like a standard
template. This security measure prevents JavaScript from being able to obtain a reference to closed
shadow roots. As a result, the contents of a Declarative Shadow Root are not rendered until its
closing &lt;code&gt;&amp;lt;/template&amp;gt;&lt;/code&gt; tag is parsed.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;shadow&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;shadowroot&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;open&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    shadow realm&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;      shadow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// null&lt;/span&gt;&lt;br /&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;parser-only&quot;&gt;Parser-only &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#parser-only&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Declarative Shadow DOM is a feature of the HTML parser. This means that a Declarative Shadow Root
will only be parsed and attached for &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tags with a &lt;code&gt;shadowroot&lt;/code&gt; attribute that are
present during HTML parsing. In other words, Declarative Shadow Roots can be constructed during
initial HTML parsing:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;some-element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;shadowroot&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;open&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    shadow root content for some-element&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;some-element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Setting the &lt;code&gt;shadowroot&lt;/code&gt; attribute of a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element does nothing, and the template
remains an ordinary template element:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; div &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; template &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;template&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;template&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;shadowroot&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;open&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this does nothing&lt;/span&gt;&lt;br /&gt;div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;template&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shadowRoot&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;To avoid some important security considerations, Declarative Shadow Roots also can&#39;t be created
using fragment parsing APIs like &lt;code&gt;innerHTML&lt;/code&gt; or &lt;code&gt;insertAdjacentHTML()&lt;/code&gt;. The only way to parse
HTML with Declarative Shadow Roots applied is to pass a new &lt;code&gt;includeShadowRoots&lt;/code&gt; option to
&lt;code&gt;DOMParser&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; html &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;    &amp;lt;div&gt;&lt;br /&gt;      &amp;lt;template shadowroot=&quot;open&quot;&gt;&amp;lt;/template&gt;&lt;br /&gt;    &amp;lt;/div&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; div &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; html&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// No shadow root here&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fragment &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DOMParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseFromString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;html&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;text/html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    includeShadowRoots&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Shadow root here&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;styling&quot;&gt;Server-rendering with style &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#styling&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inline and external stylesheets are fully supported inside Declarative Shadow Roots using the
standard &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;nineties-button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;shadowroot&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;open&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;      &lt;span class=&quot;token selector&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; seagreen&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/comicsans.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  I&#39;m Blue&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;nineties-button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Styles specified this way are also highly optimized: if the same stylesheet is present in multiple
Declarative Shadow Roots, it is only loaded and parsed once. The browser uses a single backing
&lt;code&gt;CSSStyleSheet&lt;/code&gt; that is shared by all of the shadow roots, eliminating duplicate memory overhead.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2019/02/constructable-stylesheets&quot; rel=&quot;noopener&quot;&gt;Constructable Stylesheets&lt;/a&gt;
are not supported in Declarative Shadow DOM. This is because there is currently no way to serialize
constructable stylesheets in HTML, and no way to refer to them when populating &lt;code&gt;adoptedStyleSheets&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;fouc&quot;&gt;Avoiding the flash of unstyled content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#fouc&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One potential issue in browsers that do not yet support Declarative Shadow DOM
is avoiding &amp;quot;flash of unstyled content&amp;quot; (FOUC), where the raw contents are shown
for Custom Elements that have not yet been upgraded. Prior to Declarative Shadow
DOM, one common technique for avoiding FOUC was to apply a &lt;code&gt;display:none&lt;/code&gt; style
rule to Custom Elements that haven&#39;t been loaded yet, since these have not had
their shadow root attached and populated. In this way, content is not displayed
until it is &amp;quot;ready&amp;quot;:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;x-foo:not(:defined) &gt; *&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;With the introduction of Declarative Shadow DOM, Custom Elements can be rendered
or authored in HTML such that their shadow content is in-place and ready before the
client-side component implementation is loaded:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;x-foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;shadowroot&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;open&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;shadow content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;x-foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;In this case, the &lt;code&gt;display:none&lt;/code&gt; &amp;quot;FOUC&amp;quot; rule would prevent the declarative
shadow root&#39;s content from showing. However, removing that rule would cause
browsers without Declarative Shadow DOM support to show incorrect or unstyled
content until the Declarative Shadow DOM &lt;a href=&quot;https://web.dev/declarative-shadow-dom/#polyfill&quot;&gt;polyfill&lt;/a&gt; loads and
converts the shadow root template into a real shadow root.&lt;/p&gt;
&lt;p&gt;Fortunately, this can be solved in CSS by modifying the FOUC style rule. In
browsers that support Declarative Shadow DOM, the &lt;code&gt;&amp;lt;template shadowroot&amp;gt;&lt;/code&gt;
element is immediately converted into a shadow root, leaving no &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;
element in the DOM tree. Browsers that don&#39;t support Declarative Shadow DOM
preserve the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element, which we can use to prevent FOUC:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;x-foo:not(:defined) &gt; template[shadowroot] ~ *&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Instead of hiding the not-yet-defined Custom Element, the revised &amp;quot;FOUC&amp;quot; rule
hides its &lt;em&gt;children&lt;/em&gt; when they follow a &lt;code&gt;&amp;lt;template shadowroot&amp;gt;&lt;/code&gt; element. Once
the Custom Element is defined, the rule no longer matches. The rule is ignored
in browsers that support Declarative Shadow DOM because the
&lt;code&gt;&amp;lt;template shadowroot&amp;gt;&lt;/code&gt; child is removed during HTML parsing.&lt;/p&gt;
&lt;h2 id=&quot;detection-support&quot;&gt;Feature detection and browser support &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#detection-support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Declarative Shadow DOM is available in ChromeÂ 90 and EdgeÂ 91. It can also be enabled
using the &lt;strong&gt;Experimental Web Platform Features&lt;/strong&gt; flag in ChromeÂ 85. Navigate to
&lt;code&gt;about://flags/#enable-experimental-web-platform-features&lt;/code&gt; to find that setting.&lt;/p&gt;
&lt;p&gt;As a new web platform API, Declarative Shadow DOM does not yet have widespread support across all
browsers. Browser support can be detected by checking for the existence of a &lt;code&gt;shadowroot&lt;/code&gt; property
on the prototype of &lt;code&gt;HTMLTemplateElement&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;supportsDeclarativeShadowDOM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLTemplateElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;shadowRoot&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;polyfill&quot;&gt;Polyfill &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#polyfill&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Building a simplified polyfill for Declarative Shadow DOM is relatively straightforward, since a
polyfill doesn&#39;t need to perfectly replicate the timing semantics or parser-only characteristics
that a browser implementation concerns itself with. To polyfill Declarative Shadow DOM, we can scan
the DOM to find all &lt;code&gt;&amp;lt;template shadowroot&amp;gt;&lt;/code&gt; elements, then convert them to attached Shadow Roots
on their parent element. This process can be done once the document is ready, or triggered by more
specific events like Custom Element lifecycles.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;template[shadowroot]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; template&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;shadowroot&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; shadowRoot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; template&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachShadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; mode &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  shadowRoot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;template&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  template&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/declarative-shadow-dom/#further-reading&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mfreed7/declarative-shadow-dom/blob/master/README.md&quot; rel=&quot;noopener&quot;&gt;Explainer with alternatives and performance analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.chromestatus.com/feature/5191745052606464&quot; rel=&quot;noopener&quot;&gt;Chromestatus for Declarative Shadow DOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/a/chromium.org/g/blink-dev/c/nJDc-1s3R9U/m/uCJKsEqpAwAJ&quot; rel=&quot;noopener&quot;&gt;Intent to Prototype&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Jason Miller</name>
    </author><author>
      <name>Mason Freed</name>
    </author>
  </entry>
  
  <entry>
    <title>Better JS scheduling with isInputPending()</title>
    <link href="https://web.dev/isinputpending/"/>
    <updated>2020-11-19T00:00:00Z</updated>
    <id>https://web.dev/isinputpending/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Loading fast is hard. Sites that leverage JS to render their content currently
have to make a trade-off between load performance and input
responsiveness: either perform all the work needed for display
all at once (better load performance, worse input responsiveness), or
chunk the work into smaller tasks in order to remain responsive to
input and paint (worse load performance, better input
responsiveness).&lt;/p&gt;
&lt;p&gt;To eliminate the need to make this trade-off, Facebook proposed and implemented
the &lt;code&gt;isInputPending()&lt;/code&gt; API in Chromium in order to improve responsiveness without
yielding. Based on origin trial feedback, we&#39;ve made a number of updates to the
API, and are happy to announce that the API is now shipping by default in Chromium
87!&lt;/p&gt;
&lt;h2 id=&quot;browser-compatibility&quot;&gt;Browser compatibility &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/isinputpending/#browser-compatibility&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;isInputPending()&lt;/code&gt; is shipping in Chromium-based browsers starting in version 87.
No other browser has signaled an intent to ship the API.&lt;/p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/isinputpending/#background&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;For the full background, check out our Facebook Engineering blog post,
&lt;a href=&quot;https://engineering.fb.com/developer-tools/isinputpending-api/&quot; rel=&quot;noopener&quot;&gt;Faster input events with Facebook&#39;s first browser API
contribution&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Most work in today&#39;s JS ecosystem gets done on a single thread: the main thread.
This provides a robust execution model to developers, but the user experience
(responsiveness in particular) can suffer drastically if script executes for a long
time. If the page is doing a lot of work while an input event is fired,
for instance, the page won&#39;t handle the click input event until after that work
completes.&lt;/p&gt;
&lt;p&gt;The current best practice is to deal with this issue by breaking the
JavaScript up into smaller blocks. While the page is loading, the page can run a
bit of JavaScript, and then yield and pass control back to the browser. The
browser can then check its input event queue and see whether there is anything
it needs to tell the page about. Then the browser can go back to running the
JavaScript blocks as they get added. This helps, but it can cause other issues.&lt;/p&gt;
&lt;p&gt;Each time the page yields control back to the browser, it takes some time for
the browser to check its input event queue, process events, and pick up the next
JavaScript block. While the browser responds to events quicker, the overall
loading time of the page gets slowed down. And if we yield too often, the page
loads too slowly. If we yield less often, it takes longer for the browser to
respond to user events, and people get frustrated. Not fun.&lt;/p&gt;
&lt;img alt=&quot;A diagram showing that when you run long JS tasks, the browser has less time to dispatch events.&quot; decoding=&quot;async&quot; height=&quot;450&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/C2JMVL3EhgBqne5DkrhN.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;At Facebook, we wanted to see what things would look like if we came up with a
new approach for loading that would eliminate this frustrating trade-off. We
reached out to our friends at Chrome about this, and came up with the proposal
for &lt;code&gt;isInputPending()&lt;/code&gt;. The &lt;code&gt;isInputPending()&lt;/code&gt; API is the first to use the concept of
interrupts for user inputs on the web, and allows for JavaScript to be
able to check for input without yielding to the browser.&lt;/p&gt;
&lt;img alt=&quot;A diagram showing that isInputPending() allows your JS to check if there&amp;#x27;s pending user input, without completely yielding execution back to the browser.&quot; decoding=&quot;async&quot; height=&quot;450&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6Et3ZusgDbXrdTIfenRD.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;Since there was interest in the API, we partnered with our colleagues at Chrome
to implement and ship the feature in Chromium. With help from the Chrome
engineers, we got the patches landed behind an &lt;a href=&quot;https://web.dev/origin-trials/&quot;&gt;origin trial&lt;/a&gt;
(which is a way for Chrome to test changes and get feedback from developers
before fully releasing an API).&lt;/p&gt;
&lt;p&gt;We&#39;ve now taken feedback from the origin trial and from the other members of the
W3C Web Performance Working Group and implemented changes to the API.&lt;/p&gt;
&lt;h2 id=&quot;example:-a-yieldier-scheduler&quot;&gt;Example: a yieldier scheduler &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/isinputpending/#example:-a-yieldier-scheduler&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Suppose that you&#39;ve got a bunch of display-blocking work to do to load your
page, for example generating markup from components, factoring out primes, or
just drawing a cool loading spinner. Each one of these is broken into a discrete
work item. Using the scheduler pattern, let&#39;s sketch out how we might process
our work in a hypothetical &lt;code&gt;processWorkQueue()&lt;/code&gt; function:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEADLINE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; performance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;QUANTUM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;performance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEADLINE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Yield the event loop if we&#39;re out of time.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;processWorkQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  job&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;By invoking &lt;code&gt;processWorkQueue()&lt;/code&gt; later in a new macrotask via &lt;code&gt;setTimeout()&lt;/code&gt;, we
give the browser the ability to remain somewhat responsive to input (it can
run event handlers before work resumes) while still managing to run relatively
uninterrupted. Though, we might get descheduled for a long time by other work
that wants control of the event loop, or get up to an extra &lt;code&gt;QUANTUM&lt;/code&gt; milliseconds
of event latency.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;A good value for &lt;code&gt;QUANTUM&lt;/code&gt; (under the &lt;a href=&quot;https://web.dev/rail/&quot;&gt;RAIL model&lt;/a&gt;) is &amp;lt;50ms,
depending on the type of work being done. This value is primarily what
dictates the tradeoff between throughput and latency.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is okay, but can we do better? Absolutely!&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEADLINE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; performance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;QUANTUM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scheduling&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isInputPending&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; performance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEADLINE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Yield if we have to handle an input event, or we&#39;re out of time.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;processWorkQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  job&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;By introducing a call to &lt;code&gt;navigator.scheduling.isInputPending()&lt;/code&gt;, we&#39;re able to
respond to input quicker while still ensuring that our display-blocking work
executes uninterrupted otherwise. If we&#39;re not interested in handling anything
other than input (e.g. painting) until work is complete, we can handily increase
the length of &lt;code&gt;QUANTUM&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;By default, &amp;quot;continuous&amp;quot; events are not returned from &lt;code&gt;isInputPending()&lt;/code&gt;. These
include &lt;code&gt;mousemove&lt;/code&gt;, &lt;code&gt;pointermove&lt;/code&gt;, and others. If you&#39;re interested in yielding for
these as well, no problem. By providing a dictionary to &lt;code&gt;isInputPending()&lt;/code&gt; with
&lt;code&gt;includeContinuous&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, we&#39;re good to go:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEADLINE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; performance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;QUANTUM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; includeContinuous&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scheduling&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isInputPending&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; performance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEADLINE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Yield if we have to handle an input event (any of them!), or we&#39;re out of time.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;processWorkQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  job&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;That&#39;s it! Frameworks like React are building &lt;code&gt;isInputPending()&lt;/code&gt; support into their
core scheduling libraries using similar logic. Hopefully, this will lead
developers who use these frameworks to be able to benefit from &lt;code&gt;isInputPending()&lt;/code&gt;
behind the scenes without significant rewrites.&lt;/p&gt;
&lt;h2 id=&quot;yielding-isn&#39;t-always-bad&quot;&gt;Yielding isn&#39;t always bad &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/isinputpending/#yielding-isn&#39;t-always-bad&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&#39;s worth noting that yielding less isn&#39;t the right solution for every use
case. There are many reasons to return control to the browser other than to
process input events, such as to perform rendering and execute other scripts on
the page.&lt;/p&gt;
&lt;p&gt;There exist cases where the browser isn&#39;t able to properly attribute pending
input events. In particular, setting complex clips and masks for cross-origin
iframes may report false negatives (i.e. &lt;code&gt;isInputPending()&lt;/code&gt; may unexpectedly return
false when targeting these frames). Be sure that you&#39;re yielding often enough if
your site does require interactions with stylized subframes.&lt;/p&gt;
&lt;p&gt;Be mindful of other pages that share an event loop, as well. On platforms such
as Chrome for Android, it&#39;s quite common for multiple origins to share an event
loop. &lt;code&gt;isInputPending()&lt;/code&gt; will never return &lt;code&gt;true&lt;/code&gt; if input is dispatched to a
cross-origin frame, and thus backgrounded pages may interfere with the
responsiveness of foreground pages. You may wish to reduce, postpone, or yield
more often when doing work in the background using the &lt;a href=&quot;https://www.w3.org/TR/page-visibility-2/&quot; rel=&quot;noopener&quot;&gt;Page Visibility
API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We encourage you to use &lt;code&gt;isInputPending()&lt;/code&gt; with discretion. If there isn&#39;t
user-blocking work to be done, then be kind to others on the event loop by
yielding more frequently. &lt;a href=&quot;https://web.dev/long-tasks-devtools/&quot;&gt;Long tasks can be
harmful&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/isinputpending/#feedback&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Leave feedback on the spec in the
&lt;a href=&quot;https://github.com/WICG/is-input-pending&quot; rel=&quot;noopener&quot;&gt;is-input-pending&lt;/a&gt; repository.&lt;/li&gt;
&lt;li&gt;Contact &lt;a href=&quot;https://twitter.com/acomminos&quot; rel=&quot;noopener&quot;&gt;@acomminos&lt;/a&gt; (one of the spec authors)
on Twitter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/isinputpending/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&#39;re excited that &lt;code&gt;isInputPending()&lt;/code&gt; is launching, and that developers are able
to start using it today. This API is the first time that Facebook has built a
new web API and taken it from idea incubation to standards proposal to actually
shipping in a browser. We&#39;d like to thank everyone who helped us get to this
point, and give a special shoutout to everyone at Chrome who helped us flesh out
this idea and get it shipped!&lt;/p&gt;
&lt;p&gt;Hero photo by &lt;a href=&quot;https://unsplash.com/@whmii&quot; rel=&quot;noopener&quot;&gt;Will H McMahan&lt;/a&gt; on
&lt;a href=&quot;https://unsplash.com/&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Nate Schloss</name>
    </author><author>
      <name>Andrew Comminos</name>
    </author>
  </entry>
  
  <entry>
    <title>Pixel-perfect rendering with devicePixelContentBox</title>
    <link href="https://web.dev/device-pixel-content-box/"/>
    <updated>2020-07-07T00:00:00Z</updated>
    <id>https://web.dev/device-pixel-content-box/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Since Chrome 84, &lt;a href=&quot;https://web.dev/resize-observer/&quot;&gt;ResizeObserver&lt;/a&gt; supports a new box measurement called &lt;code&gt;device-pixel-content-box&lt;/code&gt;, that measures the element&#39;s dimension in &lt;em&gt;physical&lt;/em&gt; pixels. This enables rendering pixel-perfect graphics, especially in the context of high-density screens.&lt;/p&gt;
&lt;h2 id=&quot;background:-css-pixels-canvas-pixels-and-physical-pixels&quot;&gt;Background: CSS pixels, canvas pixels, and physical pixels &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/device-pixel-content-box/#background:-css-pixels-canvas-pixels-and-physical-pixels&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While we often work with abstract units of length like &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;vh&lt;/code&gt;, it all boils down to pixels. Whenever we specify the size or position of an element in CSS, the browser&#39;s layout engine will eventually convert that value to pixels (&lt;code&gt;px&lt;/code&gt;). These are &amp;quot;CSS Pixels&amp;quot;, which have a lot of history and only have a loose relationship with the pixels you have on your screen.&lt;/p&gt;
&lt;p&gt;For a long time, it was fairly reasonable to estimate anyone&#39;s screen pixel density with 96DPI (&amp;quot;dots per inch&amp;quot;), meaning any given monitor would have roughly 38 pixels per cm. Over time, monitors grew and/or shrunk or started to have more pixels on the same surface area. Combine that with the fact that lots of content on the web define their dimensions, including font sizes, in &lt;code&gt;px&lt;/code&gt;, and we end up with illegible text on these high-density (&amp;quot;HiDPI&amp;quot;) screens. As a counter-measure, browsers hide the monitor&#39;s actual pixel density and instead pretend that the user has a 96 DPI display. The &lt;code&gt;px&lt;/code&gt; unit in CSS represents the size of one pixel on this &lt;em&gt;virtual&lt;/em&gt; 96 DPI display, hence the name &amp;quot;CSS Pixel&amp;quot;. This unit is only used for measurement and positioning. Before any actual rendering happens, a conversion to physical pixels happens.&lt;/p&gt;
&lt;p&gt;How do we go from this virtual display to the user&#39;s real display? Enter &lt;code&gt;devicePixelRatio&lt;/code&gt;. This global value tells you how many &lt;em&gt;physical&lt;/em&gt; pixels you need to form a single CSS pixel. If &lt;code&gt;devicePixelRatio&lt;/code&gt; (dPR) is &lt;code&gt;1&lt;/code&gt;, you are working on a monitor with roughly 96DPI. If you have a retina screen, your dPR is probably &lt;code&gt;2&lt;/code&gt;. On phones it is not uncommon to encounter higher (and weirder) dPR values like &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; or even &lt;code&gt;2.65&lt;/code&gt;. It is essential to note that this value is &lt;em&gt;exact&lt;/em&gt;, but doesn&#39;t let you derive the monitor&#39;s &lt;em&gt;actual&lt;/em&gt; DPI value. A dPR of &lt;code&gt;2&lt;/code&gt; means that 1 CSS pixel will map to &lt;em&gt;exactly&lt;/em&gt; 2 physical pixels.&lt;/p&gt;
&lt;details class=&quot;w-details&quot;&gt;
&lt;summary class=&quot;w-details__summary&quot;&gt;
  &lt;h2 class=&quot;w-details__header&quot;&gt;
    Example
  &lt;/h2&gt;
  &lt;p class=&quot;w-details__preview&quot;&gt; My monitor has a dPR of &lt;code&gt;1&lt;/code&gt; according to Chromeâ€¦&lt;/p&gt;
&lt;/summary&gt;
It has 3440 pixels in width and the display area is 79cm wide.
That leads to a resolution of 110 DPI. Close to 96, but not quite.
That is also the reason why a &lt;code&gt;&amp;lt;div style=&quot;width: 1cm; height: 1cm&quot;&amp;gt;&lt;/code&gt;
will not exactly measure 1cm in size on most displays.
&lt;/details&gt;
&lt;p&gt;Finally, dPR can also be affected by your browser&#39;s zoom feature. If you zoom in, the browser increases the reported dPR, causing everything to render bigger. If you check &lt;code&gt;devicePixelRatio&lt;/code&gt; in a DevTools Console while zooming, you can see fractional values appear.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;&quot; decoding=&quot;async&quot; height=&quot;314&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 600px) 600px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ko6ehWmACBrUcPrl4AGO.png?auto=format&amp;w=1200 1200w&quot; width=&quot;600&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;DevTools showing a variety of fractional &lt;code&gt;devicePixelRatio&lt;/code&gt; due to zooming.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Let&#39;s add the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element to the mix. You can specify how many pixels you want the canvas to have using the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes. So &lt;code&gt;&amp;lt;canvas width=40 height=30&amp;gt;&lt;/code&gt; would be a canvas with 40 by 30 pixels. However, this does not mean that it will be &lt;em&gt;displayed&lt;/em&gt; at 40 by 30 pixels. By default, the canvas will use the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attribute to define its intrinsic size, but you can arbitrarily resize the canvas using all the CSS properties you know and love. With everything we have learned so far, it might occur to you that this will not be ideal in every scenario. One pixel on the canvas might end up covering multiple physical pixels, or just a fraction of a physical pixel. This can lead to unpleasing visual artifacts.&lt;/p&gt;
&lt;p&gt;To summarize: Canvas elements have a given size to define the area that you can draw on. The number of canvas pixels is completely independent from the canvas&#39; display size, specified in CSS pixels. The number of CSS pixels is not the same as the number of physical pixels.&lt;/p&gt;
&lt;h3 id=&quot;pixel-perfection&quot;&gt;Pixel perfection &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/device-pixel-content-box/#pixel-perfection&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In some scenarios, it is desirable to have an exact mapping from canvas pixels to physical pixels. If this mapping is achieved, it&#39;s called &amp;quot;pixel-perfect&amp;quot;. Pixel-perfect rendering is crucial for legible rendering of text, especially when using &lt;a href=&quot;https://en.wikipedia.org/wiki/Subpixel_rendering&quot; rel=&quot;noopener&quot;&gt;subpixel rendering&lt;/a&gt; or when displaying graphics with tightly aligned lines of alternating brightness.&lt;/p&gt;
&lt;p&gt;To achieve something as close to a pixel-perfect canvas as possible on the web, this has been more or less the go-to approach:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/* â€¦ styles that affect the canvas&#39; size â€¦ */&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;canvas&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myCanvas&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;canvas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cvs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#myCanvas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Get the canvas&#39; size in CSS pixels&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rectangle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cvs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBoundingClientRect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Convert it to real pixels. Ish.&lt;/span&gt;&lt;br /&gt;  cvs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rectangle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; devicePixelRatio&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  cvs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rectangle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; devicePixelRatio&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Start drawingâ€¦&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The astute reader might be wondering what happens when dPR is not an integer value. That is a good question and exactly where the crux of this entire problem lies. In addition, if you specify an element&#39;s position or size using percentages, &lt;code&gt;vh&lt;/code&gt;, or other indirect values, it is possible that they will resolve to fractional CSS pixel values. An element with &lt;code&gt;margin-left: 33%&lt;/code&gt; can end up with a rectangle like this:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;&quot; decoding=&quot;async&quot; height=&quot;409&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/gWP1lVOw8ITEJhziaKnU.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;DevTools showing fractional pixel values as a result of a &lt;code&gt;getBoundingClientRect()&lt;/code&gt; call.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;CSS pixels are purely virtual, so having fractions of a pixel is okay in theory, but how does the browser figure out the mapping to physical pixels? Because fractional &lt;em&gt;physical&lt;/em&gt; pixels are not a thing.&lt;/p&gt;
&lt;h2 id=&quot;pixel-snapping&quot;&gt;Pixel snapping &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/device-pixel-content-box/#pixel-snapping&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The part of the unit conversion process that takes care of aligning elements with physical pixels is called &amp;quot;pixel snapping&amp;quot;, and it does what it says on the tin: It snaps fractional pixel values to integer, physical pixel values. How exactly this happens is different from browser to browser. If we have an element with a width of &lt;code&gt;791.984px&lt;/code&gt; on a display where dPR is 1, one browser might render the element at &lt;code&gt;792px&lt;/code&gt; physical pixels, while another browser might render it at &lt;code&gt;791px&lt;/code&gt;. That&#39;s just a single pixel off, but a single pixel can be detrimental to renderings that need to be pixel-perfect. This can lead to blurriness or even more visible artifacts like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Moir%C3%A9_pattern&quot; rel=&quot;noopener&quot;&gt;MoirÃ© effect&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;&quot; decoding=&quot;async&quot; height=&quot;802&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 600px) 600px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/11FeCvp9aKLnDk05vYwY.png?auto=format&amp;w=1200 1200w&quot; width=&quot;600&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;The top image is a raster of differently colored pixels. The bottom image is the same as above, but the width and height have been reduced by one pixel using bilinear scaling. The emerging pattern is called the MoirÃ© effect.&lt;br /&gt;(You might have to open this image in a new tab to see it without any scaling applied to it.)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;devicepixelcontentbox&quot;&gt;&lt;code&gt;devicePixelContentBox&lt;/code&gt; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/device-pixel-content-box/#devicepixelcontentbox&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;devicePixelContentBox&lt;/code&gt; gives you an element&#39;s content box in device pixel (i.e. physical pixel) units. It&#39;s part of &lt;code&gt;ResizeObserver&lt;/code&gt;. While &lt;a href=&quot;https://caniuse.com/#feat=resizeobserver&quot; rel=&quot;noopener&quot;&gt;ResizeObserver is now supported in all major browsers&lt;/a&gt; since Safari 13.1, the &lt;code&gt;devicePixelContentBox&lt;/code&gt; property is only in Chrome 84+ for now.&lt;/p&gt;
&lt;p&gt;As mentioned in &lt;a href=&quot;https://web.dev/resize-observer/&quot;&gt;&lt;code&gt;ResizeObserver&lt;/code&gt;: it&#39;s like &lt;code&gt;document.onresize&lt;/code&gt; for elements&lt;/a&gt;, the callback function of a &lt;code&gt;ResizeObserver&lt;/code&gt; will be called before paint and after layout. That means that the &lt;code&gt;entries&lt;/code&gt; parameter to the callback will contain the sizes of all observed elements just before they are being painted. In the context of our canvas problem outlined above, we can use this opportunity to adjust the number of pixels on our canvas, ensuring that we end up with an exact one-to-one mapping between canvas pixels and physical pixels.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; observer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResizeObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; entry &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; entries&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; canvas&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  canvas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;devicePixelContentBoxSize&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inlineSize&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  canvas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;devicePixelContentBoxSize&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;blockSize&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/* â€¦ render to canvas â€¦ */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;observer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;canvas&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;box&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;device-pixel-content-box&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;box&lt;/code&gt; property in the options object for &lt;code&gt;observer.observe()&lt;/code&gt; lets you define which sizes you wish to &lt;em&gt;observe&lt;/em&gt;. So while each &lt;code&gt;ResizeObserverEntry&lt;/code&gt; will always provide &lt;code&gt;borderBoxSize&lt;/code&gt;, &lt;code&gt;contentBoxSize&lt;/code&gt; and &lt;code&gt;devicePixelContentBoxSize&lt;/code&gt; (provided the browser supports it), the callback will only be invoked if any of the &lt;em&gt;observed&lt;/em&gt; box metrics change.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;All of the box metrics are arrays to allow &lt;code&gt;ResizeObserver&lt;/code&gt; to handle fragmentation in the future. At the time of writing, the array is always of length 1.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With this new property, we can even animate our canvas&#39; size and position (effectively guaranteeing fractional pixel values), and not see any MoirÃ© effects on the rendering. If you would like to see the MoirÃ© effect on the approach using &lt;code&gt;getBoundingClientRect()&lt;/code&gt;, and how the new &lt;code&gt;ResizeObserver&lt;/code&gt; property allows you to avoid it, take a look at the &lt;a href=&quot;https://device-pixel-content-box.glitch.me/&quot; rel=&quot;noopener&quot;&gt;demo&lt;/a&gt; in Chrome 84 or later!&lt;/p&gt;
&lt;h3 id=&quot;feature-detection&quot;&gt;Feature detection &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/device-pixel-content-box/#feature-detection&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To check if a user&#39;s browser has support for &lt;code&gt;devicePixelContentBox&lt;/code&gt;, we can observe any element, and check if the property is present on the &lt;code&gt;ResizeObserverEntry&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hasDevicePixelContentBox&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResizeObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;devicePixelContentBoxSize&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      ro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    ro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;box&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;device-pixel-content-box&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hasDevicePixelContentBox&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The browser does NOT support devicePixelContentBox&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/device-pixel-content-box/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pixels are a surprisingly complex topic on the web and up until now there was no way for you to know the exact number of physical pixels an element occupies on the user&#39;s screen. The new &lt;code&gt;devicePixelContentBox&lt;/code&gt; property on a &lt;code&gt;ResizeObserverEntry&lt;/code&gt; gives you that piece of information and allows you to do pixel-perfect renderings with &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;. &lt;code&gt;devicePixelContentBox&lt;/code&gt; is supported in Chrome 84+.&lt;/p&gt;
</content>
    <author>
      <name>Surma</name>
    </author>
  </entry>
  
  <entry>
    <title>Measure performance with the RAIL model</title>
    <link href="https://web.dev/rail/"/>
    <updated>2020-06-10T00:00:00Z</updated>
    <id>https://web.dev/rail/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;&lt;strong&gt;RAIL&lt;/strong&gt; is a &lt;strong&gt;user-centric&lt;/strong&gt; performance model that provides a structure for
thinking about performance. The model breaks down the user&#39;s experience into key
actions (for example, tap, scroll, load) and helps you define performance goals
for each of them.&lt;/p&gt;
&lt;p&gt;RAIL stands for four distinct aspects of web app life cycle: response,
animation, idle, and load. Users have different performance expectations for
each of these contexts, so performance goals are defined based on the context
and &lt;a href=&quot;https://www.nngroup.com/articles/response-times-3-important-limits/&quot; rel=&quot;noopener&quot;&gt;UX research on how users perceive
delays&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The 4 parts of the RAIL performance model: response, animation, idle, and load.&quot; decoding=&quot;async&quot; height=&quot;290&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/uc1IWVOW2wEhIY6z4KjJ.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;The 4 parts of the RAIL performance model
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;focus-on-the-user&quot;&gt;Focus on the user &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#focus-on-the-user&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Make users the focal point of your performance effort. The table below describes
key metrics of how users perceive performance delays:&lt;/p&gt;
&lt;table class=&quot;w-table-wrapper&quot;&gt;
  &lt;thead&gt;
  User perception of performance delays
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;0&amp;nbsp;to&amp;nbsp;16&amp;nbsp;ms&lt;/td&gt;
    &lt;td&gt;Users are exceptionally good at tracking motion, and they dislike it when animations aren&#39;t smooth. They perceive animations as smooth so long as 60 new frames are rendered every second. That&#39;s 16&amp;nbsp;ms per frame, including the time it takes for the browser to paint the new frame to the screen, leaving an app about 10&amp;nbsp;ms to produce a frame.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;0&amp;nbsp;to&amp;nbsp;100&amp;nbsp;ms&lt;/td&gt;
    &lt;td&gt;Respond to user actions within this time window and users feel like the result is immediate. Any longer, and the connection between action and reaction is broken.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;100&amp;nbsp;to&amp;nbsp;1000&amp;nbsp;ms&lt;/td&gt;
    &lt;td&gt;Within this window, things feel part of a natural and continuous progression of tasks. For most users on the web, loading pages or changing views represents a task.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1000&amp;nbsp;ms&amp;nbsp;or&amp;nbsp;more&lt;/td&gt;
    &lt;td&gt;Beyond 1000 milliseconds (1 second), users lose focus on the task they are performing.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;10000&amp;nbsp;ms or more&lt;/td&gt;
    &lt;td&gt;Beyond 10000 milliseconds (10 seconds), users are frustrated and are likely to abandon tasks. They may or may not come back later.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Users perceive performance delays differently, depending on network
conditions and hardware. For example, loading sites on a powerful desktop
machine over a fast Wi-Fi connection commonly happens in under 1Â s and
users have grown accustomed to that. Loading sites on mobile devices with slow
3G connections takes more time, so mobile users are generally more patient and
loading in 5Â s on mobile is a more realistic goal. &lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;goals-and-guidelines&quot;&gt;Goals and guidelines &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#goals-and-guidelines&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the context of RAIL, the terms &lt;strong&gt;goals&lt;/strong&gt; and &lt;strong&gt;guidelines&lt;/strong&gt; have specific
meanings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;. Key performance metrics related to user experience. For example,
tap to paint in under 100 milliseconds. Since human perception is relatively
constant, these goals are unlikely to change any time soon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;. Recommendations that help you achieve goals. These may be
specific to current hardware and network connection conditions, and therefore
may change over time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;response:-process-events-in-under-50ms&quot;&gt;Response: process events in under 50ms &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#response:-process-events-in-under-50ms&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: Complete a transition initiated by user input within 100Â ms, so
users feel like the interactions are instantaneous.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To ensure a visible response within 100Â ms, process user input events
within 50Â ms. This applies to most inputs, such as clicking buttons,
toggling form controls, or starting animations. This does not apply to touch
drags or scrolls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Though it may sound counterintuitive, it&#39;s not always the right call to
respond to user input immediately. You can use this 100Â ms window to do
other expensive work, but be careful not to block the user. If possible, do
work in the background.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For actions that take longer than 50Â ms to complete, always provide
feedback.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;50-ms-or-100-ms&quot;&gt;50Â ms or 100Â ms? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#50-ms-or-100-ms&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The goal is to respond to input in under 100Â ms, so why is our budget only
50Â ms? This is because there is generally other work being done in addition
to input handling, and that work takes up part of the time available for
acceptable input response. If an application is performing work in the
recommended 50Â ms chunks during idle time, that means input can be queued
for up to 50Â ms if it occurs during one of those chunks of work. Accounting
for this, it&#39;s safe to assume only the remaining 50Â ms is available for
actual input handling. This effect is visualized in the diagram below which
shows how input received during an idle task is queued, reducing the available
processing time:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Diagram showing how input received during an idle task is queued, reducing available input processing time to 50ms&quot; decoding=&quot;async&quot; height=&quot;400&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/I7HDZ9qGxe0jAzz6PxNq.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;How idle tasks affect input response budget.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;animation:-produce-a-frame-in-10-ms&quot;&gt;Animation: produce a frame in 10Â ms &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#animation:-produce-a-frame-in-10-ms&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Produce each frame in an animation in 10Â ms or less. Technically, the
maximum budget for each frame is 16Â ms (1000Â ms / 60 frames per
second â‰ˆ 16Â ms), but browsers need about 6Â ms to render each frame,
hence the guideline of 10Â ms per frame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aim for visual smoothness. Users notice when frame rates vary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In high pressure points like animations, the key is to do nothing where you
can, and the absolute minimum where you can&#39;t. Whenever possible, make use of
the 100Â ms response to pre-calculate expensive work so that you maximize
your chances of hitting 60Â fps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/rendering&quot; rel=&quot;noopener&quot;&gt;Rendering
Performance&lt;/a&gt;
for various animation optimization strategies.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Recognize all the types of animations. Animations aren&#39;t just fancy
UI effects. Each of these interactions are considered animations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual animations, such as entrances and exits,
&lt;a href=&quot;https://www.webopedia.com/TERM/T/tweening.html&quot; rel=&quot;noopener&quot;&gt;tweens&lt;/a&gt;, and loading
indicators.&lt;/li&gt;
&lt;li&gt;Scrolling. This includes flinging, which is when the user starts scrolling,
then lets go, and the page continues scrolling.&lt;/li&gt;
&lt;li&gt;Dragging. Animations often follow user interactions, such as panning a map or
pinching to zoom. &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

&lt;h2 id=&quot;idle:-maximize-idle-time&quot;&gt;Idle: maximize idle time &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#idle:-maximize-idle-time&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: Maximize idle time to increase the odds that the page responds to user
input within 50Â ms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use idle time to complete deferred work. For example, for the initial page
load, load as little data as possible, then use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback&quot; rel=&quot;noopener&quot;&gt;idle
time&lt;/a&gt;
to load the rest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perform work during idle time in 50Â ms or less. Any longer, and you risk
interfering with the app&#39;s ability to respond to user input within 50Â ms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a user interacts with a page during idle time work, the user interaction
should always take the highest priority and interrupt the idle time work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;load:-deliver-content-and-become-interactive-in-under-5-seconds&quot;&gt;Load: deliver content and become interactive in under 5 seconds &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#load:-deliver-content-and-become-interactive-in-under-5-seconds&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When pages load slowly, user attention wanders, and users perceive the task as
broken. Sites that load quickly have &lt;a href=&quot;https://www.thinkwithgoogle.com/intl/en-154/insights-inspiration/research-data/need-mobile-speed-how-mobile-latency-impacts-publisher-revenue/&quot; rel=&quot;noopener&quot;&gt;longer average sessions, lower bounce
rates, and higher ad
viewability&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Optimize for fast loading performance relative to the device and network
capabilities of your users. Currently, a good target for first loads is to
load the page and be &lt;a href=&quot;https://web.dev/interactive/&quot;&gt;interactive&lt;/a&gt; in &lt;a href=&quot;https://web.dev/performance-budgets-101/#establish-a-baseline&quot;&gt;5 seconds
or less on mid-range mobile devices with slow 3G
connections&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For subsequent loads, a good target is to load the page in under 2 seconds.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Be aware that these targets may change over time.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Test your load performance on the mobile devices and network connections that
are common among your users. You can use &lt;a href=&quot;https://web.dev/chrome-ux-report/&quot;&gt;Chrome User Experience
Report&lt;/a&gt; to find out the &lt;a href=&quot;https://web.dev/chrome-ux-report-data-studio-dashboard/#using-the-dashboard&quot;&gt;connection
distribution&lt;/a&gt;
of your users. If the data is not available for your site, &lt;a href=&quot;https://www.gsma.com/mobileeconomy/&quot; rel=&quot;noopener&quot;&gt;The Mobile Economy
2019&lt;/a&gt; suggests that a good global
baseline is a mid-range Android phone, such as a Moto G4, and a slow 3G
network (defined as 400Â ms RTT and 400Â kbps transfer speed). This
combination is available on &lt;a href=&quot;https://www.webpagetest.org/easy&quot; rel=&quot;noopener&quot;&gt;WebPageTest&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep in mind that although your typical mobile user&#39;s device might claim that
it&#39;s on a 2G, 3G, or 4G connection, in reality the &lt;a href=&quot;https://web.dev/adaptive-serving-based-on-network-quality/#how-it-works&quot;&gt;effective connection
speed&lt;/a&gt;
is often significantly slower, due to packet loss and network variance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/render-blocking-resources/&quot;&gt;Eliminate render blocking
resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You don&#39;t have to load everything in under 5 seconds to produce the perception
of a complete load. Consider &lt;a href=&quot;https://web.dev/browser-level-image-lazy-loading/&quot;&gt;lazy-loading
images&lt;/a&gt;, &lt;a href=&quot;https://web.dev/reduce-javascript-payloads-with-code-splitting/&quot;&gt;code-splitting JavaScript
bundles&lt;/a&gt;, and
other &lt;a href=&quot;https://web.dev/fast/&quot;&gt;optimizations suggested on web.dev&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Recognize the factors that affect page load performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network speed and latency&lt;/li&gt;
&lt;li&gt;Hardware (slower CPUs, for example)&lt;/li&gt;
&lt;li&gt;Cache eviction&lt;/li&gt;
&lt;li&gt;Differences in L2/L3 caching&lt;/li&gt;
&lt;li&gt;Parsing JavaScript &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

&lt;h2 id=&quot;tools-for-measuring-rail&quot;&gt;Tools for measuring RAIL &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#tools-for-measuring-rail&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a few tools to help you automate your RAIL measurements. Which one you
use depends on what type of information you need, and what type of workflow you
prefer.&lt;/p&gt;
&lt;h3 id=&quot;chrome-devtools&quot;&gt;Chrome DevTools &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#chrome-devtools&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools&quot; rel=&quot;noopener&quot;&gt;Chrome DevTools&lt;/a&gt;
provides in-depth analysis on everything that happens while your page loads or
runs. See &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance&quot; rel=&quot;noopener&quot;&gt;Get Started With Analyzing Runtime
Performance&lt;/a&gt;
to get familiar with the &lt;strong&gt;Performance&lt;/strong&gt; panel UI.&lt;/p&gt;
&lt;p&gt;The following DevTools features are especially relevant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#cpu-throttle&quot; rel=&quot;noopener&quot;&gt;Throttle your
CPU&lt;/a&gt;
to simulate a less-powerful device.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#network-throttle&quot; rel=&quot;noopener&quot;&gt;Throttle the
network&lt;/a&gt;
to simulate slower connections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#main&quot; rel=&quot;noopener&quot;&gt;View main thread
activity&lt;/a&gt;
to view every event that occurred on the main thread while you were recording.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#activities&quot; rel=&quot;noopener&quot;&gt;View main thread activities in a
table&lt;/a&gt;
to sort activities based on which ones took up the most time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#fps&quot; rel=&quot;noopener&quot;&gt;Analyze frames per second
(FPS)&lt;/a&gt;
to measure whether your animations truly run smoothly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2017/11/devtools-release-notes#perf-monitor&quot; rel=&quot;noopener&quot;&gt;Monitor CPU usage, JS heap size, DOM nodes, layouts per second, and
more&lt;/a&gt;
in real-time with the &lt;strong&gt;Performance Monitor&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#network&quot; rel=&quot;noopener&quot;&gt;Visualize network
requests&lt;/a&gt;
that occurred while you were recording with the &lt;strong&gt;Network&lt;/strong&gt; section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#screenshots&quot; rel=&quot;noopener&quot;&gt;Capture screenshots while
recording&lt;/a&gt;
to play back exactly how the page looked while the page loaded, or an
animation fired, and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#interactions&quot; rel=&quot;noopener&quot;&gt;View
interactions&lt;/a&gt;
to quickly identify what happened on a page after a user interacted with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#scrolling-performance-issues&quot; rel=&quot;noopener&quot;&gt;Find scroll performance issues in
real-time&lt;/a&gt;
by highlighting the page whenever a potentially problematic listener fires.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#paint-flashing&quot; rel=&quot;noopener&quot;&gt;View paint events in
real-time&lt;/a&gt;
to identify costly paint events that may be harming the performance of your
animations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lighthouse&quot;&gt;Lighthouse &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#lighthouse&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse&quot; rel=&quot;noopener&quot;&gt;Lighthouse&lt;/a&gt; is available in
Chrome DevTools,  at &lt;a href=&quot;https://web.dev/measure/&quot;&gt;web.dev/measure&lt;/a&gt;, as a
Chrome Extension, as a Node.js module, and within WebPageTest. You give it a
URL, it simulates a mid-range device with a slow 3G connection, runs a series of
audits on the page, and then gives you a report on load performance, as well as
suggestions on how to improve.&lt;/p&gt;
&lt;p&gt;The following audits are especially relevant:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/lighthouse-max-potential-fid/&quot;&gt;Max Potential First Input
Delay&lt;/a&gt;. Estimates how long your
app will take to respond to user input, based on main thread idle time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/uses-passive-event-listeners/&quot;&gt;Does not use passive listeners to improve scrolling
performance&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/lighthouse-total-blocking-time/&quot;&gt;Total Blocking Time&lt;/a&gt;.
Measures the total amount of time that a page is blocked from responding to
user input, such as mouse clicks, screen taps, or keyboard presses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive&quot; rel=&quot;noopener&quot;&gt;Time To
Interactive&lt;/a&gt;.
Measures when a user can consistently interact with all page elements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Load&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/service-worker/&quot;&gt;Does not register a service worker that controls page and
start_url&lt;/a&gt;. A service worker can cache common
resources on a user&#39;s device, reducing time spent fetching resources over the
network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/load-fast-enough-for-pwa/&quot;&gt;Page load is not fast enough on mobile
networks&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/blocking-resources&quot; rel=&quot;noopener&quot;&gt;Eliminate render-blocking
resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/offscreen-images/&quot;&gt;Defer offscreen images&lt;/a&gt;. Defer the loading
of offscreen images until they&#39;re needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/uses-responsive-images/&quot;&gt;Properly size images&lt;/a&gt;. Don&#39;t serve
images that are significantly larger than the size that&#39;s rendered in the
mobile viewport.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/critical-request-chains/&quot;&gt;Avoid chaining critical requests&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/uses-http2/&quot;&gt;Does not use HTTP/2 for all of its resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/uses-optimized-images/&quot;&gt;Efficiently encode images&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/uses-text-compression/&quot;&gt;Enable text compression&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/total-byte-weight/&quot;&gt;Avoid enormous network payloads&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://web.dev/dom-size/&quot;&gt;Avoid an excessive DOM size&lt;/a&gt;. Reduce network bytes
by only shipping DOM nodes that are needed for rendering the page.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;webpagetest&quot;&gt;WebPageTest &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#webpagetest&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WebPageTest is a web performance tool that uses real browsers to access web
pages and collect timing metrics. Enter a URL at
&lt;a href=&quot;https://webpagetest.org/easy&quot; rel=&quot;noopener&quot;&gt;webpagetest.org/easy&lt;/a&gt; to get a detailed report on
the page&#39;s load performance on a real Moto G4 device with a slow 3G connection.
You can also configure it to include a Lighthouse audit.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/rail/#summary&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;RAIL is a lens for looking at a website&#39;s user experience as a journey composed
of distinct interactions. Understand how users perceive your site in order to
set performance goals with the greatest impact on user experience.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Focus on the user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Respond to user input in under 100Â ms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Produce a frame in under 10Â ms when animating or scrolling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maximize main thread idle time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load interactive content in under 5000Â ms.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
  </entry>
  
  <entry>
    <title>ResizeObserver: itâ€™s like document.onresize for elements</title>
    <link href="https://web.dev/resize-observer/"/>
    <updated>2016-10-07T00:00:00Z</updated>
    <id>https://web.dev/resize-observer/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Before &lt;code&gt;ResizeObserver&lt;/code&gt;, you had to attach a listener to the document&#39;s &lt;code&gt;resize&lt;/code&gt;
event to get notified of any change of the viewport&#39;s dimensions. In the event
handler, you would then have to figure out which elements have been affected by
that change and call a specific routine to react appropriately. If you needed
the new dimensions of an element after a resize, you had to call
&lt;code&gt;getBoundingClientRect()&lt;/code&gt; or &lt;code&gt;getComputedStyle()&lt;/code&gt;, which can cause layout
thrashing if you don&#39;t take care of batching &lt;em&gt;all&lt;/em&gt; your reads and &lt;em&gt;all&lt;/em&gt; your
writes.&lt;/p&gt;
&lt;p&gt;This didn&#39;t even cover cases where elements change their size without the main
window having been resized. For example, appending new children, setting an
element&#39;s &lt;code&gt;display&lt;/code&gt; style to &lt;code&gt;none&lt;/code&gt;, or similar actions can change the size of
an element, its siblings, or its ancestors.&lt;/p&gt;
&lt;p&gt;This is why &lt;code&gt;ResizeObserver&lt;/code&gt; is a useful primitive. It reacts to changes in
size of any of the observed elements, independent of what caused the change.
It provides access to the new size of the observed elements too.&lt;/p&gt;
&lt;h2 id=&quot;api&quot;&gt;API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resize-observer/#api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the APIs with the &lt;code&gt;Observer&lt;/code&gt; suffix we mentioned above share a simple API
design. &lt;code&gt;ResizeObserver&lt;/code&gt; is no exception. You create a &lt;code&gt;ResizeObserver&lt;/code&gt; object
and pass a callback to the constructor. The callback is passed an array of
&lt;code&gt;ResizeObserverEntry&lt;/code&gt; objectsâ€”one entry per observed elementâ€”which
contains the new dimensions for the element.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResizeObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entry &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; entries&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contentRect&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Element:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Element size: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;px x &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Element padding: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;top&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;px ; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;left&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Observe one or multiple elements&lt;/span&gt;&lt;br /&gt;ro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;some-details&quot;&gt;Some details &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resize-observer/#some-details&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;what-is-being-reported&quot;&gt;What is being reported? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resize-observer/#what-is-being-reported&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Generally, a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ResizeObserverEntry&lt;/code&gt;&lt;/a&gt;
reports the content box of an element through a property called
&lt;code&gt;contentRect&lt;/code&gt;, which returns a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;DOMRectReadOnly&lt;/code&gt;&lt;/a&gt;
object. The content box is the box in which content can be placed. It is
the border box minus the padding.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A diagram of the CSS box model.&quot; decoding=&quot;async&quot; height=&quot;562&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 727px) 727px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/CKxpe8LNq2CMPFdtLtVK.png?auto=format&amp;w=1454 1454w&quot; width=&quot;727&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;It&#39;s important to note that while &lt;code&gt;ResizeObserver&lt;/code&gt; &lt;em&gt;reports&lt;/em&gt; both the dimensions
of the &lt;code&gt;contentRect&lt;/code&gt; and the padding, it only &lt;em&gt;watches&lt;/em&gt; the &lt;code&gt;contentRect&lt;/code&gt;.
&lt;em&gt;Don&#39;t&lt;/em&gt; confuse &lt;code&gt;contentRect&lt;/code&gt; with the bounding box of the element. The bounding
box, as reported by &lt;code&gt;getBoundingClientRect()&lt;/code&gt;, is the box that contains the
entire element and its descendants. SVGs are an exception to the rule, where
&lt;code&gt;ResizeObserver&lt;/code&gt; will report the dimensions of the bounding box.&lt;/p&gt;
&lt;p&gt;As of Chrome 84, &lt;code&gt;ResizeObserverEntry&lt;/code&gt; has three new properties to provide more
detailed information. Each of these properties returns a &lt;code&gt;ResizeObserverSize&lt;/code&gt;
object containing a &lt;code&gt;blockSize&lt;/code&gt; property and an &lt;code&gt;inlineSize&lt;/code&gt; property. This
information is about the observered element at the time the callback is invoked.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;borderBoxSize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contentBoxSize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;devicePixelContentBoxSize&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these items return read-only arrays because in the future it&#39;s hoped that
they can support elements that have multiple fragments, which occur in
multi-column scenarios. For now, these arrays will only contain one element.&lt;/p&gt;
&lt;p&gt;Platform support for these properties is limited, but &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;Firefox already
supports&lt;/a&gt;
the first two.&lt;/p&gt;
&lt;h3 id=&quot;when-is-it-being-reported&quot;&gt;When is it being reported? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resize-observer/#when-is-it-being-reported&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The spec proscribes that &lt;code&gt;ResizeObserver&lt;/code&gt; should process all resize events
before paint and after layout. This makes the callback of a &lt;code&gt;ResizeObserver&lt;/code&gt; the
ideal place to make changes to your page&#39;s layout. Because &lt;code&gt;ResizeObserver&lt;/code&gt;
processing happens between layout and paint, doing so will only invalidate
layout, not paint.&lt;/p&gt;
&lt;h3 id=&quot;gotcha&quot;&gt;Gotcha &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resize-observer/#gotcha&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You might be asking yourself: what happens if I change the size of an observed
element inside the callback to &lt;code&gt;ResizeObserver&lt;/code&gt;? The answer is: you will trigger
another call to the callback right away. Fortunately, &lt;code&gt;ResizeObserver&lt;/code&gt; has a
mechanism to avoid infinite callback loops and cyclic dependencies. Changes will
only be processed in the same frame if the resized element is deeper in the DOM
tree than the &lt;em&gt;shallowest&lt;/em&gt; element processed in the previous callback.
Otherwise, they&#39;ll get deferred to the next frame.&lt;/p&gt;
&lt;h2 id=&quot;application&quot;&gt;Application &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resize-observer/#application&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that &lt;code&gt;ResizeObserver&lt;/code&gt; allows you to do is to implement per-element
media queries. By observing elements, you can imperatively define your
design breakpoints and change an element&#39;s styles. In the following
&lt;a href=&quot;https://googlechrome.github.io/samples/resizeobserver/&quot; rel=&quot;noopener&quot;&gt;example&lt;/a&gt;, the second box
will change its border radius according to its width.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; class=&quot;w-screenshot&quot;&gt;
    &lt;source src=&quot;https://storage.googleapis.com/webfundamentals-assets/resizeobserver/elem-mq_vp8.webm&quot; type=&quot;video/webm; codecs=vp8&quot; /&gt;
    &lt;source src=&quot;https://storage.googleapis.com/webfundamentals-assets/resizeobserver/elem-mq_x264.mp4&quot; type=&quot;video/mp4; codecs=h264&quot; /&gt;
  &lt;/video&gt;
&lt;/figure&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResizeObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entry &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; entries&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;borderRadius &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;br /&gt;        Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;250&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contentRect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;px&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Only observe the second box&lt;/span&gt;&lt;br /&gt;ro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.box:nth-child(2)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Another interesting example to look at is a chat window. The problem that arises
in a typical top-to-bottom conversation layout is scroll positioning. To avoid
confusing the user, it is helpful if the window sticks to the bottom of the
conversation, where the newest messages appear. Additionally, any kind of layout
change (think of a phone going from landscape to portrait or vice versa) should
achieve the same.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ResizeObserver&lt;/code&gt; allows you to write a &lt;em&gt;single&lt;/em&gt; piece of code that takes care of
&lt;em&gt;both&lt;/em&gt; scenarios. Resizing the window is an event that a &lt;code&gt;ResizeObserver&lt;/code&gt; can
capture by definition, but calling &lt;code&gt;appendChild()&lt;/code&gt; also resizes that element
(unless&lt;code&gt;overflow: hidden&lt;/code&gt; is set), because it needs to make space for the new
elements. With this in mind, it takes very few lines to achieve the desired
effect:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
 &lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; class=&quot;w-screenshot&quot;&gt;
   &lt;source src=&quot;https://storage.googleapis.com/webfundamentals-assets/resizeobserver/chat_vp8.webm&quot; type=&quot;video/webm; codecs=vp8&quot; /&gt;
   &lt;source src=&quot;https://storage.googleapis.com/webfundamentals-assets/resizeobserver/chat_x264.mp4&quot; type=&quot;video/mp4; codecs=h264&quot; /&gt;
 &lt;/video&gt;
&lt;/figure&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResizeObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollingElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br /&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollingElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollHeight&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Observe the scrollingElement for when the window gets resized&lt;/span&gt;&lt;br /&gt;ro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollingElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Observe the timeline to process new messages&lt;/span&gt;&lt;br /&gt;ro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timeline&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Pretty neat, huh?&lt;/p&gt;
&lt;p&gt;From here, I could add more code to handle the case where the user has scrolled
up manually and wants scrolling to stick to &lt;em&gt;that&lt;/em&gt; message when a new message
comes in.&lt;/p&gt;
&lt;p&gt;Another use case is for any kind of custom element that is doing its own layout.
Until &lt;code&gt;ResizeObserver&lt;/code&gt;, there was no reliable way to get notified when its
dimensions change so its children can be laid out again.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/resize-observer/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ResizeObserver&lt;/code&gt; is available in &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/ResizeObserver#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;most major
browsers&lt;/a&gt;.
In some cases, that availability is quite recent. There are &lt;a href=&quot;https://github.com/WICG/ResizeObserver/issues/3&quot; rel=&quot;noopener&quot;&gt;some polyfills
available&lt;/a&gt; but it is not
possible to completely duplicate the functionality of &lt;code&gt;ResizeObserver&lt;/code&gt;. Current
implementations either rely on polling or on adding sentinel elements to the
DOM. The former will drain your battery on mobile by keeping the CPU busy while
the latter modifies your DOM and might mess up styling and other DOM-reliant
code.&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@markusspiske?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; rel=&quot;noopener&quot;&gt;Markus
Spiske&lt;/a&gt;
on
&lt;a href=&quot;https://unsplash.com/s/photos/observe-growth?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Surma</name>
    </author><author>
      <name>Joe Medley</name>
    </author>
  </entry>
</feed>
