<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://web.dev/</id>
  <title>Media on web.dev</title>
  <updated>2021-08-11T17:14:17Z</updated>
  <author>
    <name>Google Developers</name>
  </author>
  <link href="https://web.dev/tags/media/feed.xml" rel="self"/>
  <link href="https://web.dev/"/>
  <category term="Media on web.dev"/>
  <icon>https://web.dev/images/social.png</icon>
  <logo>https://web.dev/images/shared/rss-banner.png</logo>
  <subtitle>Our latest news, updates, and stories about Media.</subtitle>
  
  
  <entry>
    <title>Customize media notifications and playback controls with the Media Session API</title>
    <link href="https://web.dev/media-session/"/>
    <updated>2020-03-06T00:00:00Z</updated>
    <id>https://web.dev/media-session/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;To let users know what&#39;s currently playing in their browser and control it
without returning to the page that launched it, the Media Session API has been
introduced. It allows web developers to customize this experience through
metadata in custom media notifications, media events such as playing, pausing,
seeking, track changing, and video conferencing events such as mute/unmute
microphone, turnon/turnoff camera, and hang up. These customizations are
available in several contexts including desktop media hubs, media notifications
on mobile, and even on wearable devices. I&#39;ll describe these customizations in
this article.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshots of Media Session contexts.&quot; decoding=&quot;async&quot; height=&quot;330&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/qwTz64KKq4rq7WeA3rlT.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Media hub on desktop, media notification on mobile, and a wearable device.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;cross-browser-support&quot;&gt;Cross-browser support &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#cross-browser-support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the time of writing, Chrome is the only browser that supports the Media
Session API both on desktop and mobile. Firefox has partial support for the
Media Session API on desktop behind a flag, and Samsung Internet also has
partial support. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaSession#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;Browser compatibility&lt;/a&gt;
for up-to-date information.&lt;/p&gt;
&lt;h2 id=&quot;about-the-media-session-api&quot;&gt;About the Media Session API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#about-the-media-session-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Media session API provides several benefits and capabilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardware media keys are supported.&lt;/li&gt;
&lt;li&gt;Media notifications are customized on mobile, Chrome OS, and paired wearable device.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://blog.google/products/chrome/manage-audio-and-video-in-chrome/&quot; rel=&quot;noopener&quot;&gt;media hub&lt;/a&gt; is available on desktop.&lt;/li&gt;
&lt;li&gt;Lock screen media controls are available on &lt;a href=&quot;https://www.blog.google/products/chromebooks/whats-new-december2019/&quot; rel=&quot;noopener&quot;&gt;Chrome OS&lt;/a&gt; and mobile.&lt;/li&gt;
&lt;li&gt;Picture-in-Picture window controls are available for both &lt;a href=&quot;https://developers.google.com/web/updates/2018/10/watch-video-using-picture-in-picture#show_canvas_element_in_picture-in-picture_window&quot; rel=&quot;noopener&quot;&gt;audio playback&lt;/a&gt;
and &lt;a href=&quot;https://web.dev/media-session/#video-conferencing-actions&quot;&gt;video conferencing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Assistant integration on mobile is available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few examples will illustrate some of these points.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example 1:&lt;/b&gt; If users press the &amp;quot;next track&amp;quot; media key of their keyboard,
web developers can handle this user action whether Chrome is in the foreground
or the background.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example 2:&lt;/b&gt; If users listen to a podcast on the web while their device
screen is locked, they can still hit the &amp;quot;seek backward&amp;quot; icon from the lock
screen media controls so that web developers move playback time backward by few
seconds.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example 3:&lt;/b&gt; If users have tabs playing audio, they can easily stop
playback from the media hub on desktop so that web developers have a chance to
clear their state.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example 4:&lt;/b&gt; If users are on a video call, they can press the &amp;quot;toggle
microphone&amp;quot; control in the Picture-in-Picture window to stop the website from
receiving microphone data.&lt;/p&gt;
&lt;p&gt;This is all done through two different interfaces: The &lt;code&gt;MediaSession&lt;/code&gt; interface
and the &lt;code&gt;MediaMetadata&lt;/code&gt; interface. The first lets users control whatever&#39;s
playing. The second is how you tell &lt;code&gt;MediaSession&lt;/code&gt; what needs to be controlled.&lt;/p&gt;
&lt;p&gt;To illustrate, the image below shows how these interfaces relate to specific
media controls, in this case a media notification on mobile.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Media Session interfaces illustration.&quot; decoding=&quot;async&quot; height=&quot;353&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/eiavbbCE6TlI8osR1tYT.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Anatomy of a media notification on mobile.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;let-users-know-what&#39;s-playing&quot;&gt;Let users know what&#39;s playing &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#let-users-know-what&#39;s-playing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When a website is playing audio or video, users automatically get media
notifications either in the notification tray on mobile, or the media hub on
desktop. Chrome does its best to show appropriate information by using the
document&#39;s title and the largest icon image it can find. With the Media Session
API, it&#39;s possible to customize the media notification with some richer media
metadata such as the title, artist name, album name, and artwork as shown below.&lt;/p&gt;
&lt;p&gt;Chrome requests &amp;quot;full&amp;quot; audio focus to show media notifications only when the
media duration is &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/5d8eab739eb23c4fd27ba6a18b0e1afc15182321/media/base/media_content_type.cc#10&quot; rel=&quot;noopener&quot;&gt;at least 5 seconds&lt;/a&gt;. This ensures that incidental sounds
such as dings don&#39;t show notifications.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// After media (video or audio) starts playing&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mediaSession&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;metadata &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaMetadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Never Gonna Give You Up&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    artist&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Rick Astley&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    album&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Whenever You Need Somebody&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    artwork&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://via.placeholder.com/96&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   sizes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;96x96&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;image/png&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://via.placeholder.com/128&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sizes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;128x128&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;image/png&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://via.placeholder.com/192&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sizes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;192x192&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;image/png&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://via.placeholder.com/256&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sizes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;256x256&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;image/png&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://via.placeholder.com/384&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sizes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;384x384&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;image/png&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://via.placeholder.com/512&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sizes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;512x512&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;image/png&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// TODO: Update playback state.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;When playback ends, there is no need to &amp;quot;release&amp;quot; the media session as the
notification will automatically disappear. Keep in mind that
&lt;code&gt;navigator.mediaSession.metadata&lt;/code&gt; will be used when the next playback starts
though. This is why it&#39;s important to update it when the media playback source
changes to make sure relevant information is shown in the media notification.&lt;/p&gt;
&lt;p&gt;There are a few things to note about the media metadata.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notification artwork array supports blob URLs and data URLs.&lt;/li&gt;
&lt;li&gt;If no artwork is defined and there is an icon image (specified using &lt;code&gt;&amp;lt;link rel=icon&amp;gt;&lt;/code&gt;) at a desirable size, media notifications will use it.&lt;/li&gt;
&lt;li&gt;Notification artwork target size in Chrome for Android is &lt;code&gt;512x512&lt;/code&gt;. For
low-end devices, it is &lt;code&gt;256x256&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;title&lt;/code&gt; attribute of the media HTML element is used in the &amp;quot;Now playing&amp;quot;
macOS widget.&lt;/li&gt;
&lt;li&gt;If the media resource is embedded (for example in a iframe), Media Session API
information must be set from the embedded context. See snippet below.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;iframe id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;iframe&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;video&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;iframe&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  iframe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contentWindow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;metadata &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaMetadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Never Gonna Give You Up&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;let-users-control-what&#39;s-playing&quot;&gt;Let users control what&#39;s playing &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#let-users-control-what&#39;s-playing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A media session action is an action (for example &amp;quot;play&amp;quot; or &amp;quot;pause&amp;quot;) that a website can
handle for users when they interact with the current media playback. Actions are
analogous to and work much the same as events. Like events, actions are
implemented by setting handlers on an appropriate object, an instance of
&lt;code&gt;MediaSession&lt;/code&gt;, in this case. Some actions are triggered when users press
buttons from a headset, another remote device, a keyboard, or interact with a
media notification.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of a media notification in Windows 10.&quot; decoding=&quot;async&quot; height=&quot;450&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/9rN4x5GXdhg4qjC0ZEmk.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Customized media notification in Windows 10.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Because some media session actions may not be supported, it is recommended to
use a &lt;code&gt;try…catch&lt;/code&gt; block when setting them.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; actionHandlers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;play&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;pause&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;previoustrack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nexttrack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;stop&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;seekbackward&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;seekforward&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;seekto&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/* Video conferencing actions */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;togglemicrophone&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;togglecamera&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hangup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; actionHandlers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The media session action &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;action&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; is not supported yet.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Unsetting a media session action handler is as easy as setting it to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Unset the &quot;nexttrack&quot; action handler at the end of a playlist.&lt;/span&gt;&lt;br /&gt;  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nexttrack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The media session action &quot;nexttrack&quot; is not supported yet.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Once set, media session action handlers will persist through media playbacks.
This is similar to the event listener pattern except that handling an event
means that the browser stops doing any default behavior and uses this as a
signal that the website supports the media action. Hence, media action controls
won&#39;t be shown unless the proper action handler is set.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of the Now Playing widget in macOS Big Sur.&quot; decoding=&quot;async&quot; height=&quot;450&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/WBZAf1ymhtXInsWumHtw.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Now Playing widget in macOS Big Sur (requires Chrome 91).&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;play-pause&quot;&gt;Play / pause &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#play-pause&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;play&amp;quot;&lt;/code&gt; action indicates that the user wants to resume the media playback
while &lt;code&gt;&amp;quot;pause&amp;quot;&lt;/code&gt; indicates a desire to temporarily halt it.&lt;/p&gt;
&lt;p&gt;The &amp;quot;play/pause&amp;quot; icon is always shown in a media notification and the related
media events are handled automatically by the browser. To override their default
behavior, handle &amp;quot;play&amp;quot; and &amp;quot;pause&amp;quot; media actions as shown below.&lt;/p&gt;
&lt;p&gt;The browser may consider a website to not be playing media when seeking or
loading for instance. In this case, override this behavior by setting
&lt;code&gt;navigator.mediaSession.playbackState&lt;/code&gt; to &lt;code&gt;&amp;quot;playing&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;paused&amp;quot;&lt;/code&gt; to make sure
the website UI stays in sync with media notification controls.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; video &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;play&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Resume playback&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;pause&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Pause active playback&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;play&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playbackState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;playing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;pause&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playbackState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;paused&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;previous-track&quot;&gt;Previous track &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#previous-track&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;previoustrack&amp;quot;&lt;/code&gt; action indicates that the user either wants to start the
current media playback from the beginning if the media playback has a notion of
beginning, or move to the previous item in the playlist if the media playback
has a notion of a playlist.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;previoustrack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Play previous track.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;next-track&quot;&gt;Next track &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#next-track&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;nexttrack&amp;quot;&lt;/code&gt; action indicates that the user wants to move media playback to
the next item in the playlist if the media playback has a notion of a playlist.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nexttrack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Play next track.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;stop&quot;&gt;Stop &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#stop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;stop&amp;quot;&lt;/code&gt; action indicates that the user wants to stop the media playback and
clear the state if appropriate.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;stop&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Stop playback and clear state if appropriate.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;seek-backward-forward&quot;&gt;Seek backward / forward &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#seek-backward-forward&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;seekbackward&amp;quot;&lt;/code&gt; action indicates that the user wants to move the media
playback time backward by a short period while &lt;code&gt;&amp;quot;seekforward&amp;quot;&lt;/code&gt; indicates a desire
to move the media playback time forward by a short period. In both cases, a
short period means a few seconds.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;seekOffset&lt;/code&gt; value provided in the action handler is the time in seconds to
move the media playback time by. If it is not provided (for example &lt;code&gt;undefined&lt;/code&gt;), then
you should use a sensible time (for example 10-30 seconds).&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; video &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; defaultSkipTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* Time to skip in seconds by default */&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;seekbackward&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; skipTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seekOffset &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; defaultSkipTime&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentTime &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; skipTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// TODO: Update playback state.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;seekforward&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; skipTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seekOffset &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; defaultSkipTime&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentTime &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; skipTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// TODO: Update playback state.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;seek-to-a-specific-time&quot;&gt;Seek to a specific time &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#seek-to-a-specific-time&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;seekto&amp;quot;&lt;/code&gt; action indicates that the user wants to move the media playback
time to a specific time.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;seekTime&lt;/code&gt; value provided in the action handler is the time in seconds to
move the media playback time to.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fastSeek&lt;/code&gt; boolean provided in the action handler is true if the action is
being called multiple times as part of a sequence and this is not the last call
in that sequence.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; video &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;seekto&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fastSeek &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fastSeek&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Only use fast seek if supported.&lt;/span&gt;&lt;br /&gt;    video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fastSeek&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seekTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seekTime&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// TODO: Update playback state.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;set-playback-position&quot;&gt;Set playback position &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#set-playback-position&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Accurately displaying the media playback position in a notification is as simple
as setting the position state at an appropriate time as shown below. The
position state is a combination of the media playback rate, duration, and
current time.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of lock screen media controls in Chrome OS.&quot; decoding=&quot;async&quot; height=&quot;450&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/Rlw13wMoaJrDziraXgUc.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Lock screen media controls in Chrome OS.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The duration must be provided and positive. The position must be positive and
less than the duration. The playback rate must be greater than 0.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; video &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updatePositionState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;setPositionState&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setPositionState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      duration&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      playbackRate&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playbackRate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      position&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// When video starts playing, update duration.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;updatePositionState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// When user wants to seek backward, update position.&lt;/span&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;seekbackward&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;updatePositionState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// When user wants to seek forward, update position.&lt;/span&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;seekforward&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;updatePositionState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// When user wants to seek to a specific time, update position.&lt;/span&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;seekto&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;updatePositionState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// When video playback rate changes, update position state.&lt;/span&gt;&lt;br /&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ratechange&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;updatePositionState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Resetting the position state is as easy as setting it to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Reset position state when media is reset.&lt;/span&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setPositionState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;video-conferencing-actions&quot;&gt;Video conferencing actions &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#video-conferencing-actions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When the user puts their video call into a Picture-in-Picture window, the
browser may display controls for the microphone and camera, and for hanging up.
When the user clicks those, the website handles them through the video
conferencing actions below.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of video conferencing controls in a Picture-in-Picture window.&quot; decoding=&quot;async&quot; height=&quot;464&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 748px) 748px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/fXc7jqc95Oa6sKce7kpZ.jpg?auto=format&amp;w=1496 1496w&quot; width=&quot;748&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Video conferencing controls in a Picture-in-Picture window.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;At the time of writing, video conferencing actions are available only in
Chrome 92 on desktop.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;toggle-microphone&quot;&gt;Toggle microphone &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#toggle-microphone&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;togglemicrophone&amp;quot;&lt;/code&gt; action indicates that the user wants to mute or unmute
the microphone. The &lt;code&gt;setMicrophoneActive(isActive)&lt;/code&gt; method tells the browser
whether the website currently considers the microphone to be active.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; isMicrophoneActive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;togglemicrophone&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isMicrophoneActive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Mute the microphone.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Unmute the microphone.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  isMicrophoneActive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isMicrophoneActive&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setMicrophoneActive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isMicrophoneActive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;toggle-camera&quot;&gt;Toggle camera &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#toggle-camera&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;togglecamera&amp;quot;&lt;/code&gt; action indicates that the user wants to turn the active
camera on or off. The &lt;code&gt;setCameraActive(isActive)&lt;/code&gt; method indicates whether the
browser considers the website to be active.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; isCameraActive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;togglemicrophone&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isCameraActive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Disable the camera.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Enable the camera.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  isCameraActive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isCameraActive&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setCameraActive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isCameraActive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;hang-up&quot;&gt;Hang up &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#hang-up&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;hangup&amp;quot;&lt;/code&gt; action indicates that the user wants to end a call.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hangup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// End the call.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;samples&quot;&gt;Samples &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#samples&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Check out some &lt;a href=&quot;https://googlechrome.github.io/samples/media-session/&quot; rel=&quot;noopener&quot;&gt;Media Session samples&lt;/a&gt; featuring &lt;a href=&quot;http://www.blender.org/&quot; rel=&quot;noopener&quot;&gt;Blender Foundation&lt;/a&gt; and
&lt;a href=&quot;http://www.wavemage.com/category/music/&quot; rel=&quot;noopener&quot;&gt;Jan Morgenstern&#39;s work&lt;/a&gt;.&lt;/p&gt;
 &lt;figure class=&quot;w-figure&quot;&gt;
  &lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; poster=&quot;https://storage.googleapis.com/webfundamentals-assets/videos/media-hub-desktop-720.jpg&quot;&gt;
    &lt;source src=&quot;https://storage.googleapis.com/webfundamentals-assets/videos/media-hub-desktop-720.webm&quot; type=&quot;video/webm; codecs=vp9&quot; /&gt;
    &lt;source src=&quot;https://storage.googleapis.com/webfundamentals-assets/videos/media-hub-desktop-720.mp4&quot; type=&quot;video/mp4; codecs=h264&quot; /&gt;
  &lt;/video&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    A screencast illustrating the Media Session API.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-session/#resources&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Media Session Spec:
&lt;a href=&quot;https://wicg.github.io/mediasession&quot; rel=&quot;noopener&quot;&gt;wicg.github.io/mediasession&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spec Issues:
&lt;a href=&quot;https://github.com/WICG/mediasession/issues&quot; rel=&quot;noopener&quot;&gt;github.com/WICG/mediasession/issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome Bugs:
&lt;a href=&quot;https://crbug.com/?q=component:Internals%3EMedia%3ESession&quot; rel=&quot;noopener&quot;&gt;crbug.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>François Beaufort</name>
    </author>
  </entry>
  
  <entry>
    <title>Insertable streams for MediaStreamTrack</title>
    <link href="https://web.dev/mediastreamtrack-insertable-media-processing/"/>
    <updated>2021-05-04T00:00:00Z</updated>
    <id>https://web.dev/mediastreamtrack-insertable-media-processing/</id>
    <content type="text/html" mode="escaped">&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt; is part of the
&lt;a href=&quot;https://web.dev/fugu-status/&quot;&gt;capabilities project&lt;/a&gt; and is currently in development. This post will
be updated as the implementation progresses. &lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#background&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the context of the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API&quot; rel=&quot;noopener&quot;&gt;Media Capture and Streams API&lt;/a&gt;
the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt;
interface represents a single media track within a stream; typically, these are audio or video
tracks, but other track types may exist.
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaStream&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; objects consist of
zero or more &lt;code&gt;MediaStreamTrack&lt;/code&gt; objects, representing various audio or video tracks. Each
&lt;code&gt;MediaStreamTrack&lt;/code&gt; may have one or more channels. The channel represents the smallest unit of a
media stream, such as an audio signal associated with a given speaker, like left or right in a
stereo audio track.&lt;/p&gt;
&lt;h2 id=&quot;what-is-insertable-streams-for-mediastreamtrack&quot;&gt;What is insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt;? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#what-is-insertable-streams-for-mediastreamtrack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The core idea behind insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt; is to expose the content of a
&lt;code&gt;MediaStreamTrack&lt;/code&gt; as a collection of &lt;a href=&quot;https://web.dev/streams/&quot;&gt;streams&lt;/a&gt; (as defined by the WHATWG
&lt;a href=&quot;https://streams.spec.whatwg.org/&quot; rel=&quot;noopener&quot;&gt;Streams API&lt;/a&gt;). These streams can be manipulated to introduce new
components.&lt;/p&gt;
&lt;p&gt;Granting developers access to the video (or audio) stream directly allows them to apply
modifications directly to the stream. In contrast, realizing the same video manipulation task with
traditional methods requires developers to use intermediaries such as &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; elements. (For
details of this type of process, see, for example,
&lt;a href=&quot;https://html5doctor.com/video-canvas-magic/&quot; rel=&quot;noopener&quot;&gt;video + canvas = magic&lt;/a&gt;.)&lt;/p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#use-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Use cases for insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt; include, but are not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video conferencing gadgets like &amp;quot;funny hats&amp;quot; or virtual backgrounds.&lt;/li&gt;
&lt;li&gt;Voice processing like software &lt;a href=&quot;https://en.wikipedia.org/wiki/Vocoder&quot; rel=&quot;noopener&quot;&gt;vocoders&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;status&quot;&gt;Current status &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#status&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. Create explainer&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/w3c/mediacapture-transform/blob/main/explainer.md&quot; rel=&quot;noopener&quot;&gt;Complete&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. Create initial draft of specification&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://w3c.github.io/mediacapture-transform/&quot; rel=&quot;noopener&quot;&gt;In Progress&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3. Gather feedback &amp;amp; iterate on design&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#feedback&quot;&gt;In progress&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4. &lt;strong&gt;Origin trial&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.chrome.com/origintrials/#/view_trial/-7811493553674125311&quot; rel=&quot;noopener&quot;&gt;In progress&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5. Launch&lt;/td&gt;
&lt;td&gt;Not started&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;how-to-use-insertable-streams-for-mediastreamtrack&quot;&gt;How to use insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#how-to-use-insertable-streams-for-mediastreamtrack&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;enabling-support-during-the-origin-trial-phase&quot;&gt;Enabling support during the origin trial phase &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#enabling-support-during-the-origin-trial-phase&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting in Chrome 90, insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt; is available as part of the
WebCodecs origin trial in Chrome. The origin trial is expected to end in Chrome 91 (July 14, 2021).
If necessary, a separate origin trial will continue for insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Origin trials allow you to try new features and give feedback on their
usability, practicality, and effectiveness to the web standards community. For
more information, see the &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md&quot; rel=&quot;noopener&quot;&gt;Origin Trials Guide for Web Developers&lt;/a&gt;.
To sign up for this or another origin trial, visit the &lt;a href=&quot;https://developers.chrome.com/origintrials/#/trials/active&quot; rel=&quot;noopener&quot;&gt;registration page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;register-for-ot&quot;&gt;Register for the origin trial &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#register-for-ot&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/origintrials/#/view_trial/-7811493553674125311&quot; rel=&quot;noopener&quot;&gt;Request a token&lt;/a&gt; for your origin.&lt;/li&gt;
&lt;li&gt;Add the token to your pages. There are two ways to do that:
&lt;ul&gt;
&lt;li&gt;Add an &lt;code&gt;origin-trial&lt;/code&gt; &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag to the head of each page. For example,
this may look something like: &lt;br /&gt;
&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;origin-trial&amp;quot; content=&amp;quot;TOKEN_GOES_HERE&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you can configure your server, you can also add the token
using an &lt;code&gt;Origin-Trial&lt;/code&gt; HTTP header. The resulting response header should
look something like:&lt;br /&gt;
&lt;code&gt;Origin-Trial: TOKEN_GOES_HERE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;enabling-via-about:flags&quot;&gt;Enabling via about://flags &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#enabling-via-about:flags&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To experiment with insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt; locally, without an origin trial token,
enable the &lt;code&gt;#enable-experimental-web-platform-features&lt;/code&gt; flag in &lt;code&gt;about://flags&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;feature-detection&quot;&gt;Feature detection &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#feature-detection&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can feature-detect insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt; support as follows.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;MediaStreamTrackProcessor&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; window &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;MediaStreamTrackGenerator&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Insertable streams for `MediaStreamTrack` is supported.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;core-concepts&quot;&gt;Core concepts &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#core-concepts&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt; builds on concepts previously proposed by
&lt;a href=&quot;https://web.dev/webcodecs/&quot;&gt;WebCodecs&lt;/a&gt; and conceptually splits the &lt;code&gt;MediaStreamTrack&lt;/code&gt; into two
components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;MediaStreamTrackProcessor&lt;/code&gt;, which consumes a &lt;code&gt;MediaStreamTrack&lt;/code&gt; object&#39;s source and generates
a stream of media frames, specifically
&lt;a href=&quot;https://w3c.github.io/webcodecs/#videoframe-interface&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;VideoFrame&lt;/code&gt;&lt;/a&gt; or
&lt;a href=&quot;https://w3c.github.io/webcodecs/#audioframe-interface&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;AudioFrame&lt;/code&gt;&lt;/a&gt;) objects. You can think of
this as a track sink that is capable of exposing the unencoded frames from the track as a
&lt;code&gt;ReadableStream&lt;/code&gt;. It also exposes a control channel for signals going in the opposite direction.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MediaStreamTrackGenerator&lt;/code&gt;, which consumes a stream of media frames and exposes a
&lt;code&gt;MediaStreamTrack&lt;/code&gt; interface. It can be provided to any sink, just like a track from
&lt;code&gt;getUserMedia()&lt;/code&gt;. It takes media frames as input. In addition, it provides access to control
signals that are generated by the sink.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;the-mediastreamtrackprocessor&quot;&gt;The &lt;code&gt;MediaStreamTrackProcessor&lt;/code&gt; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#the-mediastreamtrackprocessor&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;MediaStreamTrackProcessor&lt;/code&gt; object exposes two properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readable&lt;/code&gt;: Allows reading the frames from the &lt;code&gt;MediaStreamTrack&lt;/code&gt;. If the track is a video track,
chunks read from &lt;code&gt;readable&lt;/code&gt; will be &lt;code&gt;VideoFrame&lt;/code&gt; objects. If the track is an audio track, chunks
read from &lt;code&gt;readable&lt;/code&gt; will be &lt;code&gt;AudioFrame&lt;/code&gt; objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writableControl&lt;/code&gt;: Allows sending control signals to the track. Control signals are objects of
type &lt;code&gt;MediaStreamTrackSignal&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;the-mediastreamtrackgenerator&quot;&gt;The &lt;code&gt;MediaStreamTrackGenerator&lt;/code&gt; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#the-mediastreamtrackgenerator&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;MediaStreamTrackGenerator&lt;/code&gt; object likewise exposes two properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;writable&lt;/code&gt;: A &lt;code&gt;WritableStream&lt;/code&gt; that allows writing media frames to the
&lt;code&gt;MediaStreamTrackGenerator&lt;/code&gt;, which is itself a &lt;code&gt;MediaStreamTrack&lt;/code&gt;. If the &lt;code&gt;kind&lt;/code&gt; attribute is
&lt;code&gt;&amp;quot;audio&amp;quot;&lt;/code&gt;, the stream accepts &lt;code&gt;AudioFrame&lt;/code&gt; objects and fails with any other type. If kind is
&lt;code&gt;&amp;quot;video&amp;quot;&lt;/code&gt;, the stream accepts &lt;code&gt;VideoFrame&lt;/code&gt; objects and fails with any other type. When a frame is
written to &lt;code&gt;writable&lt;/code&gt;, the frame&#39;s &lt;code&gt;close()&lt;/code&gt; method is automatically invoked, so that its media
resources are no longer accessible from JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readableControl&lt;/code&gt;: A &lt;code&gt;ReadableStream&lt;/code&gt; that allows reading control signals sent from any sinks
connected to the &lt;code&gt;MediaStreamTrackGenerator&lt;/code&gt;. Control signals are objects of type
&lt;code&gt;MediaStreamTrackSignal&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the &lt;code&gt;MediaStream&lt;/code&gt; model, apart from media, which flows from sources to sinks, there are also
control signals that flow in the opposite direction (i.e., from sinks to sources via the track). A
&lt;code&gt;MediaStreamTrackProcessor&lt;/code&gt; is a sink and it allows sending control signals to its track and source
via its &lt;code&gt;writableControl&lt;/code&gt; property. A &lt;code&gt;MediaStreamTrackGenerator&lt;/code&gt; is a track for which a custom
source can be implemented by writing media frames to its &lt;code&gt;writable&lt;/code&gt; field. Such a source can receive
control signals sent by sinks via its &lt;code&gt;readableControl&lt;/code&gt; property.&lt;/p&gt;
&lt;h3 id=&quot;bringing-it-all-together&quot;&gt;Bringing it all together &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#bringing-it-all-together&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The core idea is to create a processing chain as follows:&lt;/p&gt;
&lt;p&gt;Platform Track → Processor → Transform → Generator → Platform Sinks&lt;/p&gt;
&lt;p&gt;For a barcode scanner application, this chain would look as in the code sample below.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUserMedia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; video&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; videoTrack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getVideoTracks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; trackProcessor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaStreamTrackProcessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; track&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; videoTrack &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; trackGenerator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaStreamTrackGenerator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; kind&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;video&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transformer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransformStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;videoFrame&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; controller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; barcodes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;detectBarcodes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFrame&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newFrame &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;highlightBarcodes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFrame&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; barcodes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    videoFrame&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    controller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newFrame&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;trackProcessor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipeThrough&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transformer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipeTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;trackGenerator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;trackGenerator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readableControl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipeTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;trackProcessor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writableControl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This article barely scratches the surface of what is possible and going into the details
is way beyond the scope of this publication. For more examples, see the extended
&lt;a href=&quot;https://webrtc.github.io/samples/src/content/insertable-streams/video-processing/&quot; rel=&quot;noopener&quot;&gt;video processing demo&lt;/a&gt;
and the
&lt;a href=&quot;https://webrtc.github.io/samples/src/content/insertable-streams/audio-processing/&quot; rel=&quot;noopener&quot;&gt;audio processing demo&lt;/a&gt;
respectively. You can find the source code for both demos
&lt;a href=&quot;https://github.com/webrtc/samples/tree/gh-pages/src/content/insertable-streams&quot; rel=&quot;noopener&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#demo&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can see the &lt;a href=&quot;https://mediastreamtrack.glitch.me/&quot; rel=&quot;noopener&quot;&gt;QR code scanner demo&lt;/a&gt; from the section above
in action on a desktop or mobile browser. Hold a QR code in front of the camera and the app will
detect it and highlight it. You can see the application&#39;s source code
&lt;a href=&quot;https://glitch.com/edit/#!/mediastreamtrack?path=index.html%3A21%3A50&quot; rel=&quot;noopener&quot;&gt;on Glitch&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;QR code scanner running in desktop browser tab showing a detected and highlighted QR code on the phone the user holds in front of the laptop&amp;#x27;s camera.&quot; decoding=&quot;async&quot; height=&quot;481&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/8WbTDNrhLsU0El80frMBGE4eMCD3/VwysZHgnzswePs684xOJ.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;h2 id=&quot;security-and-privacy-considerations&quot;&gt;Security and Privacy considerations &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#security-and-privacy-considerations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The security of this API relies on existing mechanisms in the web platform. As data is exposed using
the &lt;code&gt;VideoFrame&lt;/code&gt; and &lt;code&gt;AudioFrame&lt;/code&gt; interfaces, the rules of those interfaces to deal with
origin-tainted data apply. For example, data from cross-origin resources cannot be accessed due to
existing restrictions on accessing such resources (e.g., it is not possible to access the pixels of
a cross-origin image or video element). In addition, access to media data from cameras, microphones,
or screens is subject to user authorization. The media data this API exposes is already available
through other APIs. In addition to the media data, this API exposes some control signals such as
requests for new frames. These signals are intended as hints and do not pose a significant security
risk.&lt;/p&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#feedback&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Chromium team wants to hear about your experiences with insertable streams for
&lt;code&gt;MediaStreamTrack&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;tell-us-about-the-api-design&quot;&gt;Tell us about the API design &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#tell-us-about-the-api-design&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Is there something about the API that does not work like you expected? Or are there missing methods
or properties that you need to implement your idea? Do you have a question or comment on the
security model? File a spec issue on the corresponding &lt;a href=&quot;https://github.com/w3c/mediacapture-transform/&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;, or add your thoughts
to an existing issue.&lt;/p&gt;
&lt;h3 id=&quot;report-a-problem-with-the-implementation&quot;&gt;Report a problem with the implementation &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#report-a-problem-with-the-implementation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Did you find a bug with Chromium&#39;s implementation? Or is the implementation different from the spec?
File a bug at &lt;a href=&quot;https://new.crbug.com/&quot; rel=&quot;noopener&quot;&gt;new.crbug.com&lt;/a&gt;. Be sure to include as much detail as you can,
simple instructions for reproducing, and enter &lt;code&gt;Blink&amp;gt;MediaStream&lt;/code&gt; in the &lt;strong&gt;Components&lt;/strong&gt; box.
&lt;a href=&quot;https://glitch.com/&quot; rel=&quot;noopener&quot;&gt;Glitch&lt;/a&gt; works great for sharing quick and easy repros.&lt;/p&gt;
&lt;h3 id=&quot;show-support-for-the-api&quot;&gt;Show support for the API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#show-support-for-the-api&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you planning to use insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt;? Your public support helps the
Chromium team prioritize features and shows other browser vendors how critical it is to support
them.&lt;/p&gt;
&lt;p&gt;Send a tweet to &lt;a href=&quot;https://twitter.com/ChromiumDev&quot; rel=&quot;noopener&quot;&gt;@ChromiumDev&lt;/a&gt; using the hashtag
&lt;a href=&quot;https://twitter.com/search?q=%23InsertableStreams&amp;amp;src=recent_search_click&amp;amp;f=live&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;#InsertableStreams&lt;/code&gt;&lt;/a&gt;
and let us know where and how you are using it.&lt;/p&gt;
&lt;h2 id=&quot;helpful-links&quot;&gt;Helpful links &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#helpful-links&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://w3c.github.io/mediacapture-transform/&quot; rel=&quot;noopener&quot;&gt;Spec draft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/mediacapture-transform/blob/main/explainer.md&quot; rel=&quot;noopener&quot;&gt;Explainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chromestatus.com/feature/5499415634640896&quot; rel=&quot;noopener&quot;&gt;ChromeStatus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crbug.com/1142955&quot; rel=&quot;noopener&quot;&gt;Chromium bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3ctag/design-reviews/issues/603&quot; rel=&quot;noopener&quot;&gt;TAG review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/mediacapture-transform/&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/mediastreamtrack-insertable-media-processing/#acknowledgements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The insertable streams for &lt;code&gt;MediaStreamTrack&lt;/code&gt; spec was written by
&lt;a href=&quot;https://github.com/alvestrand&quot; rel=&quot;noopener&quot;&gt;Harald Alvestrand&lt;/a&gt; and &lt;a href=&quot;https://github.com/guidou&quot; rel=&quot;noopener&quot;&gt;Guido Urdaneta&lt;/a&gt;.
This article was reviewed by Harald Alvestrand, &lt;a href=&quot;https://github/com/jpmedley&quot; rel=&quot;noopener&quot;&gt;Joe Medley&lt;/a&gt;,
&lt;a href=&quot;https://github.com/dogben&quot; rel=&quot;noopener&quot;&gt;Ben Wagner&lt;/a&gt;, &lt;a href=&quot;https://github.com/huibk&quot; rel=&quot;noopener&quot;&gt;Huib Kleinhout&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/beaufortfrancois&quot; rel=&quot;noopener&quot;&gt;François Beaufort&lt;/a&gt;. Hero image by
&lt;a href=&quot;https://unsplash.com/@cwmonty&quot; rel=&quot;noopener&quot;&gt;Chris Montgomery&lt;/a&gt; on
&lt;a href=&quot;https://unsplash.com/photos/smgTvepind4&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Thomas Steiner</name>
    </author>
  </entry>
  
  <entry>
    <title>Control camera pan, tilt, and zoom</title>
    <link href="https://web.dev/camera-pan-tilt-zoom/"/>
    <updated>2020-10-05T00:00:00Z</updated>
    <id>https://web.dev/camera-pan-tilt-zoom/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Room-scale video conferencing solutions deploy cameras with pan, tilt, and zoom
(PTZ) capabilities so that software can point the camera at meeting
participants. Starting in Chrome 87, the pan, tilt, and zoom features on
cameras are available to websites using media track constraints in
&lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt; and &lt;code&gt;MediaStreamTrack.applyConstraints()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;use&quot;&gt;Using the API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/camera-pan-tilt-zoom/#use&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;feature-detection&quot;&gt;Feature detection &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/camera-pan-tilt-zoom/#feature-detection&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Feature detection for hardware is different from what you&#39;re probably used to.
The presence of &lt;code&gt;&amp;quot;pan&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;tilt&amp;quot;&lt;/code&gt;, and &lt;code&gt;&amp;quot;zoom&amp;quot;&lt;/code&gt; constraint names in
&lt;code&gt;navigator.mediaDevices.getSupportedConstraints()&lt;/code&gt; tells you that the browser
supports the API to control camera PTZ, but not whether the camera hardware
supports it. As of Chrome 87, controlling camera PTZ is supported on
desktop, while Android still supports zoom only.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; supports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaDevices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSupportedConstraints&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;supports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pan &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; supports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tilt &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; supports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;zoom&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Browser supports camera PTZ.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;request&quot;&gt;Request camera PTZ access &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/camera-pan-tilt-zoom/#request&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A website is allowed to control camera PTZ only if the user has explicitly
granted the camera with PTZ permission through a prompt.&lt;/p&gt;
&lt;p&gt;To request camera PTZ access, call &lt;code&gt;navigator.mediaDevices.getUserMedia()&lt;/code&gt; with
the PTZ constraints as shown below. This will prompt the user to grant both
regular camera and camera with PTZ permissions.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of a camera PTZ user prompt in Chrome for macOS.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;382&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/WmkzmVeiplCoh3HesJS5.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Camera PTZ user prompt.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The returned promise will resolve with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaStream&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; object used to show the
camera video stream to the user. If the camera does not support PTZ, the user
will get a regular camera prompt.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// User is prompted to grant both camera and PTZ access in a single call.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// If camera doesn&#39;t support PTZ, it falls back to a regular camera prompt.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaDevices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserMedia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Website asks to control camera PTZ as well without altering the&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// current pan, tilt, and zoom settings.&lt;/span&gt;&lt;br /&gt;    video&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pan&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tilt&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; zoom&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Show camera video stream to user.&lt;/span&gt;&lt;br /&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;srcObject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// User denies prompt or matching media is not available.&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;A previously-granted camera permission, specifically one without PTZ access,
does not automatically gain PTZ access if it becomes available. This is true
even when the camera itself supports PTZ. The permission must be requested
again. Fortunately, you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API&quot; rel=&quot;noopener&quot;&gt;Permissions API&lt;/a&gt; to query and monitor the
status of PTZ permission.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; panTiltZoomPermissionStatus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;permissions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;camera&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    panTiltZoom&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;panTiltZoomPermissionStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;granted&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// User has granted access to the website to control camera PTZ.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  panTiltZoomPermissionStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;change&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// User has changed PTZ permission status.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;To know whether a Chromium-based browser supports PTZ for a camera, go to the
internal &lt;code&gt;about://media-internals&lt;/code&gt; page and check out the &amp;quot;Pan-Tilt-Zoom&amp;quot; column
in the &amp;quot;Video Capture&amp;quot; tab; &amp;quot;pan tilt&amp;quot; and &amp;quot;zoom&amp;quot; respectively mean the camera supports
the &amp;quot;PanTilt (Absolute)&amp;quot; and &amp;quot;Zoom (Absolute)&amp;quot; &lt;a href=&quot;https://www.usb.org/document-library/video-class-v15-document-set&quot; rel=&quot;noopener&quot;&gt;UVC controls&lt;/a&gt;. The &amp;quot;PanTilt (Relative)&amp;quot;
and &amp;quot;Zoom (Relative)&amp;quot; UVC controls are not supported in Chromium-based browsers.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of the internal page in Chrome OS to debug PTZ camera support.&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;481&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/vvhSqZboQoZZN9wBvoXq72wzGAf1/4EDS8fYYifXAUY6SBaiV.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Internal page to debug PTZ camera support.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;control&quot;&gt;Control camera PTZ &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/camera-pan-tilt-zoom/#control&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Manipulate camera PTZ capabilities and settings using the preview
&lt;code&gt;MediaStreamTrack&lt;/code&gt; from the &lt;code&gt;stream&lt;/code&gt; object obtained earlier.
&lt;code&gt;MediaStreamTrack.getCapabilities()&lt;/code&gt; returns a dictionary with the supported
capabilities and the ranges or allowed values. Correspondingly,
&lt;code&gt;MediaStreamTrack.getSettings()&lt;/code&gt; returns the current settings.&lt;/p&gt;
&lt;p&gt;Pan, tilt, and zoom capabilities and settings are available only if supported by
the camera and the user has granted PTZ permission to the camera.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; class=&quot;w-screenshot&quot;&gt;
    &lt;source src=&quot;https://storage.googleapis.com/web-dev-assets/camera-pan-tilt-zoom/ptz_h264.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Controlling Camera PTZ.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Call &lt;code&gt;videoTrack.applyConstraints()&lt;/code&gt; with the appropriate &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=1126045&quot; rel=&quot;noopener&quot;&gt;PTZ advanced
constraints&lt;/a&gt; to control camera pan, tilt, and zoom as shown in the example below.
The returned promise will resolve if successful. Otherwise it will reject if
either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the camera with PTZ permission is not granted.&lt;/li&gt;
&lt;li&gt;the camera hardware does not support the PTZ constraint.&lt;/li&gt;
&lt;li&gt;the page is not visible to the user. Use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API&quot; rel=&quot;noopener&quot;&gt;Page Visibility API&lt;/a&gt; to detect
page visibility changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Get video track capabilities and settings.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;videoTrack&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getVideoTracks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; capabilities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; videoTrack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCapabilities&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; settings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; videoTrack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSettings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Let the user control the camera pan motion if the camera supports it&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and PTZ access is granted.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pan&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; settings&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;input[type=range]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; capabilities&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;min&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; capabilities&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;max&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;step &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; capabilities&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;step&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; settings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pan&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; videoTrack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;applyConstraints&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; advanced&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pan&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;tilt&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; settings&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// similar for tilt...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; settings&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// similar for zoom...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;It is also possible to configure camera pan, tilt, and zoom by calling
&lt;code&gt;navigator.mediaDevices.getUserMedia()&lt;/code&gt; with some camera PTZ ideal constraint
values. This is handy when camera PTZ capabilities are known in advance. Note
that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API/Constraints#Specifying_a_range_of_values:~:text=mandatory&quot; rel=&quot;noopener&quot;&gt;mandatory constraints&lt;/a&gt; (min, max, exact) are not allowed here.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaDevices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserMedia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Website asks to reset known camera pan.&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pan&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; deviceId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; exact&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;myCameraDeviceId&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;playground&quot;&gt;Playground  &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/camera-pan-tilt-zoom/#playground&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can play with the API by running the &lt;a href=&quot;https://ptz.glitch.me/&quot; rel=&quot;noopener&quot;&gt;demo&lt;/a&gt; on Glitch. Be sure to &lt;a href=&quot;https://glitch.com/edit/#!/ptz?path=public%2Fscript.js&quot; rel=&quot;noopener&quot;&gt;check out
the source code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tip: If you don&#39;t have a camera that supports PTZ, you can &lt;a href=&quot;https://www.chromium.org/developers/how-tos/run-chromium-with-flags&quot; rel=&quot;noopener&quot;&gt;run Chrome with the
switch&lt;/a&gt; &lt;code&gt;--use-fake-device-for-media-stream&lt;/code&gt; to simulate one on your machine.
Enjoy!&lt;/p&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 420px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/ptz?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=script.js&amp;previewSize=100&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;ptz on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id=&quot;security&quot;&gt;Security Considerations  &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/camera-pan-tilt-zoom/#security&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The spec authors have designed and implemented this API using the core
including user control, transparency, and ergonomics. The ability to use this
API is primarily gated by the same permission model as the &lt;a href=&quot;https://w3c.github.io/mediacapture-main&quot; rel=&quot;noopener&quot;&gt;Media Capture and
Streams API&lt;/a&gt;. In response to a user prompt, the website is allowed to control
camera PTZ only when the page is visible to the user.&lt;/p&gt;
&lt;h2 id=&quot;helpful&quot;&gt;Helpful links &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/camera-pan-tilt-zoom/#helpful&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/mediacapture-image/blob/master/ptz-explainer.md&quot; rel=&quot;noopener&quot;&gt;PTZ Explainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://w3c.github.io/mediacapture-image/&quot; rel=&quot;noopener&quot;&gt;Specification draft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/mediacapture-image&quot; rel=&quot;noopener&quot;&gt;GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.chromestatus.com/feature/5570717087170560&quot; rel=&quot;noopener&quot;&gt;ChromeStatus entry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=934063&quot; rel=&quot;noopener&quot;&gt;Chrome tracking bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/camera-pan-tilt-zoom/#acknowledgements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article was reviewed by &lt;a href=&quot;https://github.com/jpmedley&quot; rel=&quot;noopener&quot;&gt;Joe Medley&lt;/a&gt; and &lt;a href=&quot;https://github.com/tomayac&quot; rel=&quot;noopener&quot;&gt;Thomas Steiner&lt;/a&gt;.
Thanks to &lt;a href=&quot;https://github.com/riju&quot; rel=&quot;noopener&quot;&gt;Rijubrata Bhaumik&lt;/a&gt; and &lt;a href=&quot;https://github.com/eehakkin&quot; rel=&quot;noopener&quot;&gt;Eero Häkkinen&lt;/a&gt; at Intel for their work on the
spec and the implementation.
Hero image by &lt;a href=&quot;https://unsplash.com/@wocintechchat&quot; rel=&quot;noopener&quot;&gt;Christina @ wocintechchat.com&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/lqPLmYD_MO8&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>François Beaufort</name>
    </author>
  </entry>
  
  <entry>
    <title>WebRTC is now a W3C and IETF standard</title>
    <link href="https://web.dev/webrtc-standard-announcement/"/>
    <updated>2021-01-26T00:00:00Z</updated>
    <id>https://web.dev/webrtc-standard-announcement/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;The process of defining a web standard is a lengthy process that ensures usefulness, consistency and
compatibility across browsers. Today &lt;a href=&quot;https://www.w3.org/2021/01/pressrelease-webrtc-rec.html.en&quot; rel=&quot;noopener&quot;&gt;the W3C and
IETF&lt;/a&gt; mark the completion of perhaps one
of the most important standards during the pandemic: WebRTC.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://codelabs.developers.google.com/codelabs/webrtc-web&quot; rel=&quot;noopener&quot;&gt;Real-time communication with WebRTC&lt;/a&gt;
codelab for a hands-on walkthrough of implementing WebRTC.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;history&quot;&gt;History &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webrtc-standard-announcement/#history&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebRTC is a platform giving browsers, mobile apps, and desktop apps real-time communication
capabilities, typically used for video calling. The platform consists of a comprehensive set of
technologies and standards. Google initiated the idea to create WebRTC in 2009, as an alternative to
Adobe Flash and desktop applications that couldn&#39;t run in the browser. The previous generation of
browser-based products were built on top of licensed proprietary technology. Various products were
built with this technology, including Hangouts. Google then acquired the companies it had been
licensing the technology from and made it available as the open source WebRTC project. This codebase
is integrated in Chrome and used by the majority of applications using WebRTC. Together with other
browser vendors and industry leaders such as Mozilla, Microsoft, Cisco, and Ericsson, the
standardization of WebRTC was kicked off in both the W3C and IETF.  In 2013, Mozilla and Google
&lt;a href=&quot;https://blog.chromium.org/2013/02/hello-firefox-this-is-chrome-calling.html&quot; rel=&quot;noopener&quot;&gt;demonstrated&lt;/a&gt; video
calling between their browsers. Through the evolution of the standard, many architectural
discussions had led to implementation differences across browsers and challenged compatibility and
interoperability. Most of these disagreements were ultimately settled as the standard became
finalized in the past years. The WebRTC specification is now accompanied with a
&lt;a href=&quot;https://wpt.fyi/results/webrtc?label=experimental&amp;amp;label=master&amp;amp;aligned&quot; rel=&quot;noopener&quot;&gt;full set of platform tests&lt;/a&gt;
and tools to address compatibility and browsers have largely adapted their implementations
accordingly. This brings an end to a challenging period where web developers had to continuously
adopt their services to different browser implementations and specification changes.&lt;/p&gt;
&lt;h2 id=&quot;architecture&quot;&gt;Architecture and functionality &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webrtc-standard-announcement/#architecture&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt; API&lt;/a&gt; is
the central part of the WebRTC specification. &lt;code&gt;RTCPeerConnection&lt;/code&gt; deals with connecting two
applications on different endpoints to communicate using a peer-to-peer protocol. The &lt;code&gt;PeerConnection&lt;/code&gt;
API interacts closely with
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;getUserMedia&lt;/code&gt;&lt;/a&gt; for
accessing camera and microphone, and
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;getDisplayMedia&lt;/code&gt;&lt;/a&gt; for
capturing screen content. WebRTC allows you to send and receive streams that include audio and/or
video content, as well as arbitrary binary data through the &lt;code&gt;DataChannel&lt;/code&gt;. The media functionality for
processing, encoding, and decoding audio and video provides the core of any WebRTC implementation.
WebRTC supports various audio codecs, with Opus being the most used and versatile. WebRTC
implementations are required to support both Google&#39;s free-to-use VP8 video codec and H.264 for
processing video. WebRTC connections are always encrypted, which is achieved through two existing
protocols: DTLS and SRTP.  WebRTC leans heavily on existing standards and technologies, from video
codecs (VP8,H264), network traversal (ICE), transport (RTP, SCTP), to media description protocols
(SDP). This is tied together in over 50 RFCs.&lt;/p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases: when it&#39;s a matter of milliseconds &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webrtc-standard-announcement/#use-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebRTC is widely used in time-critical applications such as remote surgery, system monitoring, and
remote control of autonomous cars, and voice or video calls built on UDP where buffering is not
possible. Nearly all browser-based video callings services from companies such as Google, Facebook,
Cisco, RingCentral, and Jitsi use WebRTC. Google Stadia and NVIDIA GeForce NOW use WebRTC to get the
stream of gameplay from the cloud to the web browser without perceivable delay.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Pandemic puts focus on video calling performance &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webrtc-standard-announcement/#performance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Over the past year, WebRTC has seen a 100X increase of usage in Chrome due to increased video
calling from within the browser. Recognizing that video calling has become a fundamental part of
many people&#39;s lives during the pandemic, browser vendors have begun to optimize the technologies
that video calling depends on. This was particularly important as resource demanding large meetings
and video effects in video meetings became more common when employees and students started to work
and study from home.  In the past year Chrome has become up to 30% more battery friendly for video
calling, with more optimizations to come for heavy usage scenarios. Mozilla, Apple, and Microsoft
all &lt;a href=&quot;https://www.youtube.com/watch?v=YZROn-WsyO4&quot; rel=&quot;noopener&quot;&gt;have made significant improvements&lt;/a&gt; in their
implementation of WebRTC through the pandemic, in particular in making sure they adhere to the now
formalized standard.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;The future of WebRTC &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webrtc-standard-announcement/#&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While WebRTC is now completed as a W3C standard, improvements continue. The new video codec AV1
which
&lt;a href=&quot;https://blog.google/products/duo/4-new-google-duo-features-help-you-stay-connected/&quot; rel=&quot;noopener&quot;&gt;saves up to 50% of bandwidth&lt;/a&gt;
is becoming available in WebRTC and web browsers. Continued improvements in the open source code
base are expected to further reduce delay and improve the quality of video that can be streamed.
&lt;a href=&quot;https://www.w3.org/TR/webrtc-nv-use-cases/&quot; rel=&quot;noopener&quot;&gt;WebRTC NV&lt;/a&gt; gathers the initiative to create
supplementary APIs to enable new use cases. These consist of extensions to existing APIs to give
more control over existing functionality such as &lt;a href=&quot;https://www.w3.org/TR/webrtc-svc/&quot; rel=&quot;noopener&quot;&gt;Scalable Video
Coding&lt;/a&gt; as well as APIs that give access to
&lt;a href=&quot;https://github.com/w3c/mediacapture-insertable-streams/blob/main/explainer.md&quot; rel=&quot;noopener&quot;&gt;lower-level components&lt;/a&gt;.
The latter gives more flexibility to web developers to innovate by integrating high-performance
custom WebAssembly components. With emerging 5G networks and demand for more interactive services,
we&#39;re expecting to see a continued increase of services building on top of WebRTC in the year to
come.&lt;/p&gt;
</content>
    <author>
      <name>Huib Kleinhout</name>
    </author>
  </entry>
  
  <entry>
    <title>Fast playback with audio and video preload</title>
    <link href="https://web.dev/fast-playback-with-preload/"/>
    <updated>2017-08-17T00:00:00Z</updated>
    <id>https://web.dev/fast-playback-with-preload/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Faster playback start means more people watching your video or listening to your
audio. &lt;a href=&quot;https://www.digitaltrends.com/web/buffer-rage/&quot; rel=&quot;noopener&quot;&gt;That&#39;s a known fact&lt;/a&gt;. In this article I&#39;ll explore
techniques you can use to accelerate your audio and video playback by actively
preloading resources depending on your use case.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;video controls=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; class=&quot;w-screenshot&quot;&gt;
    &lt;source src=&quot;https://storage.googleapis.com/web-dev-assets/fast-playback-with-preload/video-preload-hero.webm#t=1.1&quot; type=&quot;video/webm&quot; /&gt;
    &lt;source src=&quot;https://storage.googleapis.com/web-dev-assets/fast-playback-with-preload/video-preload-hero.mp4#t=1.1&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;
    &lt;p&gt;Credits: copyright Blender Foundation | &lt;a href=&quot;http://www.blender.org/&quot;&gt;www.blender.org &lt;/a&gt;.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I&#39;ll describe three methods of preloading media files, starting with their pros
and cons.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;
It&#39;s great...
      &lt;/th&gt;
      &lt;th&gt;
But...
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td rowspan=&quot;3&quot; style=&quot;white-space: nowrap&quot;&gt;
&lt;a href=&quot;https://web.dev/fast-playback-with-preload/#video_preload_attribute&quot;&gt;Video preload attribute&lt;/a&gt;
      &lt;/td&gt;
      &lt;td rowspan=&quot;3&quot;&gt;
Simple to use for a unique file hosted on a web server.
      &lt;/td&gt;
      &lt;td&gt;
Browsers may completely ignore the attribute.
      &lt;/td&gt;
    &lt;/tr&gt;&lt;tr&gt;
      &lt;td&gt;
Resource fetching starts when the HTML document has been completely loaded and
parsed.
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
Media Source Extensions (MSE) ignore the &lt;code&gt;preload&lt;/code&gt; attribute on media elements because the app is responsible for
providing media to MSE.
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td rowspan=&quot;2&quot; style=&quot;white-space: nowrap&quot;&gt;
&lt;a href=&quot;https://web.dev/fast-playback-with-preload/#link_preload&quot;&gt;Link preload&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
Forces the browser to make a request for a video resource without blocking
the document&#39;s &lt;code&gt;onload&lt;/code&gt; event.
      &lt;/td&gt;
      &lt;td&gt;
HTTP Range requests are not compatible.
      &lt;/td&gt;
    &lt;/tr&gt;&lt;tr&gt;
      &lt;td&gt;
Compatible with MSE and file segments.
      &lt;/td&gt;
      &lt;td&gt;
Should be used only for small media files (&amp;lt;5 MB) when fetching full resources.
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
&lt;a href=&quot;https://web.dev/fast-playback-with-preload/#manual_buffering&quot;&gt;Manual buffering&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
Full control
      &lt;/td&gt;
      &lt;td&gt;
Complex error handling is the website&#39;s responsibility.
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;video-preload-attribute&quot;&gt;Video preload attribute &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#video-preload-attribute&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the video source is a unique file hosted on a web server, you may want to
use the video &lt;code&gt;preload&lt;/code&gt; attribute to provide a hint to the browser as to &lt;a href=&quot;https://web.dev/video-and-source-tags/#preload&quot;&gt;how
much information or content to preload&lt;/a&gt;. This means &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API&quot; rel=&quot;noopener&quot;&gt;Media Source Extensions
(MSE)&lt;/a&gt; is not compatible with &lt;code&gt;preload&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Resource fetching will start only when the initial HTML document has been
completely loaded and parsed (e.g. the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event has fired)
while the very different &lt;code&gt;load&lt;/code&gt; event will be fired when resource
has actually been fetched.&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt=&quot;&quot; decoding=&quot;async&quot; height=&quot;234&quot; loading=&quot;lazy&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/De8tMHJUn3XyzFfosVLb.svg&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Setting the &lt;code&gt;preload&lt;/code&gt; attribute to &lt;code&gt;metadata&lt;/code&gt; indicates that the user is not
expected to need the video, but that fetching its metadata (dimensions, track
list, duration, and so on) is desirable. Note that starting in &lt;a href=&quot;https://developers.google.com/web/updates/2017/12/chrome-63-64-media-updates#media-preload-defaults-metadata&quot; rel=&quot;noopener&quot;&gt;Chrome
64&lt;/a&gt;, the default value for &lt;code&gt;preload&lt;/code&gt; is &lt;code&gt;metadata&lt;/code&gt;. (It was &lt;code&gt;auto&lt;/code&gt;
previously).&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;metadata&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;file.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;loadedmetadata&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bufferedSeconds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;bufferedSeconds&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds of video are ready to play.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Setting the &lt;code&gt;preload&lt;/code&gt; attribute to &lt;code&gt;auto&lt;/code&gt; indicates that the browser may cache
enough data that complete playback is possible without requiring a stop for
further buffering.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;auto&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;file.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;loadedmetadata&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bufferedSeconds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;bufferedSeconds&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds of video are ready to play.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;There are some caveats though. As this is just a hint, the browser may completely
ignore the &lt;code&gt;preload&lt;/code&gt; attribute. At the time of writing, here are some rules
applied in Chrome:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When &lt;a href=&quot;https://support.google.com/chrome/answer/2392284&quot; rel=&quot;noopener&quot;&gt;Data Saver&lt;/a&gt; is enabled, Chrome forces the &lt;code&gt;preload&lt;/code&gt; value to
&lt;code&gt;none&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In Android 4.3, Chrome forces the &lt;code&gt;preload&lt;/code&gt; value to &lt;code&gt;none&lt;/code&gt; due to an &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=612909&quot; rel=&quot;noopener&quot;&gt;Android
Bug&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;On a cellular connection (2G, 3G, and 4G), Chrome forces the &lt;code&gt;preload&lt;/code&gt; value to
&lt;code&gt;metadata&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#tips&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your website contains many video resources on the same domain, I would
recommend you set the &lt;code&gt;preload&lt;/code&gt; value to &lt;code&gt;metadata&lt;/code&gt; or define the &lt;code&gt;poster&lt;/code&gt;
attribute and set &lt;code&gt;preload&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt;. That way, you would avoid hitting
the maximum number of HTTP connections to the same domain (6 according to the
HTTP 1.1 spec) which can hang loading of resources. Note that this may also
improve page speed if videos aren&#39;t part of your core user experience.&lt;/p&gt;
&lt;h2 id=&quot;link-preload&quot;&gt;Link preload &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#link-preload&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As &lt;a href=&quot;https://developers.google.com/web/updates/2016/03/link-rel-preload&quot; rel=&quot;noopener&quot;&gt;covered&lt;/a&gt; in other &lt;a href=&quot;https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/&quot; rel=&quot;noopener&quot;&gt;articles&lt;/a&gt;, &lt;a href=&quot;https://w3c.github.io/preload/&quot; rel=&quot;noopener&quot;&gt;link preload&lt;/a&gt; is a declarative fetch that
allows you to force the browser to make a request for a resource without
blocking the &lt;code&gt;load&lt;/code&gt; event and while the page is downloading. Resources
loaded via &lt;code&gt;&amp;lt;link rel=&amp;quot;preload&amp;quot;&amp;gt;&lt;/code&gt; are stored locally in the browser, and are
effectively inert until they&#39;re explicitly referenced in the DOM, JavaScript,
or CSS.&lt;/p&gt;
&lt;p&gt;Preload is different from prefetch in that it focuses on current navigation and
fetches resources with priority based on their type (script, style, font,
video, audio, etc.). It should be used to warm up the browser cache for current
sessions.&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt=&quot;&quot; decoding=&quot;async&quot; height=&quot;234&quot; loading=&quot;lazy&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/g5fQKJMivvcsHajmMmi2.svg&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;preload-full-video&quot;&gt;Preload full video &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#preload-full-video&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&#39;s how to preload a full video on your website so that when your
JavaScript asks to fetch video content, it is read from cache as the resource
may have already been cached by the browser. If the preload request hasn&#39;t
finished yet, a regular network fetch will happen.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;link rel&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;preload&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;video&quot;&lt;/span&gt; href&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://cdn.com/small-file.mp4&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;video id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;video&quot;&lt;/span&gt; controls&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;video&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Later on, after some condition has been met, set video source to the&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// preloaded video URL.&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://cdn.com/small-file.mp4&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If preloaded video URL was already cached, playback started immediately.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;I would recommend using this only for small media files (less than 5MB).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Because the preloaded resource is going to be consumed by a video element in
the example, the &lt;code&gt;as&lt;/code&gt; preload link value is &lt;code&gt;video&lt;/code&gt;. If it were an audio
element, it would be &lt;code&gt;as=&amp;quot;audio&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;preload-the-first-segment&quot;&gt;Preload the first segment &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#preload-the-first-segment&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The example below shows how to preload the first segment of a video with &lt;code&gt;&amp;lt;link rel=&amp;quot;preload&amp;quot;&amp;gt;&lt;/code&gt; and use it with Media Source Extensions. If you&#39;re not familiar
with the MSE JavaScript API, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API&quot; rel=&quot;noopener&quot;&gt;MSE basics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the sake of simplicity, let&#39;s assume the entire video has been split into
smaller files like &lt;code&gt;file_1.webm&lt;/code&gt;, &lt;code&gt;file_2.webm&lt;/code&gt;, &lt;code&gt;file_3.webm&lt;/code&gt;, etc.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;preload&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://cdn.com/file_1.webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mediaSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mediaSource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sourceopen&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sourceOpen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sourceOpen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;revokeObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourceBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSourceBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video/webm; codecs=&quot;vp09.00.10.08&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If video is preloaded already, fetch will return immediately a response&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// from the browser cache (memory cache). Otherwise, it will perform a&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// regular network fetch.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://cdn.com/file_1.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;arrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Append the data into the new sourceBuffer.&lt;/span&gt;&lt;br /&gt;      sourceBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// TODO: Fetch file_2.webm when user starts playing video.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// TODO: Show &quot;Video is not available&quot; message to user.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;:
For cross-origin resources, make sure your CORS headers are set properly. As
we can&#39;t create an array buffer from an opaque response retrieved with
&lt;code&gt;fetch(videoFileUrl, { mode: &#39;no-cors&#39; })&lt;/code&gt;, we won&#39;t be able to feed any video
or audio element.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;support&quot;&gt;Support &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#support&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;See MDN&#39;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;Browser compatibility&lt;/a&gt; table to see which
browsers support preload. You may want to detect its availability with the
snippets below to adjust your performance metrics.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;preloadFullVideoSupported&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;as &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;video&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;as &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;video&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;preloadFirstSegmentSupported&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;as &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;as &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;manual-buffering&quot;&gt;Manual buffering &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#manual-buffering&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Cache&quot; rel=&quot;noopener&quot;&gt;Cache API&lt;/a&gt; and service workers, let&#39;s see
how to manually buffer a video with MSE. The example below assumes that your web
server supports HTTP &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;
requests but this would be pretty similar with file
segments. Note that some middleware libraries such as &lt;a href=&quot;https://github.com/google/shaka-player&quot; rel=&quot;noopener&quot;&gt;Google&#39;s Shaka
Player&lt;/a&gt;, &lt;a href=&quot;https://developer.jwplayer.com/&quot; rel=&quot;noopener&quot;&gt;JW Player&lt;/a&gt;, and &lt;a href=&quot;http://videojs.com/&quot; rel=&quot;noopener&quot;&gt;Video.js&lt;/a&gt; are
built to handle this for you.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mediaSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mediaSource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sourceopen&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sourceOpen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sourceOpen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;revokeObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourceBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSourceBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video/webm; codecs=&quot;vp09.00.10.08&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Fetch beginning of the video by setting the Range HTTP request header.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;file.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; range&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bytes=0-567139&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;arrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      sourceBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      sourceBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;updateend&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; updateEnd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Video is now ready to play!&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bufferedSeconds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;bufferedSeconds&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds of video are ready to play.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Fetch the next segment of video when user starts playing the video.&lt;/span&gt;&lt;br /&gt;    video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;playing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fetchNextSegment&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchNextSegment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;file.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; range&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bytes=567140-1196488&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;arrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourceBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sourceBuffers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      sourceBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// TODO: Fetch further segment and append it.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;considerations&quot;&gt;Considerations &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#considerations&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As you&#39;re now in control of the entire media buffering experience, I suggest you
consider the device&#39;s battery level, the &amp;quot;Data-Saver Mode&amp;quot; user preference and
network information when thinking about preloading.&lt;/p&gt;
&lt;h4 id=&quot;battery-awareness&quot;&gt;Battery awareness &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#battery-awareness&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Take into account the battery level of users&#39; devices before thinking
about preloading a video. This will preserve battery life when the power level
is low.&lt;/p&gt;
&lt;p&gt;Disable preload or at least preload a lower resolution video when the
device is running out of battery.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;getBattery&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBattery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;battery&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If battery is charging or battery level is high enough&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;battery&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;charging &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; battery&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// TODO: Preload the first segment of a video.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;detect-&amp;quot;data-saver&amp;quot;&quot;&gt;Detect &amp;quot;Data-Saver&amp;quot; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#detect-%22data-saver%22&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Use the &lt;code&gt;Save-Data&lt;/code&gt; client hint request header to deliver fast and light
applications to users who have opted-in to &amp;quot;data savings&amp;quot; mode in their
browser. By identifying this request header, your application can customize and
deliver an optimized user experience to cost- and performance-constrained
users.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/save-data&quot; rel=&quot;noopener&quot;&gt;Delivering Fast and Light Applications with Save-Data&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;h4 id=&quot;smart-loading-based-on-network-information&quot;&gt;Smart loading based on network information &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#smart-loading-based-on-network-information&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You may want to check &lt;code&gt;navigator.connection.type&lt;/code&gt; prior to preloading. When
it&#39;s set to &lt;code&gt;cellular&lt;/code&gt;, you could prevent preloading and advise users that
their mobile network operator might be charging for the bandwidth, and only start
automatic playback of previously cached content.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;connection&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cellular&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// TODO: Prompt user before preloading video&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// TODO: Preload the first segment of a video.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Check out the &lt;a href=&quot;https://googlechrome.github.io/samples/network-information/&quot; rel=&quot;noopener&quot;&gt;Network Information sample&lt;/a&gt; to learn how to react to network
changes as well.&lt;/p&gt;
&lt;h3 id=&quot;pre-cache-multiple-first-segments&quot;&gt;Pre-cache multiple first segments &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#pre-cache-multiple-first-segments&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now what if I want to speculatively pre-load some media content without
knowing which piece of media the user will eventually pick? If the user is on a
web page that contains 10 videos, we probably have enough memory to fetch one
segment file from each but we should definitely not create 10 hidden &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;
elements and 10 &lt;code&gt;MediaSource&lt;/code&gt; objects and start feeding that data.&lt;/p&gt;
&lt;p&gt;The two-part example below shows you how to pre-cache multiple first segments of
video using the powerful and easy-to-use &lt;a href=&quot;https://web.dev/cache-api-quick-guide/&quot;&gt;Cache API&lt;/a&gt;. Note that something similar
can be achieved with IndexedDB as well. We&#39;re not using service workers yet as
the Cache API is also accessible from the &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;
&lt;h4 id=&quot;fetch-and-cache&quot;&gt;Fetch and cache &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#fetch-and-cache&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; videoFileUrls &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;bat_video_file_1.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;cow_video_file_1.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;dog_video_file_1.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;fox_video_file_1.webm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Let&#39;s create a video pre-cache and store all first segments of videos inside.&lt;/span&gt;&lt;br /&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video-pre-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;videoFileUrl&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchAndCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchAndCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Check first if video is in the cache.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cacheResponse&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Let&#39;s return cached response if video is already in the cache.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheResponse&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cacheResponse&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Otherwise, fetch the video from the network.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;networkResponse&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Add the response to the cache and return network response in parallel.&lt;/span&gt;&lt;br /&gt;      cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; networkResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; networkResponse&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Note that if I were to use HTTP &lt;code&gt;Range&lt;/code&gt; requests, I would have to manually recreate
a &lt;code&gt;Response&lt;/code&gt; object as the Cache API doesn&#39;t support &lt;code&gt;Range&lt;/code&gt; responses &lt;a href=&quot;https://github.com/whatwg/fetch/issues/144&quot; rel=&quot;noopener&quot;&gt;yet&lt;/a&gt;. Be
mindful that calling &lt;code&gt;networkResponse.arrayBuffer()&lt;/code&gt; fetches the whole content
of the response at once into renderer memory, which is why you may want to use
small ranges.&lt;/p&gt;
&lt;p&gt;For reference, I&#39;ve modified part of the example above to save HTTP Range
requests to the video precache.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; range&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bytes=0-567139&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;networkResponse&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; networkResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;arrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Add the response to the cache and return network response in parallel.&lt;/span&gt;&lt;br /&gt;      cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h4 id=&quot;play-video&quot;&gt;Play video &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#play-video&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When a user clicks a play button, we&#39;ll fetch the first segment of video
available in the Cache API so that playback starts immediately if available.
Otherwise, we&#39;ll simply fetch it from the network. Keep in mind that browsers
and users may decide to clear the &lt;a href=&quot;https://web.dev/storage-for-the-web/#eviction&quot;&gt;Cache&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As seen before, we use MSE to feed that first segment of video to the video
element.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onPlayButtonClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;videoFileUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Used to be able to play video later.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video-pre-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchAndCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoFileUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Defined above.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;arrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mediaSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mediaSource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sourceopen&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sourceOpen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sourceOpen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;revokeObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourceBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mediaSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSourceBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video/webm; codecs=&quot;vp09.00.10.08&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      sourceBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// TODO: Fetch the rest of the video when user starts playing video.&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;:
For cross-origin resources, make sure your CORS headers are set properly. As
we can&#39;t create an array buffer from an opaque response retrieved with
&lt;code&gt;fetch(videoFileUrl, { mode: &#39;no-cors&#39; })&lt;/code&gt;, we won&#39;t be able to feed any video
or audio element.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;create-range-responses-with-a-service-worker&quot;&gt;Create Range responses with a service worker &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fast-playback-with-preload/#create-range-responses-with-a-service-worker&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now what if you have fetched an entire video file and saved it in
the Cache API? When the browser sends an HTTP &lt;code&gt;Range&lt;/code&gt; request, you certainly don&#39;t
want to bring the entire video into renderer memory as the Cache API doesn&#39;t
support &lt;code&gt;Range&lt;/code&gt; responses &lt;a href=&quot;https://github.com/whatwg/fetch/issues/144&quot; rel=&quot;noopener&quot;&gt;yet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So let me show how to intercept these requests and return a customized &lt;code&gt;Range&lt;/code&gt;
response from a service worker.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadFromCacheOrFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadFromCacheOrFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Search through all available caches for this request.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; caches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Fetch from network if it&#39;s not already in the cache.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Note that we may want to add the response to the cache and return&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// network response in parallel as well.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Browser sends a HTTP Range request. Let&#39;s provide one reconstructed&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// manually from the cache.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;range&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Get start position from Range request header.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^bytes\=(\d+)\-&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;range&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;206&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          statusText&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Partial Content&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; slicedResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        slicedResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Content-Range&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bytes &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pos &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        slicedResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;X-From-Cache&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; slicedResponse&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;It is important to note that I used &lt;code&gt;response.blob()&lt;/code&gt; to recreate this sliced
response as this simply gives me a handle to the file while
&lt;code&gt;response.arrayBuffer()&lt;/code&gt; brings the entire file into renderer memory.&lt;/p&gt;
&lt;p&gt;My custom &lt;code&gt;X-From-Cache&lt;/code&gt; HTTP header can be used to know whether this request
came from the cache or from the network. It can be used by a player such as
&lt;a href=&quot;https://github.com/google/shaka-player/blob/master/docs/tutorials/service-worker.md&quot; rel=&quot;noopener&quot;&gt;ShakaPlayer&lt;/a&gt; to ignore the response time as an indicator of
network speed.&lt;/p&gt;
&lt;div class=&quot;youtube&quot;&gt;  &lt;lite-youtube videoid=&quot;f8EGZa32Mts&quot;&gt;  &lt;/lite-youtube&gt;&lt;/div&gt;
&lt;p&gt;Have a look at the official &lt;a href=&quot;https://github.com/GoogleChrome/sample-media-pwa&quot; rel=&quot;noopener&quot;&gt;Sample Media App&lt;/a&gt; and in particular its
&lt;a href=&quot;https://github.com/GoogleChrome/sample-media-pwa/blob/master/src/client/scripts/ranged-response.js&quot; rel=&quot;noopener&quot;&gt;ranged-response.js&lt;/a&gt; file for a complete solution for how to handle &lt;code&gt;Range&lt;/code&gt;
requests.&lt;/p&gt;
</content>
    <author>
      <name>François Beaufort</name>
    </author>
  </entry>
  
  <entry>
    <title>Video processing with WebCodecs</title>
    <link href="https://web.dev/webcodecs/"/>
    <updated>2020-10-13T00:00:00Z</updated>
    <id>https://web.dev/webcodecs/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Modern web technologies provide ample ways to work with video.
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API&quot; rel=&quot;noopener&quot;&gt;Media Stream API&lt;/a&gt;,
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API&quot; rel=&quot;noopener&quot;&gt;Media Recording API&lt;/a&gt;,
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API&quot; rel=&quot;noopener&quot;&gt;Media Source API&lt;/a&gt;,
and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API&quot; rel=&quot;noopener&quot;&gt;WebRTC API&lt;/a&gt; add up
to a rich tool set for recording, transferring, and playing video streams.
While solving certain high-level tasks, these APIs don&#39;t let web
programmers work with individual components of a video stream such as frames
and unmuxed chunks of encoded video or audio.
To get low-level access to these basic components, developers have been using
WebAssembly to bring &lt;a href=&quot;https://en.wikipedia.org/wiki/Video_codec&quot; rel=&quot;noopener&quot;&gt;video and audio
codecs&lt;/a&gt; into the browser. But given
that modern browsers already ship with a variety of codecs (which are often
accelerated by hardware), repackaging them as WebAssembly seems like a waste of
human and computer resources.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wicg.github.io/web-codecs/&quot; rel=&quot;noopener&quot;&gt;WebCodecs API&lt;/a&gt; eliminates this inefficiency
by giving programmers a way to use media components that are already present in
the browser. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video and audio decoders&lt;/li&gt;
&lt;li&gt;Video and audio encoders&lt;/li&gt;
&lt;li&gt;Raw video frames&lt;/li&gt;
&lt;li&gt;Image decoders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The WebCodecs API is useful for web applications that require full control over the
way media content is processed, such as video editors, video conferencing, video
streaming, etc.&lt;/p&gt;
&lt;h2 id=&quot;status&quot;&gt;Current status &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#status&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. Create explainer&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/WICG/web-codecs/blob/master/explainer.md&quot; rel=&quot;noopener&quot;&gt;Complete&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. Create initial draft of specification&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://wicg.github.io/web-codecs/&quot; rel=&quot;noopener&quot;&gt;Complete&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3. Gather feedback &amp;amp; iterate on design&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/webcodecs/#feedback&quot;&gt;&lt;strong&gt;In Progress&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4. Origin trial&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/webcodecs/#ot&quot;&gt;&lt;strong&gt;In Progress&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5. Launch&lt;/td&gt;
&lt;td&gt;Not started&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;video-processing-workflow&quot;&gt;Video processing workflow &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#video-processing-workflow&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Frames are the centerpiece in video processing. Thus in WebCodecs most classes
either consume or produce frames. Video encoders convert frames into encoded
chunks. Video decoders do the opposite. Track readers turn video tracks into a
sequence of frames. By design all these transformations happen asynchronously.
WebCodecs API tries to keep the web responsive by keeping the heavy lifting of
video processing off the main thread.&lt;/p&gt;
&lt;p&gt;Currently in WebCodecs the only way to show a frame on the page is to convert it
into an
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ImageBitmap&lt;/code&gt;&lt;/a&gt;
and either draw the bitmap on a canvas or convert it into a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;WebGLTexture&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;webcodecs-in-action&quot;&gt;WebCodecs in action &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#webcodecs-in-action&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;encoding&quot;&gt;Encoding &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#encoding&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It all starts with a &lt;code&gt;VideoFrame&lt;/code&gt;. There are two ways to convert existing
pictures into &lt;code&gt;VideoFrame&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;The first is to create a frame directly from an
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ImageBitmap&lt;/code&gt;&lt;/a&gt;.
Just call the &lt;code&gt;VideoFrame()&lt;/code&gt; constructor and give it a bitmap and a presentation
timestamp.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cnv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;canvas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// draw something on the canvas&lt;/span&gt;&lt;br /&gt;…&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bitmap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createImageBitmap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cnv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; frame_from_bitmap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VideoFrame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bitmap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; timestamp&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The path from ImageBitmap to the network or to storage.&quot; decoding=&quot;async&quot; height=&quot;291&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/7LNdjNlwCUB1csF9DDl8.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;The path from &lt;code&gt;ImageBitmap&lt;/code&gt; to the network or to storage.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The second is to use &lt;code&gt;VideoTrackReader&lt;/code&gt; to set a function that will be called
each time a new frame appears in a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt;.
This is useful when you need to capture a video stream from a camera or the
screen.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; frames_from_stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaDevices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserMedia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; … &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; vtr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VideoTrackReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getVideoTracks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;vtr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  frames_from_stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frame&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The path from MediaStreamTrack to the network or to storage.&quot; decoding=&quot;async&quot; height=&quot;389&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/admin/f3IxThFMnEnfj4aBExHk.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;The path from &lt;code&gt;MediaStreamTrack&lt;/code&gt; to the network or to storage.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;No matter where they are coming from, frames can be encoded into
&lt;code&gt;EncodedVideoChunk&lt;/code&gt; objects with a &lt;code&gt;VideoEncoder&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before encoding, &lt;code&gt;VideoEncoder&lt;/code&gt; needs to be given two JavaScript objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Init dictionary with two functions for handling encoded chunks and
errors. These functions are developer-defined and can&#39;t be changed after
they&#39;re passed to the &lt;code&gt;VideoEncoder&lt;/code&gt; constructor.&lt;/li&gt;
&lt;li&gt;Encoder configuration object, which contains parameters for the output
video stream. You can change these parameters later  by calling &lt;code&gt;configure()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; init &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  output&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; handleChunk&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  codec&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;vp8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  width&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  height&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  bitrate&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8_000_000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;// 8 Mbps&lt;/span&gt;&lt;br /&gt;  framerate&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; encoder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VideoEncoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;init&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;encoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;After the encoder has been set up,  it&#39;s ready to start accepting frames. When
frames are coming from a media stream, the callback given to &lt;code&gt;VideoTrackReader.start()&lt;/code&gt; will pump frames into
the encoder, periodically inserting
&lt;a href=&quot;https://en.wikipedia.org/wiki/Key_frame#Video_compression&quot; rel=&quot;noopener&quot;&gt;keyframes&lt;/a&gt; and
checking that the encoder is not overwhelmed with incoming frames.
Both &lt;code&gt;configure()&lt;/code&gt; and &lt;code&gt;encode()&lt;/code&gt; return immediately without waiting for the
actual work to complete. It allows several frames to queue for encoding at the
same time. But it makes error reporting somewhat cumbersome. Errors are reported
either by immediately throwing exceptions or by calling the &lt;code&gt;error()&lt;/code&gt;
callback. Some errors are easy to detect immediately, others become evident
only during encoding. If encoding completes successfully the &lt;code&gt;output()&lt;/code&gt;
callback is called with a new encoded chunk as an argument.
Another important detail here is that &lt;code&gt;encode()&lt;/code&gt; consumes the frame, if the
frame is needed later (for example, to encode with another encoder) it needs to
be duplicated by calling &lt;code&gt;clone()&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; frame_counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pending_outputs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; vtr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VideoTrackReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getVideoTracks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;vtr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pending_outputs &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Too many frames in flight, encoder is overwhelmed&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// let&#39;s drop this frame.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  frame_counter&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  pending_outputs&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; insert_keyframe &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frame_counter &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  encoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frame&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; keyFrame&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; insert_keyframe &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Finally it&#39;s time to finish encoding code by writing a function that handles
chunks of encoded video as they come out of the encoder.
Usually this function would be sending data chunks over the network or &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiplexing#Video_processing&quot; rel=&quot;noopener&quot;&gt;muxing
&lt;/a&gt;them into a media
container for storage.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleChunk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chunk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// actual bytes of encoded data&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; timestamp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; chunk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timestamp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;// media time in microseconds&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; is_key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; chunk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;// can also be &#39;delta&#39;&lt;/span&gt;&lt;br /&gt;  pending_outputs&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/upload_chunk?timestamp=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;timestamp&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;amp;type=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;chunk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;application/octet-stream&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;If at some point you&#39;d need to make sure that all pending encoding requests have
been completed, you can call &lt;code&gt;flush()&lt;/code&gt; and wait for its promise.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; encoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;decoding&quot;&gt;Decoding &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#decoding&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Setting up a &lt;code&gt;VideoDecoder&lt;/code&gt; is similar to what&#39;s been done for the
&lt;code&gt;VideoEncoder&lt;/code&gt;: two functions are passed when the decoder is created, and codec
parameters are given to &lt;code&gt;configure()&lt;/code&gt;. The set of codec parameters can vary from
codec to codec, for example for H264 you currently need to specify a
&lt;a href=&quot;https://wicg.github.io/web-codecs/#dom-audiodecoderconfig-description&quot; rel=&quot;noopener&quot;&gt;binary blob&lt;/a&gt;
with AVCC extradata.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; init &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  output&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; handleFrame&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  codec&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;vp8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  codedWidth&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  codedHeight&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;480&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; decoder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VideoDecoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;init&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;decoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Once the decoder is initialized, you can start feeding it with
&lt;code&gt;EncodedVideoChunk&lt;/code&gt; objects. Creating a chunk just takes a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/BufferSource&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;BufferSource&lt;/code&gt;&lt;/a&gt;of
data and a frame timestamp in microseconds. Any chunks emitted by the encoder
are ready for the decoder as is, although it&#39;s hard to imagine a real-world use
case for decoding newly encoded chunks (except for the demo below). All of the things
said above about the asynchronous nature of encoder&#39;s methods are equally true
for decoders.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; responses &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;downloadVideoChunksFromServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timestamp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; responses&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; chunk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EncodedVideoChunk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    timestamp&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; responses&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timestamp&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; responses&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  decoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chunk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; decoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The path from the network or storage to an ImageBitmap.&quot; decoding=&quot;async&quot; height=&quot;295&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 675px) 675px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/admin/dOekoTYsgE2j6WrHi4TV.png?auto=format&amp;w=1350 1350w&quot; width=&quot;675&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;The path from the network or storage to an &lt;code&gt;ImageBitmap&lt;/code&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now it&#39;s time to show how a freshly decoded frame can be shown on the page. It&#39;s
better to make sure that the decoder output callback  (&lt;code&gt;handleFrame()&lt;/code&gt;)
quickly returns. In the example below, it only adds a frame to the queue of
frames ready for rendering.
Rendering happens separately, and consists of three steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Converting the &lt;code&gt;VideoFrame&lt;/code&gt; into an
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ImageBitmap&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Waiting for the right time to show the frame.&lt;/li&gt;
&lt;li&gt;Drawing the image on the canvas.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once a frame is no longer needed, call &lt;code&gt;destroy()&lt;/code&gt; to release underlying memory
before the garbage collector gets to it, this will reduce the average amount of
memory used by the web application.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cnv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;canvas_to_render&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ctx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cnv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;2d&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; alpha&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ready_frames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; underflow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; time_base &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleFrame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ready_frames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frame&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;underflow&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;render_frame&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;time_ms&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; time_ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calculateTimeTillNextFrame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time_base &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    time_base &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; performance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; media_time &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; performance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; time_base&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timestamp &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; media_time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render_frame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ready_frames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    underflow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; frame &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ready_frames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  underflow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bitmap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; frame&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createImageBitmap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Based on the frame&#39;s timestamp calculate how much of real time waiting&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// is needed before showing the next frame.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; time_till_next_frame &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calculateTimeTillNextFrame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frame&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timestamp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time_till_next_frame&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;drawImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bitmap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Immediately schedule rendering of the next frame&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;render_frame&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  frame&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;demo&quot;&gt;Demo &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#demo&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The demo below shows two canvases, the first one is animated at the refresh rate
of your display, the second one shows a sequence of frames captured by
&lt;code&gt;VideoTrackReader&lt;/code&gt; at 30 FPS, encoded  and decoded using WebCodecs API.&lt;/p&gt;
&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 420px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/webcodecs-blogpost-demo?attributionHidden=true&amp;sidebarCollapsed=true&amp;previewSize=100&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;webcodecs-blogpost-demo on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id=&quot;feature-detection&quot;&gt;Feature detection &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#feature-detection&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To check for WebCodecs support:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;VideoEncoder&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// WebCodecs API is supported.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;use&quot;&gt;Using the WebCodecs API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#use&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;enabling-via-a-command-line-flag&quot;&gt;Enabling via a command line flag &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#enabling-via-a-command-line-flag&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To experiment with the WebCodecs API locally on all desktop platforms, without an
origin trial token, start Chrome with a command line flag:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;--enable-blink-features&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;WebCodecs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;enabling-support-during-the-origin-trial-phase&quot;&gt;Enabling support during the origin trial phase &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#enabling-support-during-the-origin-trial-phase&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The WebCodecs API is available on all desktop platforms (Chrome OS, Linux, macOS,
and Windows) as an origin trial in Chrome 86. The origin trial is expected
to end just before Chrome 88 moves to stable in February 2021. The API can
also be enabled using a flag.&lt;/p&gt;
&lt;p&gt;Origin trials allow you to try new features and give feedback on their
usability, practicality, and effectiveness to the web standards community. For
more information, see the &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md&quot; rel=&quot;noopener&quot;&gt;Origin Trials Guide for Web Developers&lt;/a&gt;.
To sign up for this or another origin trial, visit the &lt;a href=&quot;https://developers.chrome.com/origintrials/#/trials/active&quot; rel=&quot;noopener&quot;&gt;registration page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;ot&quot;&gt;Register for the origin trial &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#ot&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.chrome.com/origintrials/#/view_trial/-7811493553674125311&quot; rel=&quot;noopener&quot;&gt;Request a token&lt;/a&gt; for your origin.&lt;/li&gt;
&lt;li&gt;Add the token to your pages. There are two ways to do that:
&lt;ul&gt;
&lt;li&gt;Add an &lt;code&gt;origin-trial&lt;/code&gt; &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag to the head of each page. For example,
this may look something like: &lt;br /&gt;
&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;origin-trial&amp;quot; content=&amp;quot;TOKEN_GOES_HERE&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you can configure your server, you can also add the token
using an &lt;code&gt;Origin-Trial&lt;/code&gt; HTTP header. The resulting response header should
look something like:&lt;br /&gt;
&lt;code&gt;Origin-Trial: TOKEN_GOES_HERE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#feedback&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Chrome team wants to hear about your experiences with the Idle Detection API.&lt;/p&gt;
&lt;h3 id=&quot;tell-us-about-the-api-design&quot;&gt;Tell us about the API design &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#tell-us-about-the-api-design&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Is there something about the API that doesn&#39;t work like you expected? Or are
there missing methods or properties that you need to implement your idea? Have a
question or comment on the security model? File a spec issue on the
corresponding &lt;a href=&quot;https://github.com/WICG/web-codecs/issues&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;, or add
your thoughts to an existing issue.&lt;/p&gt;
&lt;h3 id=&quot;report-a-problem-with-the-implementation&quot;&gt;Report a problem with the implementation &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#report-a-problem-with-the-implementation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Did you find a bug with Chrome&#39;s implementation? Or is the implementation
different from the spec? File a bug at &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/entry?components=Blink%3EMedia%3EWebCodecs&quot; rel=&quot;noopener&quot;&gt;new.crbug.com&lt;/a&gt;.
Be sure to include as much detail as you can, simple instructions for
reproducing, and enter &lt;code&gt;Blink&amp;gt;Media&amp;gt;WebCodecs&lt;/code&gt; in the &lt;strong&gt;Components&lt;/strong&gt; box.
&lt;a href=&quot;https://glitch.com/&quot; rel=&quot;noopener&quot;&gt;Glitch&lt;/a&gt; works great for sharing quick and easy repros.&lt;/p&gt;
&lt;h3 id=&quot;show-support-for-the-api&quot;&gt;Show support for the API &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webcodecs/#show-support-for-the-api&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you planning to use the WebCodecs API? Your public support helps the
Chrome team to prioritize features and shows other browser vendors how critical
it is to support them.&lt;/p&gt;
&lt;p&gt;Send emails to &lt;a href=&quot;mailto:media-dev@chromium.org&quot; rel=&quot;noopener&quot;&gt;media-dev@chromium.org&lt;/a&gt; or send a tweet
to [@ChromiumDev][cr-dev-twitter] using the hashtag
&lt;a href=&quot;https://twitter.com/search?q=%23WebCodecs&amp;amp;src=typed_query&amp;amp;f=live&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;#WebCodecs&lt;/code&gt;&lt;/a&gt;
and let us know where and how you&#39;re using it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://unsplash.com/photos/8eQOBtgn9Qo&quot; rel=&quot;noopener&quot;&gt;Hero image&lt;/a&gt; by
&lt;a href=&quot;https://unsplash.com/@dmjdenise&quot; rel=&quot;noopener&quot;&gt;Denise Jans&lt;/a&gt;
on &lt;a href=&quot;https://unsplash.com/&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Eugene Zemtsov</name>
    </author>
  </entry>
  
  <entry>
    <title>Handling range requests in a service worker</title>
    <link href="https://web.dev/sw-range-requests/"/>
    <updated>2020-10-06T00:00:00Z</updated>
    <id>https://web.dev/sw-range-requests/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Some HTTP requests contain a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Range:&lt;/code&gt; header&lt;/a&gt;, indicating that only a portion of the full resource should be returned. They&#39;re commonly used for streaming audio or video content to allow smaller chunks of media to be loaded on demand, instead of requesting the entirety of the remote file all at once.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers&quot; rel=&quot;noopener&quot;&gt;service worker&lt;/a&gt; is JavaScript code that sits in between your web app and the network, potentially intercepting outgoing network requests and generating responses for them.&lt;/p&gt;
&lt;p&gt;Historically, range requests and service workers haven&#39;t played nicely together. It&#39;s been necessary to take special steps to avoid bad outcomes in your service worker. Fortunately, this is starting to change. In browsers exhibiting the correct behavior, range requests will &amp;quot;just work&amp;quot; when passing through a service worker.&lt;/p&gt;
&lt;h2 id=&quot;what&#39;s-the-issue&quot;&gt;What&#39;s the issue? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/sw-range-requests/#what&#39;s-the-issue&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Consider a service worker with the following &lt;code&gt;fetch&lt;/code&gt; event listener, which takes every incoming request and passes it to the network:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The Range: header will not pass through in&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// browsers that behave incorrectly.&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This sort of trivial &lt;code&gt;fetch&lt;/code&gt; event listener should &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#never_use_a_passthrough_fetch_handler&quot; rel=&quot;noopener&quot;&gt;normally be avoided&lt;/a&gt;; it&#39;s used here for illustrative purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In browsers with the incorrect behavior, if &lt;code&gt;event.request&lt;/code&gt; included a &lt;code&gt;Range:&lt;/code&gt; header, that header would be silently dropped. The request that was received by the remote server would not include &lt;code&gt;Range:&lt;/code&gt; at all. This would not necessarily &amp;quot;break&amp;quot; anything, since a server is &lt;em&gt;technically&lt;/em&gt; allowed to return the full response body, with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;200&lt;/code&gt; status code&lt;/a&gt;, even when a &lt;code&gt;Range:&lt;/code&gt; header is present in the original request. But it would result in more data being transferred than is strictly needed from the perspective of the browser.&lt;/p&gt;
&lt;p&gt;Developers who were aware of this behavior could work around it by explicitly checking for the presence of a &lt;code&gt;Range:&lt;/code&gt; header, and not calling &lt;code&gt;event.respondWith()&lt;/code&gt; if one is present. By doing this, the service worker effectively removes itself from the response generation picture, and the default browser networking logic, which knows how to preserve range requests, is used instead.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Return without calling event.respondWith()&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// if this is a range request.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;range&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;It&#39;s safe to say that most developers were not aware of the need to do this, though. And it wasn&#39;t clear &lt;em&gt;why&lt;/em&gt; that should be required. Ultimately, this limitation was due to &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=847428&quot; rel=&quot;noopener&quot;&gt;browsers&lt;/a&gt; needing to catch up to &lt;a href=&quot;https://github.com/whatwg/fetch/pull/560&quot; rel=&quot;noopener&quot;&gt;changes in the underlying specification&lt;/a&gt;, which added support for this functionality.&lt;/p&gt;
&lt;h2 id=&quot;what&#39;s-been-fixed&quot;&gt;What&#39;s been fixed? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/sw-range-requests/#what&#39;s-been-fixed&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Browsers that behave correctly preserve the &lt;code&gt;Range:&lt;/code&gt; header when &lt;code&gt;event.request&lt;/code&gt; is passed to &lt;code&gt;fetch()&lt;/code&gt;. This means the service worker code in my initial example will allow the remote server to see the &lt;code&gt;Range:&lt;/code&gt; header, if it was set by the browser:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The Range: header will pass through in browsers&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// that behave correctly.&lt;/span&gt;&lt;br /&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The server now gets a chance to properly handle the range request and return a partial response with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;206&lt;/code&gt; status code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;which-browsers-behave-correctly&quot;&gt;Which browsers behave correctly? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/sw-range-requests/#which-browsers-behave-correctly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recent versions of Safari have the &lt;a href=&quot;https://trac.webkit.org/changeset/252047/webkit&quot; rel=&quot;noopener&quot;&gt;correct functionality&lt;/a&gt;. Chrome and Edge, starting with &lt;a href=&quot;https://chromestatus.com/feature/5648276147666944&quot; rel=&quot;noopener&quot;&gt;version 87&lt;/a&gt;, behave correctly as well.&lt;/p&gt;
&lt;p&gt;As of this October 2020, Firefox has not yet fixed this behavior, so you may still need to account for it while deploying your service worker&#39;s code to production.&lt;/p&gt;
&lt;p&gt;Checking the &amp;quot;Include range header in network request&amp;quot; row of the &lt;a href=&quot;https://wpt.fyi/results/fetch/range/sw.https.window.html?label=master&amp;amp;label=experimental&amp;amp;aligned&quot; rel=&quot;noopener&quot;&gt;Web Platform Tests dashboard&lt;/a&gt; is the best way to confirm whether or not a given browser has corrected this behavior.&lt;/p&gt;
&lt;h2 id=&quot;what-about-serving-range-requests-from-the-cache&quot;&gt;What about serving range requests from the cache? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/sw-range-requests/#what-about-serving-range-requests-from-the-cache&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Service workers can do much more than just pass a request through to the network. A common use case is to add resources, like audio and video files, to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage&quot; rel=&quot;noopener&quot;&gt;local cache&lt;/a&gt;. A service worker can then fulfill requests from that cache, bypassing the network entirely.&lt;/p&gt;
&lt;p&gt;All browsers, including Firefox, support inspecting a request inside a &lt;code&gt;fetch&lt;/code&gt; handler, checking for the presence of the &lt;code&gt;Range:&lt;/code&gt; header, and then locally fulfilling the request with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;206&lt;/code&gt; response&lt;/a&gt; that comes from a cache. The service worker code to properly parse the &lt;code&gt;Range:&lt;/code&gt; header and return only the appropriate segment of the complete cached response is not trivial, though.&lt;/p&gt;
&lt;p&gt;Fortunately, developers who want some help can turn to &lt;a href=&quot;https://developers.google.com/web/tools/workbox/&quot; rel=&quot;noopener&quot;&gt;Workbox&lt;/a&gt;, which is a set of libraries that simplifies common service worker use cases. The &lt;a href=&quot;https://developers.google.com/web/tools/workbox/modules/workbox-range-requests&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;workbox-range-request module&lt;/code&gt;&lt;/a&gt; implements all the logic necessary to serve partial responses directly from the cache. A full recipe for this use case can be found &lt;a href=&quot;https://developers.google.com/web/tools/workbox/guides/advanced-recipes#cached-av&quot; rel=&quot;noopener&quot;&gt;in the Workbox documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The hero image on this post is by &lt;a href=&quot;https://unsplash.com/photos/OnAwTs0tu3k&quot; rel=&quot;noopener&quot;&gt;Natalie Rhea Riggs&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;
</content>
    <author>
      <name>Jeff Posnick</name>
    </author>
  </entry>
  
  <entry>
    <title>Media application basics</title>
    <link href="https://web.dev/media-application-basics/"/>
    <updated>2017-06-09T00:00:00Z</updated>
    <id>https://web.dev/media-application-basics/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Much media work requires changing characteristics of media files, such as
bitrate or resolution. Finding a straightforward way to get started can be
bewildering and intimidating. On this page, I provide an onramp into that
world.&lt;/p&gt;
&lt;p&gt;You&#39;ll notice in what follows that the word &#39;resolution&#39; doesn&#39;t appear. What
the two applications output are just the dimensions, the numbers themselves.
That&#39;s because resolution is just an informal shorthand for the dimensions of a
video. In every case that follows, I talk about specific numbers.&lt;/p&gt;
&lt;p&gt;This page describes the basic usage for two common command-line media utilities: &lt;a href=&quot;https://github.com/google/shaka-packager&quot; rel=&quot;noopener&quot;&gt;Shaka
Packager&lt;/a&gt; and
&lt;a href=&quot;https://ffmpeg.org/download.html&quot; rel=&quot;noopener&quot;&gt;FFmpeg&lt;/a&gt;. Why cover two applications? While
both are powerful and useful by themselves, neither does everything needed to
prepare media for the web. I&#39;ve also created a &lt;a href=&quot;https://web.dev/media-cheat-sheet&quot;&gt;cheat sheet&lt;/a&gt; showing
common operations with those applications.&lt;/p&gt;
&lt;p&gt;These aren&#39;t the only options available for many file manipulation tasks. But
they are two of the most common and powerful. Other options include the GUI
applications &lt;a href=&quot;http://www.mirovideoconverter.com/&quot; rel=&quot;noopener&quot;&gt;Miro&lt;/a&gt;,
&lt;a href=&quot;https://handbrake.fr/&quot; rel=&quot;noopener&quot;&gt;HandBrake&lt;/a&gt;, and &lt;a href=&quot;https://www.videolan.org/&quot; rel=&quot;noopener&quot;&gt;VLC&lt;/a&gt;. There are also
online encoding/transcoding services such as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Zencoder&quot; rel=&quot;noopener&quot;&gt;Zencoder&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/elastictranscoder&quot; rel=&quot;noopener&quot;&gt;Amazon Elastic
Encoder&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;shaka-packager&quot;&gt;Shaka Packager &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-application-basics/#shaka-packager&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/shaka-packager&quot; rel=&quot;noopener&quot;&gt;Shaka Packager&lt;/a&gt; is a free media
packaging SDK. If you were using a media player on your site, Shaka Packager is
what you would use to prepare the files. It supports conversion for the two most
common video streaming protocols: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/DASH_Adaptive_Streaming_for_HTML_5_Video&quot; rel=&quot;noopener&quot;&gt;Dynamic Adaptive Streaming over HTTP
(DASH)&lt;/a&gt;
or &lt;a href=&quot;https://developer.apple.com/documentation/http_live_streaming&quot; rel=&quot;noopener&quot;&gt;HTTP Live Streaming
(HLS)&lt;/a&gt;. Shaka
Packager supports key security features: common encryption and Widevine digital
rights management (DRM). It can also handle live video, and
video-on-demand. Those concepts are beyond the scope of this article.&lt;/p&gt;
&lt;p&gt;Despite what it says on the package, this utility is for more than C++
developers. You can use it as both a library for building media software and as
a command-line utility for preparing media files for playback. It&#39;s the latter
capacity that&#39;s useful for us here. In fact, for web media creators, Shaka Packager
is the only way to do some tasks without spending money on expensive commercial
applications.&lt;/p&gt;
&lt;p&gt;Here&#39;s the basic pattern for a Shaka Packager command:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager stream_descriptor &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;stream_descriptor-2 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;stream_descriptor-n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;flags&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This isn&#39;t quite what you get if you type &lt;code&gt;packager -help&lt;/code&gt;. This is how I think
of it, and this reflects the examples in the &lt;a href=&quot;https://google.github.io/shaka-packager/html/&quot; rel=&quot;noopener&quot;&gt;Shaka Packager
documentation&lt;/a&gt;. Note that there are multiple
&lt;code&gt;stream_descriptor&lt;/code&gt; items in the pattern. Though I don&#39;t show it, you could
manipulate the video and audio streams of a file directly.&lt;/p&gt;
&lt;p&gt;Compare this basic pattern with a simple use that displays file characteristics.
In the example, I&#39;ve lined up equivalent parts.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager stream_descriptor &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;stream_descriptor-n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;flags&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;packager &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;glocken.mp4                       --dump_stream_info&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The command outputs this:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;0416/140029:INFO:demuxer.cc&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Demuxer::Run&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; on &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;glocken.mp4&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;0416/140029:INFO:demuxer.cc&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Initialize Demuxer &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;glocken.mp4&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;File &lt;span class=&quot;token string&quot;&gt;&quot;glocken.mp4&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;br /&gt;Found &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;.&lt;br /&gt;Stream &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; type: Video&lt;br /&gt; codec_string: avc1.640028&lt;br /&gt; time_scale: &lt;span class=&quot;token number&quot;&gt;30000&lt;/span&gt;&lt;br /&gt; duration: &lt;span class=&quot;token number&quot;&gt;300300&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10.0&lt;/span&gt; seconds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt; is_encrypted: &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt; codec: H264&lt;br /&gt; width: &lt;span class=&quot;token number&quot;&gt;1920&lt;/span&gt;&lt;br /&gt; height: &lt;span class=&quot;token number&quot;&gt;1080&lt;/span&gt;&lt;br /&gt; pixel_aspect_ratio: &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;:1&lt;br /&gt; trick_play_factor: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt; nalu_length_size: &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Stream &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; type: Audio&lt;br /&gt; codec_string: mp4a.40.2&lt;br /&gt; time_scale: &lt;span class=&quot;token number&quot;&gt;48000&lt;/span&gt;&lt;br /&gt; duration: &lt;span class=&quot;token number&quot;&gt;481280&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10.0&lt;/span&gt; seconds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt; is_encrypted: &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt; codec: AAC&lt;br /&gt; sample_bits: &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;br /&gt; num_channels: &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt; sampling_frequency: &lt;span class=&quot;token number&quot;&gt;48000&lt;/span&gt;&lt;br /&gt; language: eng&lt;br /&gt; seek_preroll_ns: &lt;span class=&quot;token number&quot;&gt;20833&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Packaging completed successfully.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Look for the characteristics discussed in &lt;a href=&quot;https://web.dev/media-file-basics&quot;&gt;Media file basics&lt;/a&gt; and
notice a few things. The height and width are correct for full HD, and the audio
and video codecs are among the preferred codecs for their container types, AAC
for audio and H264 for video. Notice also that streams are identified with
numbers. These are useful for operations that manipulate the audio and video
separately.&lt;/p&gt;
&lt;p&gt;Notice that the output above doesn&#39;t show the bitrate. Despite what&#39;s missing,
this output is easier to read, so I use it whenever I can. When I need
information that Shaka Packager can&#39;t get, such as the bitrate, I use FFmpeg.&lt;/p&gt;
&lt;h2 id=&quot;ffmpeg&quot;&gt;FFmpeg &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-application-basics/#ffmpeg&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://ffmpeg.org/download.html&quot; rel=&quot;noopener&quot;&gt;FFmpeg&lt;/a&gt; is also a free application for
recording, converting, and streaming media files. Its capabilities aren&#39;t better
or worse than Shaka Packager&#39;s. They&#39;re just different.&lt;/p&gt;
&lt;p&gt;The basic pattern for an FFmpeg command looks like this:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;GeneralOptions&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InputFileOptions&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; -i input &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OutputFileOptions&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; output&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Like Shaka Packager this application can handle multiple streams. Some of its
options are used in multiple locations and have different effects on file output
depending on where they are in the command. Be aware of this as you look at
&lt;a href=&quot;https://stackoverflow.com/questions/tagged/ffmpeg&quot; rel=&quot;noopener&quot;&gt;FFmpeg questions on Stack Overflow&lt;/a&gt;
and similar sites.&lt;/p&gt;
&lt;p&gt;I&#39;ll again compare the basic pattern to the example for displaying file characteristics.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;    ffmpeg &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;GeneralOptions&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InputFileOptions&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; -i input        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OutputFileOptions&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; output&lt;br /&gt;&lt;br /&gt;    ffmpeg                                     -i glocken.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;In addition to the information I requested, this also prints an error message as
shown in the example below. That&#39;s because this is technically an incorrect
usage of FFmpeg. I use it because it displays information I care about.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Input &lt;span class=&quot;token comment&quot;&gt;#0, mov,mp4,m4a,3gp,3g2,mj2, from &#39;glocken.mp4&#39;:&lt;/span&gt;&lt;br /&gt;  Metadata:&lt;br /&gt;    major_brand     &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; isom&lt;br /&gt;    minor_version   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt;&lt;br /&gt;    compatible_brands: isomiso2avc1mp41&lt;br /&gt;    encoder         &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; Lavf58.17.100&lt;br /&gt;  Duration: 00:01:47.53, start: &lt;span class=&quot;token number&quot;&gt;0.000000&lt;/span&gt;, bitrate: &lt;span class=&quot;token number&quot;&gt;10715&lt;/span&gt; kb/s&lt;br /&gt;    Stream &lt;span class=&quot;token comment&quot;&gt;#0:0(eng): Video: h264 (High) (avc1 / 0x31637661), yuvj420p(pc), 1920x1080, 10579 kb/s, 29.97 fps, 29.97 tbr, 30k tbn, 59.94 tbc (default)&lt;/span&gt;&lt;br /&gt;    Metadata:&lt;br /&gt;      handler_name    &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; VideoHandler&lt;br /&gt;    Stream &lt;span class=&quot;token comment&quot;&gt;#0:1(eng): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 128 kb/s (default)&lt;/span&gt;&lt;br /&gt;    Metadata:&lt;br /&gt;      handler_name    &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; SoundHandler&lt;br /&gt;At least one output &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; must be specified&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Now that you&#39;ve tried your hand at using Shaka and FFmpeg, it&#39;s time to &lt;a href=&quot;https://web.dev/prepare-media&quot;&gt;Prepare media files for the web&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>Containers and codecs</title>
    <link href="https://web.dev/containers-and-codecs/"/>
    <updated>2017-06-30T00:00:00Z</updated>
    <id>https://web.dev/containers-and-codecs/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;To support multiple browsers, you&#39;ll need to use FFmpeg to convert your mov file
to two different containers: an MP4 container and a WebM container. In actual
practice, you would likely specify a codec at the same time. For now, I&#39;m
letting FFmpeg use its defaults.&lt;/p&gt;
&lt;p&gt;To create the MP4:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i glocken.mov glocken.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;To create the WebM:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i glocken.mov glocken.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;To create this article, I used FFmpeg version 4.2.2-tessus. If the command
lines don&#39;t work for your version of FFmpeg, consult the FFmpeg documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Webm takes longer to create than MP4. This isn&#39;t surprising when you look at the
results. While MP4 compresses to about two-thirds of the original file&#39;s size,
WebM is down to a mere fraction of the original&#39;s size. Though, your results may
vary. You can see this for yourself using the &lt;a href=&quot;https://www.tecmint.com/15-basic-ls-command-examples-in-linux/&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ls -a&lt;/code&gt; bash
command&lt;/a&gt; in the
folder where your media files are located. For example:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; jmedley  eng  &lt;span class=&quot;token number&quot;&gt;12080306&lt;/span&gt; Apr &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;:13 glocken.mov&lt;br /&gt;-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; jmedley  eng  &lt;span class=&quot;token number&quot;&gt;10146121&lt;/span&gt; Apr &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;:25 glocken.mp4&lt;br /&gt;-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; jmedley  eng    &lt;span class=&quot;token number&quot;&gt;491743&lt;/span&gt; Apr &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;:30 glocken.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;check-your-work&quot;&gt;Check your work &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/containers-and-codecs/#check-your-work&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To verify your results, use FFmpeg and Shaka Packager as already shown in
&lt;a href=&quot;https://web.dev/media-application-basics&quot;&gt;Media Application basics&lt;/a&gt;:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;glocken.mp4 --dump_stream_info&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i glocken.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;codecs&quot;&gt;Codecs &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/containers-and-codecs/#codecs&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next the codec. As stated in &lt;a href=&quot;https://web.dev/media-file-basics&quot;&gt;Media file basics&lt;/a&gt;, a codec is &lt;em&gt;not&lt;/em&gt; the
same thing as a container (file type). Two files of the same container type
could hold data compressed using different codecs. The WebM format for example
allows audio to be encoded using either
&lt;a href=&quot;https://en.wikipedia.org/wiki/Vorbis&quot; rel=&quot;noopener&quot;&gt;vorbis&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Opus_(audio_format)&quot; rel=&quot;noopener&quot;&gt;opus&lt;/a&gt;. To change the codec I
use FFmpeg. For example, this command outputs an mkv file with a vorbis audio
codec and an av1 video codec.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i glocken.mov -c:a vorbis -c:v av1 glocken.mkv&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;In this example, the &lt;code&gt;-c:a&lt;/code&gt; flag and the &lt;code&gt;-c:v&lt;/code&gt; are for specifying the audio and
video codecs respectively.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://web.dev/media-cheat-sheet#codec&quot;&gt;cheat sheet&lt;/a&gt; lists commands needed to convert codecs.
The tables below summarize the libraries used in FFmpeg to perform the codec
conversions for WebM and MP4 files. These are the formats recommended for DASH
and HLS respectively.&lt;/p&gt;
&lt;h2 id=&quot;video&quot;&gt;Video &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/containers-and-codecs/#video&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Codec&lt;/th&gt;
&lt;th&gt;Extension&lt;/th&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;av1&lt;/td&gt;
&lt;td&gt;WebM&lt;br /&gt;mkv&lt;/td&gt;
&lt;td&gt;libaom-av1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h264&lt;/td&gt;
&lt;td&gt;MP4&lt;/td&gt;
&lt;td&gt;libx264&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vp9&lt;/td&gt;
&lt;td&gt;WebM&lt;/td&gt;
&lt;td&gt;libvpx-vp9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;h2 id=&quot;audio&quot;&gt;Audio &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/containers-and-codecs/#audio&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Codec&lt;/th&gt;
&lt;th&gt;Extension&lt;/th&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;aac&lt;/td&gt;
&lt;td&gt;MP4&lt;/td&gt;
&lt;td&gt;aac&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;opus&lt;/td&gt;
&lt;td&gt;WebM&lt;/td&gt;
&lt;td&gt;libopus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vorbis&lt;/td&gt;
&lt;td&gt;WebM&lt;/td&gt;
&lt;td&gt;libvorbis&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;p&gt;Next, I&#39;ll show you how to change the file&#39;s &lt;a href=&quot;https://web.dev/bitrate&quot;&gt;bitrate&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>Media manipulation cheat sheet</title>
    <link href="https://web.dev/media-cheat-sheet/"/>
    <updated>2018-09-20T00:00:00Z</updated>
    <id>https://web.dev/media-cheat-sheet/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;This page offers these resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commands for manipulating specific characteristics of media files.&lt;/li&gt;
&lt;li&gt;The sequence of commands needed to get from a raw mov file to encrypted media assets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conversion is done with these applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/shaka-packager&quot; rel=&quot;noopener&quot;&gt;Shaka Packager&lt;/a&gt; (&lt;a href=&quot;https://stackoverflow.com/questions/tagged/shaka&quot; rel=&quot;noopener&quot;&gt;on Stack Overflow&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ffmpeg.org/download.html&quot; rel=&quot;noopener&quot;&gt;FFmpeg&lt;/a&gt;, version 4.2.2-tessus (&lt;a href=&quot;https://stackoverflow.com/questions/tagged/ffmpeg&quot; rel=&quot;noopener&quot;&gt;on Stack Overflow&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.openssl.org/&quot; rel=&quot;noopener&quot;&gt;OpenSSL&lt;/a&gt;  (&lt;a href=&quot;https://stackoverflow.com/questions/tagged/openssl&quot; rel=&quot;noopener&quot;&gt;on Stack Overflow&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although I&#39;ve tried to show equivalent operations for all procedures, not all
operations are possible in both applications.&lt;/p&gt;
&lt;p&gt;In many cases, the commands I&#39;m showing may be combined in a single command line
operation, and in actual use would be. For example, there&#39;s nothing preventing
you from setting an output file&#39;s bitrate in the same operation as a file
conversion. For this cheat sheet, I often show these operations as separate
commands for the sake of clarity.&lt;/p&gt;
&lt;p&gt;Please let me know of useful additions or corrections.
&lt;a href=&quot;https://web.dev/media-cheat-sheet&quot;&gt;Pull requests are welcome&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This page contains a few more commands than are covered in this section. Not
only are there plans to cover these topics (we have drafts already), we also
hope this page will be a resource for multiple levels of expertise.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;display-characteristics&quot;&gt;Display characteristics &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#display-characteristics&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4 --dump_stream_info&lt;br /&gt;&lt;br /&gt;ffmpeg -i myvideo.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Technically, FFmpeg always requires an output file format. Calling FFmpeg this
way will give you an error message explaining that; however, it lists
information not available using Shaka Packager.&lt;/p&gt;
&lt;h2 id=&quot;demux-(split)-audio-and-video&quot;&gt;Demux (split) audio and video &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#demux-(split)-audio-and-video&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Shaka Packager requires demuxing when converting files. This is also required
for using media frameworks.&lt;/p&gt;
&lt;h3 id=&quot;shaka-packager&quot;&gt;Shaka Packager &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#shaka-packager&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;MP4&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;video,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo_video.mp4&lt;br /&gt;packager &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;audio,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo_audio.m4a&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Or:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;video,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo_video.mp4 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;audio,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo_audio.m4a&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;WebM&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.webm,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;video,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo_video.webm &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.webm,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;audio,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo_audio.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;ffmpeg&quot;&gt;FFmpeg &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#ffmpeg&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;MP4&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.mp4 -vcodec copy -an myvideo_video.mp4&lt;br /&gt;ffmpeg -i myvideo.mp4 -acodec copy -vn myvideo_audio.m4a&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;WebM&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.webm -vcodec copy -an myvideo_video.webm&lt;br /&gt;ffmpeg -i myvideo.webm -acodec copy -vn myvideo_audio.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;change-characteristics&quot;&gt;Change characteristics &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#change-characteristics&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;bitrate&quot;&gt;Bitrate &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#bitrate&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For FFmpeg, I can do this while I&#39;m converting to mp4 or WebM.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.mov -b:v 350K myvideo.mp4&lt;br /&gt;ffmpeg -i myvideo.mov -vf &lt;span class=&quot;token assign-left variable&quot;&gt;setsar&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;:1 -b:v 350K myvideo.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;dimensions-(resolution)&quot;&gt;Dimensions (resolution) &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#dimensions-(resolution)&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.webm -s 1920x1080 myvideo_1920x1080.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;file-type&quot;&gt;File type &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#file-type&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Shaka Packager cannot process mov files and hence cannot be used to convert
files from that format.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;mov to MP4&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.mov myvideo.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;mov to WebM&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.mov myvideo.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;synchronize-audio-and-video&quot;&gt;Synchronize audio and video &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#synchronize-audio-and-video&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To ensure that audio and video synchronize during playback, insert keyframes.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.mp4 -keyint_min &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt; -g &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt; -f webm -vf &lt;span class=&quot;token assign-left variable&quot;&gt;setsar&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;:1 out.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;codec&quot;&gt;Codec &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#codec&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The tables below list common containers and codecs for both audio and video, as
well as the FFmpeg library needed for conversion. A conversion library must be
specified when converting files using FFmpeg.&lt;/p&gt;
&lt;h4 id=&quot;video&quot;&gt;Video &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#video&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Codec&lt;/th&gt;
&lt;th&gt;Container&lt;/th&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;av1&lt;/td&gt;
&lt;td&gt;mkv&lt;/td&gt;
&lt;td&gt;libaom-av1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;WebM&lt;/td&gt;
&lt;td&gt;libaom-av1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h264&lt;/td&gt;
&lt;td&gt;MP4&lt;/td&gt;
&lt;td&gt;libx264&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vp9&lt;/td&gt;
&lt;td&gt;WebM&lt;/td&gt;
&lt;td&gt;libvpx-vp9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;h4 id=&quot;audio&quot;&gt;Audio &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#audio&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Codec&lt;/th&gt;
&lt;th&gt;Container&lt;/th&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;aac&lt;/td&gt;
&lt;td&gt;MP4&lt;/td&gt;
&lt;td&gt;aac&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;opus&lt;/td&gt;
&lt;td&gt;WebM&lt;/td&gt;
&lt;td&gt;libopus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vorbis&lt;/td&gt;
&lt;td&gt;WebM&lt;/td&gt;
&lt;td&gt;libvorbis&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;MP4/H.264&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.mp4 -c:v libx264 -c:a copy myvideo.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Audio for an MP4&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.mp4 -c:v copy -c:a aac myvideo.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;WebM/VP9&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.webm -v:c libvpx-vp9 -v:a copy myvideo.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Audio for a WebM&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.webm -v:c copy -v:a libvorbis myvideo.webm&lt;br /&gt;ffmpeg -i myvideo.webm -v:c copy -v:a libopus myvideo.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;packager&quot;&gt;Packager &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#packager&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;dashmpd&quot;&gt;DASH/MPD &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#dashmpd&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dynamic Adaptive Streaming over HTTP is a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/DASH_Adaptive_Streaming_for_HTML_5_Video&quot; rel=&quot;noopener&quot;&gt;web-standards-based&lt;/a&gt;
method of presenting video-on-demand for the web.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;audio,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo_audio.mp4 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;video,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo_video.mp4 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --mpd_output myvideo_vod.mpd&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;hls&quot;&gt;HLS &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#hls&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;HTTP Live Streaming (HLS) is
&lt;a href=&quot;https://developer.apple.com/streaming/&quot; rel=&quot;noopener&quot;&gt;Apple&#39;s standard&lt;/a&gt;
for live streaming and video on demand for the web.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.mp4 -c:a copy -b:v 8M -c:v copy -f hls -hls_time &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;        -hls_list_size &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; myvideo.m3u8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;clear-key-encryption&quot;&gt;Clear Key Encryption &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#clear-key-encryption&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;create-a-key&quot;&gt;Create a key &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#create-a-key&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use the same method to create a key for both DASH and HLS. Do this using
&lt;a href=&quot;https://www.openssl.org/&quot; rel=&quot;noopener&quot;&gt;openssl&lt;/a&gt;. The following will create a key made of 16
hex values.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;openssl rand -out media.key &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This command creates a file with white space and new line characters, which are
not allowed by Shaka Packager. You&#39;ll need to open the key file and manually
remove all whitespace including the final carriage return.&lt;/p&gt;
&lt;h3 id=&quot;encrypt&quot;&gt;Encrypt &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#encrypt&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the &lt;code&gt;-key&lt;/code&gt; flag use the key created earlier and stored in the media.key
file. However, when entering it on the command line, be sure you&#39;ve removed its
whitespace. For the &lt;code&gt;-key_id&lt;/code&gt; flag repeat the key value.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;audio,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;glocka.m4a &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;video,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;glockv.mp4 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --enable_fixed_key_encryption &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  -key INSERT_KEY_HERE -key_id INSERT_KEY_ID_HERE &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;create-a-key-information-file&quot;&gt;Create a key information file &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#create-a-key-information-file&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To encrypt for HLS you need a key information file in addition to a key file. A
key information file is a text file with the format below. It should have the extension &lt;code&gt;.keyinfo&lt;/code&gt;. For example: &lt;code&gt;encrypt.keyinfo&lt;/code&gt;.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;key URI&lt;br /&gt;key &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path&lt;br /&gt;private key&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The key URI is where the &lt;code&gt;media.key&lt;/code&gt; (&lt;a href=&quot;https://web.dev/media-cheat-sheet/#create-a-key&quot;&gt;created above&lt;/a&gt; will be located on your server. The key file path is it&#39;s location relative to the key information file. Finally, the private key is the contents of the &lt;code&gt;media.key&lt;/code&gt; file itself. For example:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;https://example.com/media.key&lt;br /&gt;/path/to/media.key&lt;br /&gt;8b4c39c498949536&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;encrypt-for-hls&quot;&gt;Encrypt for HLS &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#encrypt-for-hls&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;input=input.mp4,stream=video,segment_template=output$Number$.ts,playlist_name=video_playlist.m3u8&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;input=input.mp4,stream=audio,segment_template=output_audio$Number$.ts,playlist_name=audio_playlist.m3u8,hls_group_id=audio,hls_name=ENGLISH&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --hls_master_playlist_output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;master_playlist.m3u8&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --hls_base_url&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://localhost:1000/&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This command will accept a key with either 16 or 32 characters.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i myvideo.mov -c:v libx264 -c:a aac -hls_key_info_file key_info myvideo.m3u8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;widevine-encryption&quot;&gt;Widevine Encryption &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#widevine-encryption&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;glocken.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;video,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;enc_video.mp4 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;glocken.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;audio,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;enc_audio.m4a &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --enable_widevine_encryption &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --key_server_url &lt;span class=&quot;token string&quot;&gt;&quot;https://license.uat.widevine.com/cenc/getcontentkey/widevine_test&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --content_id &lt;span class=&quot;token string&quot;&gt;&quot;Hex_converted_unique_ID&quot;&lt;/span&gt; --signer &lt;span class=&quot;token string&quot;&gt;&quot;widevine_test&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --aes_signing_key &lt;span class=&quot;token string&quot;&gt;&quot;1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --aes_signing_iv &lt;span class=&quot;token string&quot;&gt;&quot;d58ce954203b7c9a9a9d467f59839249&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;media-conversion-sequence&quot;&gt;Media conversion sequence &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#media-conversion-sequence&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This section shows in order commands needed to get from a raw mov file to
encrypted assets packaged for DASH or HLS. For the sake of having a goal to
illustrate, I&#39;m converting my source file to a bitrate of 8Mbs at a resolution
of 1080p (1920 x 1080). Adjust these values as your needs dictate.&lt;/p&gt;
&lt;h3 id=&quot;dashwebm-with-shaka-packager&quot;&gt;DASH/WebM with Shaka Packager &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#dashwebm-with-shaka-packager&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not all steps are possible with Shaka Packager, so I&#39;ll use ffmpeg when I need to.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Convert the file type and codec.&lt;/p&gt;
&lt;p&gt;For this command you can use either &lt;code&gt;liborbis&lt;/code&gt; or &lt;code&gt;libopus&lt;/code&gt; for the audio codec.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i glocken.mov -c:v libvpx-vp9 -c:a libvorbis -b:v 8M -vf &lt;span class=&quot;token assign-left variable&quot;&gt;setsar&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;:1 -f webm glocken.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Clear Key encryption key.&lt;/p&gt;
&lt;p&gt;You&#39;ll need to open the key file and manually remove all whitespace
including the final carriage return.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;openssl rand -out media.key &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Demux (separate) the audio and video, encrypt the new files, and output a
media presentation description (MPD) file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-key&lt;/code&gt; and &lt;code&gt;-key_id&lt;/code&gt; flags are copied from the &lt;code&gt;media.key&lt;/code&gt; file.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.webm,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;video,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo_video.webm &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.webm,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;audio,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo_audio.webm &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --enable_fixed_key_encryption --enable_fixed_key_decryption &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  -key INSERT_KEY_HERE -key_id INSERT_KEY_ID_HERE &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --mpd_output myvideo_vod.mpd&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remux (recombine) the audio and video streams. If you&#39;re using a video
framework, you may not need to do this.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i mymovie.mp4 -i myaudio.m4a -c copy finalmovie.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;dashmp4-with-shaka-packager&quot;&gt;DASH/MP4 with Shaka Packager &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#dashmp4-with-shaka-packager&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not all steps are possible with Shaka Packager, so I&#39;ll use ffmpeg when I need to.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Convert the file type, video codec and bitrate.&lt;/p&gt;
&lt;p&gt;The default pixel format, yuv420p is used because one isn&#39;t supplied in the
command line. The app will give you an error message that it is deprecated.
I&#39;ve chosen not to override the default because, though deprecated yuv420p
is the most widely supported.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i mymovie.mov -c:v libx264 -c:a aac -b:v 8M -strict -2 mymovie.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Clear Key encryption key.&lt;/p&gt;
&lt;p&gt;You&#39;ll need to open the key file and manually remove all whitespace
including the final carriage return.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;openssl rand -out media.key &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Demux (separate) the audio and video, encrypt the new files, and output a
media presentation description (MPD) file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-key&lt;/code&gt; and &lt;code&gt;-key_id&lt;/code&gt; flags are copied from the &lt;code&gt;media.key&lt;/code&gt; file.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mymovie.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;audio,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myaudio.m4a &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mymovie.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;video,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --enable_fixed_key_encryption --enable_fixed_key_decryption &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  -key INSERT_KEY_HERE -key_id INSERT_KEY_ID_HERE &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --mpd_output myvideo_vod.mpd&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remux (recombine) the audio and video streams. If you&#39;re using a video
framework, you may not need to do this.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i mymovie.mp4 -i myaudio.m4a -c copy finalmovie.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;widevine&quot;&gt;Widevine &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#widevine&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The two previous examples used Clear Key encryption. For widevine the final two
steps are replaced with this.&lt;/p&gt;
&lt;p&gt;Everything in this command except the name of your files and the &lt;code&gt;--content-id&lt;/code&gt;
flag should be copied exactly from the example. The &lt;code&gt;--content-id&lt;/code&gt; is 16 or 32
random hex digits. Use the keys provided here instead of your own.  (This is how
Widevine works.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Demux (separate) the audio and video, encrypt the new files, and output a
media presentation description (MPD) file.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mymovie.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;audio,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myaudio.m4a &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token assign-left variable&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mymovie.mp4,stream&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;video,output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;myvideo.mp4 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --enable_widevine_encryption &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --key_server_url &lt;span class=&quot;token string&quot;&gt;&quot;https://license.uat.widevine.com/cenc/getcontentkey/widevine_test&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --content_id &lt;span class=&quot;token string&quot;&gt;&quot;fd385d9f9a14bb09&quot;&lt;/span&gt; --signer &lt;span class=&quot;token string&quot;&gt;&quot;widevine_test&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --aes_signing_key &lt;span class=&quot;token string&quot;&gt;&quot;1ae8ccd0e7985cc0b6203a55855a1034afc252980e970ca90e5202689f947ab9&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  --aes_signing_iv &lt;span class=&quot;token string&quot;&gt;&quot;d58ce954203b7c9a9a9d467f59839249&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remux (recombine) the audio and video streams. If you&#39;re using a video
framework, you may not need to do this.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i mymovie.mp4 -i myaudio.m4a -c copy finalmovie.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;hlsmp4&quot;&gt;HLS/MP4 &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-cheat-sheet/#hlsmp4&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;HLS only supports MP4, so first you&#39;ll need to convert to the MP4 container and
supported codecs. Not all steps are possible with Shaka Packager, so I&#39;ll use
FFmpeg when I need to.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Convert the file type, video codec, and bitrate.&lt;/p&gt;
&lt;p&gt;The default pixel format, yuv420p, is used because one isn&#39;t supplied in the
command line. The app will give you an error message that it is deprecated.
I&#39;ve chosen not to override the default because, though deprecated yuv420p
is the most widely supported.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i mymovie.mov -c:v libx264 -c:a aac -b:v 8M -strict -2 mymovie.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Clear Key encryption key.&lt;/p&gt;
&lt;p&gt;You&#39;ll need to open the key file and manually remove all whitespace
including the final carriage return.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;openssl rand -out media.key &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a key information file&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;packager &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;input=input.mp4,stream=video,segment_template=output$Number$.ts, \&lt;br /&gt;    playlist_name=video_playlist.m3u8&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&#39;input=input.mp4,stream=audio,segment_template=output_audio$Number$.ts, \&lt;br /&gt;    playlist_name=audio_playlist.m3u8,hls_group_id=audio,hls_name=ENGLISH&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;      --hls_master_playlist_output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;master_playlist.m3u8&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;      --hls_base_url&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://localhost:1000/&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;      --enable_fixed_key_encryption --enable_fixed_key_decryption &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;      -key INSERT_KEY_HERE -key_id INSERT_KEY_ID_HERE &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    <author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>What is mixed content?</title>
    <link href="https://web.dev/what-is-mixed-content/"/>
    <updated>2019-09-07T00:00:00Z</updated>
    <id>https://web.dev/what-is-mixed-content/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;&lt;strong&gt;Mixed content&lt;/strong&gt; occurs when initial HTML is loaded over a secure
&lt;a href=&quot;https://web.dev/why-https-matters/&quot;&gt;HTTPS&lt;/a&gt; connection, but other resources (such as images,
videos, stylesheets, scripts) are loaded over an insecure HTTP connection.
This is called mixed content
because both HTTP and HTTPS content are being loaded to display the same page,
and the initial request was secure over HTTPS.&lt;/p&gt;
&lt;p&gt;Requesting subresources using the insecure HTTP protocol weakens the security of the entire page,
as these requests are vulnerable to &lt;a href=&quot;https://www.ietf.org/rfc/rfc7835.html#section-2.1.1&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;on-path attacks&lt;/strong&gt;&lt;/a&gt;,
where an attacker eavesdrops on a network connection and views or modifies the communication between two parties.
Using these resources, attackers can track users and replace content on a website,
and in the case of active mixed content, take complete control over the page, not just the insecure resources.&lt;/p&gt;
&lt;p&gt;Although many browsers report mixed content warnings to the user,
by the time this happens, it is too late:
the insecure requests have already been performed and the security of the page is compromised.&lt;/p&gt;
&lt;p&gt;This is why browsers are increasingly blocking mixed content.
If you have mixed content on your site,
then fixing it will ensure the content continues to load as browsers become more strict.&lt;/p&gt;
&lt;h2 id=&quot;the-two-types-of-mixed-content&quot;&gt;The two types of mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#the-two-types-of-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The two types of mixed content are: active and passive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Passive mixed content&lt;/strong&gt; refers to content that doesn&#39;t interact with the rest of the page,
and thus a man-in-the-middle attack is restricted to what they can do if they intercept or change that content.
Passive mixed content is defined as images, video, and audio content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active mixed content&lt;/strong&gt; interacts with the page as a whole and allows an attacker to do almost anything with the page.
Active mixed content includes scripts, stylesheets, iframes,
and other code that the browser can download and execute.&lt;/p&gt;
&lt;h3 id=&quot;passive-mixed-content&quot;&gt;Passive mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#passive-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Passive mixed content is seen as less problematic yet still poses a security threat to your site and your users.
For example, an attacker can intercept HTTP requests for images on your site and swap or replace these images;
the attacker can swap the &lt;em&gt;save&lt;/em&gt; and &lt;em&gt;delete&lt;/em&gt; button images,
causing your users to delete content without intending to;
replace your product diagrams with lewd or pornographic content,
defacing your site; or replace your product pictures with ads for a different site or product.&lt;/p&gt;
&lt;p&gt;Even if the attacker doesn&#39;t alter the content of your site,
an attacker can track users via mixed content requests.
The attacker can tell which pages a user visits and which products they view based on images or other resources that the browser loads.&lt;/p&gt;
&lt;p&gt;If passive mixed content is present most browsers will indicate in the URL bar that the page is not secure,
even when the page itself was loaded over HTTPS.
You can observe this behavior with this &lt;a href=&quot;https://passive-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;demo&lt;/a&gt;
that contains examples of passive mixed content.&lt;/p&gt;
&lt;p&gt;Until recently passive mixed content was loaded in all browsers,
as to block it would have broken many websites.
This is now beginning to change and so it is vital to update any instances of mixed content on your site.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.chromium.org/2019/10/no-more-mixed-messages-about-https.html&quot; rel=&quot;noopener&quot;&gt;Chrome is currently rolling out&lt;/a&gt;
automatic upgrading of passive mixed content where possible.
Automatic upgrading means that if the asset is available over HTTPS, but has been hardcoded as HTTP,
the browser will load the HTTPS version. If no secure version can be found the asset will not load.&lt;/p&gt;
&lt;p&gt;Whenever it detects mixed content or auto-upgrades passive mixed content,
Chrome logs detailed messages to the &lt;strong&gt;Issues&lt;/strong&gt; tab in DevTools
to guide you on how to fix the specific issue.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The Issues tab in Chrome DevTools shows detailed information about the specific mixed content issue and how to fix it&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;310&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HNxoomaHi2ksvYHGuNiE.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;active-mixed-content&quot;&gt;Active mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#active-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Active mixed content poses a greater threat than passive mixed content.
An attacker can intercept and rewrite active content,
thereby taking full control of your page or even your entire website.
This allows the attacker to change anything about the page,
including displaying entirely different content,
stealing user passwords or other login credentials,
stealing user session cookies,
or redirecting the user to a different site entirely.&lt;/p&gt;
&lt;p&gt;Due to the severity of this threat,
most browsers already block this type of content by default to protect users,
but functionality varies between browser vendors and versions.&lt;/p&gt;
&lt;p&gt;This other &lt;a href=&quot;https://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;demo&lt;/a&gt; contains examples of active mixed content.
&lt;a href=&quot;http://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;Load the example over HTTP&lt;/a&gt;
to see the content that&#39;s blocked when you &lt;a href=&quot;https://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;load the example over
HTTPS&lt;/a&gt;. Blocked content will also
be detailed in the &lt;strong&gt;Issues&lt;/strong&gt; tab.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;The Issues tab in Chrome DevTools shows detailed information about the specific mixed content issue and how to fix it&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;361&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xRG5zpKLr0Z3OwfYpn2H.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Browsers also highlight blocked content in their DevTools. Blocked content
issues are detailed in the &lt;strong&gt;Issues&lt;/strong&gt; tab in Chromium-based browsers. Firefox
and Safari log messages in the console.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;the-mixed-content-specification&quot;&gt;The mixed content specification &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#the-mixed-content-specification&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Browsers follow the &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/&quot; rel=&quot;noopener&quot;&gt;mixed content specification&lt;/a&gt;,
which defines the &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/#optionally-blockable-mixed-content&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;optionally blockable content&lt;/strong&gt;&lt;/a&gt;
and &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/#category-blockable&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;blockable content&lt;/strong&gt;&lt;/a&gt; categories.&lt;/p&gt;
&lt;p&gt;From the spec,
a resource qualifies as optionally blockable content
&amp;quot;when the risk of allowing its usage as mixed content is outweighed by the risk of breaking significant portions of the web&amp;quot;;
this is a subset of the passive mixed content category described above.&lt;/p&gt;
&lt;p&gt;All content that is not &lt;strong&gt;optionally blockable&lt;/strong&gt; is considered &lt;strong&gt;blockable&lt;/strong&gt;,
and should be blocked by the browser.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;There is a &lt;a href=&quot;https://w3c.github.io/webappsec-mixed-content/level2.html&quot; rel=&quot;noopener&quot;&gt;Level 2 of the Mixed Content specification&lt;/a&gt; in progress,
which will add automatic upgrading to the spec.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In recent years, &lt;a href=&quot;https://transparencyreport.google.com/https/overview&quot; rel=&quot;noopener&quot;&gt;HTTPS usage has risen dramatically&lt;/a&gt;,
and has become the clear default on the web.
This makes it more feasible now for browsers to consider blocking all mixed content,
even those subresource types defined in the &lt;a href=&quot;https://w3c.github.io/webappsec/specs/mixedcontent/&quot; rel=&quot;noopener&quot;&gt;mixed content specification&lt;/a&gt; as &lt;strong&gt;optionally blockable&lt;/strong&gt;.
This is why we now see Chrome taking a stricter approach to these subresources.&lt;/p&gt;
&lt;h3 id=&quot;older-browsers&quot;&gt;Older browsers &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/what-is-mixed-content/#older-browsers&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is important to remember that not every visitor to your website uses the most up-to-date browsers.
Different versions from different browser vendors each treat mixed content differently.
At worst, older browsers and versions don&#39;t block any mixed content at all,
which is very unsafe for the user.&lt;/p&gt;
&lt;p&gt;By fixing your mixed content problems you ensure that your content is visible in new browsers.
You also help protect users from dangerous content that isn&#39;t blocked by older browsers.&lt;/p&gt;
</content>
    <author>
      <name>Jo-el van Bergen</name>
    </author><author>
      <name>Rachel Andrew</name>
    </author>
  </entry>
  
  <entry>
    <title>Fixing mixed content</title>
    <link href="https://web.dev/fixing-mixed-content/"/>
    <updated>2019-09-07T00:00:00Z</updated>
    <id>https://web.dev/fixing-mixed-content/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Supporting HTTPS for your website is an important step to protecting your site and your users from attack,
but mixed content can render that protection useless.
Increasingly insecure mixed content will be blocked by browsers, as explained in &lt;a href=&quot;https://web.dev/what-is-mixed-content&quot;&gt;What is mixed content?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this guide we will demonstrate techniques and tools for fixing existing mixed content issues
and preventing new ones from happening.&lt;/p&gt;
&lt;h2 id=&quot;finding-mixed-content-by-visiting-your-site&quot;&gt;Finding mixed content by visiting your site &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#finding-mixed-content-by-visiting-your-site&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When visiting an HTTPS page in Google Chrome,
the browser alerts you to mixed content as errors and warnings in the JavaScript console.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://web.dev/what-is-mixed-content&quot;&gt;What is mixed content?&lt;/a&gt;,
you can find a number of examples and see how the problems are reported in Chrome DevTools.&lt;/p&gt;
&lt;p&gt;The example of &lt;a href=&quot;https://passive-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;passive mixed content&lt;/a&gt; will give the following warnings.
If the browser is able to find the content at an &lt;code&gt;https&lt;/code&gt; URL it automatically upgrades it, then shows a message.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Chrome DevTools showing the warnings displayed when mixed content is detected and upgraded&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;294&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Y7b4EWAbSL6BgI07FdQq.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://active-mixed-content.glitch.me/&quot; rel=&quot;noopener&quot;&gt;Active mixed content&lt;/a&gt; is blocked and displays a warning.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Chrome DevTools showing the warnings displayed when active mixed content is blocked&quot; class=&quot;w-screenshot&quot; decoding=&quot;async&quot; height=&quot;304&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/KafrfEz1adCP2eUHQEWy.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;If you find warnings like these for &lt;code&gt;http://&lt;/code&gt; URLs on your site,
you need to fix them in your site&#39;s source.
It&#39;s helpful to make a list of these URLs, along with the page you found them on, for use when you fix them.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Mixed content errors and warnings are only shown for the page you are currently viewing,
and the JavaScript console is cleared every time you navigate to a new  page.
This means you will have to view every page of your site individually to find these errors.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;finding-mixed-content-in-your-site&quot;&gt;Finding mixed content in your site &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#finding-mixed-content-in-your-site&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can search for mixed content directly in your source code.
Search for &lt;code&gt;http://&lt;/code&gt; in your source and look for tags that include HTTP URL attributes.
Note that having &lt;code&gt;http://&lt;/code&gt; in the &lt;code&gt;href&lt;/code&gt; attribute of anchor tags (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;)
is often not a mixed content issue, with some notable exceptions discussed later.&lt;/p&gt;
&lt;p&gt;If your site is published using a content management system,
it is possible that links to insecure URLs are inserted when pages are published.
For example, images may be included with a full URL rather than a relative path.
You will need to find and fix these within the CMS content.&lt;/p&gt;
&lt;h3 id=&quot;fixing-mixed-content&quot;&gt;Fixing mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#fixing-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you&#39;ve found mixed content in your site&#39;s source,
you can follow these steps to fix it.&lt;/p&gt;
&lt;p&gt;If you get a console message that a resource request has been automatically upgraded from HTTP to HTTPS,
you can safely change the &lt;code&gt;http://&lt;/code&gt; URL for the resource in your code to &lt;code&gt;https://&lt;/code&gt;.
You can also check to see if a resource is available securely by changing &lt;code&gt;http://&lt;/code&gt; to &lt;code&gt;https://&lt;/code&gt; in the browser URL bar
and attempting to open the URL in a browser tab.&lt;/p&gt;
&lt;p&gt;If the resource is not available via &lt;code&gt;https://&lt;/code&gt;, you should consider one of the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Include the resource from a different host, if one is available.&lt;/li&gt;
&lt;li&gt;Download and host the content on your site directly, if you are legally allowed to do so.&lt;/li&gt;
&lt;li&gt;Exclude the resource from your site altogether.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having fixed the problem,
view the page where you found the error originally and verify that the error no longer appears.&lt;/p&gt;
&lt;h3 id=&quot;beware-of-non-standard-tag-usage&quot;&gt;Beware of non-standard tag usage &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#beware-of-non-standard-tag-usage&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Beware of non-standard tag usage on your site.
For instance, anchor (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) tag URLs don&#39;t result in mixed content errors,
as they cause the browser to navigate to a new page.
This means they usually don&#39;t need to be fixed.
However some image gallery scripts override the functionality of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;
tag and load the HTTP resource specified by the &lt;code&gt;href&lt;/code&gt; attribute into a lightbox display on the page,
causing a mixed content problem.&lt;/p&gt;
&lt;h2 id=&quot;handle-mixed-content-at-scale&quot;&gt;Handle mixed content at scale &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#handle-mixed-content-at-scale&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The manual steps above work well for smaller websites;
but for large websites or sites with many separate development teams,
it can be tough to keep track of all the content being loaded.
To help with this task, you can use content security policy
to instruct the browser to notify you about mixed content and ensure that your pages never unexpectedly load insecure resources.&lt;/p&gt;
&lt;h3 id=&quot;content-security-policy&quot;&gt;Content security policy &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#content-security-policy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/security/csp/&quot; rel=&quot;noopener&quot;&gt;Content security policy&lt;/a&gt; (CSP)
is a multi-purpose browser feature that you can use to manage mixed content at scale.
The CSP reporting mechanism can be used to track mixed content on your site,
and provide enforcement policies to protect users by upgrading or blocking mixed content.&lt;/p&gt;
&lt;p&gt;You can enable these features for a page by including the
&lt;code&gt;Content-Security-Policy&lt;/code&gt; or &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt; header in the response sent from your server.
Additionally you can set &lt;code&gt;Content-Security-Policy&lt;/code&gt;
(though &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt;) using a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your page.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Modern browsers enforce all content security policies that they receive.
Multiple CSP header values received by the browser in the response header or
&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; elements are combined and enforced as a single policy;
reporting policies are likewise combined.
Policies are combined by taking the intersection of the policies;
that is to say, each policy after the first can only further restrict the allowed content, not broaden it.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;finding-mixed-content-with-content-security-policy&quot;&gt;Finding mixed content with content security policy &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#finding-mixed-content-with-content-security-policy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use content security policy to collect reports of mixed content on your site.
To enable this feature, set the &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt; directive by adding it as a response header for your site.&lt;/p&gt;
&lt;p&gt;Response header:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Content-Security-Policy-Report-Only: default-src https: &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;; report-uri https://example.com/reportingEndpoint&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-uri&quot; rel=&quot;noopener&quot;&gt;report-uri&lt;/a&gt; response header is being deprecated in favor of
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to&quot; rel=&quot;noopener&quot;&gt;report-to&lt;/a&gt;.
Browser support for &lt;code&gt;report-to&lt;/code&gt; is currently limited to Chrome and Edge.
You can provide both headers, in which case &lt;code&gt;report-uri&lt;/code&gt; will be ignored if the browser supports &lt;code&gt;report-to&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Whenever a user visits a page on your site,
their browser sends JSON-formatted reports regarding anything that violates the content security policy to
&lt;code&gt;https://example.com/reportingEndpoint&lt;/code&gt;.
In this case, anytime a subresource is loaded over HTTP, a report is sent.
These reports include the page URL where the policy violation occurred and the subresource URL that violated the policy.
If you configure your reporting endpoint to log these reports,
you can track the mixed content on your site without visiting each page yourself.&lt;/p&gt;
&lt;p&gt;The two caveats to this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users have to visit your page in a browser that understands the CSP header. This is true for most modern browsers.&lt;/li&gt;
&lt;li&gt;You only get reports for pages visited by your users.
So if you have pages that don&#39;t get much traffic,
it might be some time before you get reports for your entire site.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://developers.google.com/web/fundamentals/security/csp/&quot; rel=&quot;noopener&quot;&gt;Content security policy&lt;/a&gt;
guide has more information and an example endpoint.&lt;/p&gt;
&lt;h3 id=&quot;alternatives-to-reporting-with-csp&quot;&gt;Alternatives to reporting with CSP &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#alternatives-to-reporting-with-csp&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your site is hosted for you by a platform such as Blogger,
you may not have access to modify headers and add a CSP.
Instead, a viable alternative could be to use a website crawler to find issues across your site for you, such as
&lt;a href=&quot;https://httpschecker.net/how-it-works#httpsChecker&quot; rel=&quot;noopener&quot;&gt;HTTPSChecker&lt;/a&gt;
or
&lt;a href=&quot;https://github.com/bramus/mixed-content-scan&quot; rel=&quot;noopener&quot;&gt;Mixed Content Scan&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;upgrading-insecure-requests&quot;&gt;Upgrading insecure requests &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#upgrading-insecure-requests&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Browsers are beginning to upgrade and block insecure requests.
You can use CSP directives to force automatic upgrading or blocking of these assets.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.w3.org/TR/upgrade-insecure-requests/&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;upgrade-insecure-requests&lt;/code&gt;&lt;/a&gt;
CSP directive instructs the browser to upgrade insecure URLs before making network requests.&lt;/p&gt;
&lt;p&gt;As an example, if a page contains an image tag with an HTTP URL such as
&lt;code&gt;&amp;lt;img src=&amp;quot;http://example.com/image.jpg&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The browser instead makes a secure request for
&lt;code&gt;https://example.com/image.jpg&lt;/code&gt;, thus saving the user from mixed content.&lt;/p&gt;
&lt;p&gt;You can enable this behavior either by sending a &lt;code&gt;Content-Security-Policy&lt;/code&gt; header with this directive:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-markup&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;Content-Security-Policy: upgrade-insecure-requests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Or by embedding that same directive inline in the document&#39;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
section using a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Content-Security-Policy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;upgrade-insecure-requests&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;As with browser automatic upgrading, if the resource is not available over HTTPS,
the upgraded request fails and the resource is not loaded.
This maintains the security of your page. The &lt;code&gt;upgrade-insecure-requests&lt;/code&gt; directive will go further than automatic browser upgrading,
attempting to upgrade requests that the browser currently does not.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;upgrade-insecure-requests&lt;/code&gt; directive cascades into &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; documents,
ensuring the entire page is protected.&lt;/p&gt;
&lt;h3 id=&quot;blocking-all-mixed-content&quot;&gt;Blocking all mixed content &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/fixing-mixed-content/#blocking-all-mixed-content&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An alternative option for protecting users is the
&lt;a href=&quot;https://www.w3.org/TR/mixed-content/#strict-checking&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;block-all-mixed-content&lt;/code&gt;&lt;/a&gt; CSP directive.
This directive instructs the browser to never load mixed content;
all mixed content resource requests are blocked,
including both active and passive mixed content.
This option also cascades into &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; documents, ensuring the entire page is mixed content free.&lt;/p&gt;
&lt;p&gt;A page can opt itself into this behavior either by sending a
&lt;code&gt;Content-Security-Policy&lt;/code&gt; header with this directive:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-markup&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;Content-Security-Policy: block-all-mixed-content&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Or by embedding that same directive inline in the document&#39;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
section using a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Content-Security-Policy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;block-all-mixed-content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;If you set both &lt;code&gt;upgrade-insecure-requests&lt;/code&gt; and &lt;code&gt;block-all-mixed-content&lt;/code&gt;
&lt;code&gt;upgrade-insecure-requests&lt;/code&gt; will be evaluated and used first.
The browser will not go on to block requests.
Therefore you should use one or the other.&lt;/p&gt;
&lt;/div&gt;
</content>
    <author>
      <name>Jo-el van Bergen</name>
    </author><author>
      <name>Rachel Andrew</name>
    </author>
  </entry>
  
  <entry>
    <title>The &lt;video&gt; and &lt;source&gt; tags</title>
    <link href="https://web.dev/video-and-source-tags/"/>
    <updated>2015-02-15T00:00:00Z</updated>
    <id>https://web.dev/video-and-source-tags/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;You&#39;ve properly &lt;a href=&quot;https://web.dev/prepare-media/&quot;&gt;prepared a video file&lt;/a&gt; for the web. You&#39;ve
given it correct dimensions and the correct resolution. You&#39;ve even created
separate WebM and MP4 files for different browsers.&lt;/p&gt;
&lt;p&gt;For anyone to see it, you still need to add it to a web page. Doing so properly
requires two HTML elements: the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt;
element and the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;&lt;/a&gt;.
In addition to basics about these tags, this section also explains attributes
you should add to those tags to craft a good user experience.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;You always have the option of uploading your file to
&lt;a href=&quot;https://www.youtube.com/&quot; rel=&quot;noopener&quot;&gt;YouTube&lt;/a&gt; or &lt;a href=&quot;https://vimeo.com/&quot; rel=&quot;noopener&quot;&gt;Vimeo&lt;/a&gt;. In many
cases, this is preferable to the procedure described here. Those services handle
formatting and filetype conversion for you, as well as provide the means to
embed a video in your web page. If you need to manage this yourself, read on.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;specify-a-single-file&quot;&gt;Specify a single file &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-and-source-tags/#specify-a-single-file&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although it&#39;s not recommended, you can use the video element by itself. Always
use the &lt;code&gt;type&lt;/code&gt; attribute as shown below. The browser uses this to determine if
it can play the provided video file. If it can&#39;t, the enclosed text displays.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;chrome.webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Your browser cannot play the provided video file.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3 id=&quot;specify-multiple-file-formats&quot;&gt;Specify multiple file formats &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-and-source-tags/#specify-multiple-file-formats&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Recall from &lt;a href=&quot;https://web.dev/media-file-basics&quot;&gt;Media file basics&lt;/a&gt; that not all browsers support the same
video formats. The &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element lets you specify multiple formats as a
fallback in case the user&#39;s browser doesn&#39;t support one of them.&lt;/p&gt;
&lt;p&gt;The example below produces the embedded video that immediately follows.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://storage.googleapis.com/web-dev-assets/video-and-source-tags/chrome.webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://storage.googleapis.com/web-dev-assets/video-and-source-tags/chrome.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Your browser cannot play the provided video file.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://track-demonstration.glitch.me/&quot; rel=&quot;noopener&quot;&gt;Try it&lt;/a&gt; (&lt;a href=&quot;https://glitch.com/edit/#!/track-demonstration&quot; rel=&quot;noopener&quot;&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;You should always add a &lt;code&gt;type&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; tags event though it
is optional. This ensures that the browser only downloads the file that it is
capable of playing.&lt;/p&gt;
&lt;p&gt;This approach has several advantages over serving different HTML or server-side
scripting, especially on mobile:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can list formats in order of preference.&lt;/li&gt;
&lt;li&gt;Client-side switching reduces latency; only one request is made to
get content.&lt;/li&gt;
&lt;li&gt;Letting the browser choose a format is simpler, quicker, and potentially
more reliable than using a server-side support database with user-agent detection.&lt;/li&gt;
&lt;li&gt;Specifying each file source&#39;s type improves network performance; the browser can select a
video source without having to download part of the video to &amp;quot;sniff&amp;quot; the format.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These issues are especially important in mobile contexts, where bandwidth and
latency are at a premium and the user&#39;s patience is likely limited. Omitting the
&lt;code&gt;type&lt;/code&gt; attribute can affect performance when there are multiple sources with
unsupported types.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;There are a few ways you can dig into the details. Check out &lt;a href=&quot;https://www.xiph.org/video/vid1.shtml&quot; rel=&quot;noopener&quot;&gt;A
Digital Media Primer for Geeks&lt;/a&gt; to find out
more about how video and audio work on the web. You can also use &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/remote-debugging&quot; rel=&quot;noopener&quot;&gt;remote
debugging&lt;/a&gt;
in DevTools to compare network activity &lt;a href=&quot;https://googlesamples.github.io/web-fundamentals/fundamentals/media/video-main.html&quot; rel=&quot;noopener&quot;&gt;with type
attributes&lt;/a&gt;
and &lt;a href=&quot;https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ux/responsive/notype.html&quot; rel=&quot;noopener&quot;&gt;without type
attributes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also check the response headers in your browser developer tools to
&lt;a href=&quot;https://developer.mozilla.org/en/docs/Properly_Configuring_Server_MIME_Types&quot; rel=&quot;noopener&quot;&gt;ensure your server reports the right MIME type&lt;/a&gt;;
otherwise video source type checks won&#39;t work.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;specify-start-and-end-times&quot;&gt;Specify start and end times &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-and-source-tags/#specify-start-and-end-times&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Save bandwidth and make your site feel more responsive: use media fragments to
add start and end times to the video element.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;video controls=&quot;&quot; class=&quot;w-screenshot&quot;&gt;
    &lt;source src=&quot;https://storage.googleapis.com/web-dev-assets/video-and-source-tags/chrome.webm#t=5,10&quot; type=&quot;video/webm&quot; /&gt;
    &lt;source src=&quot;https://storage.googleapis.com/web-dev-assets/video-and-source-tags/chrome.mp4#t=5,10&quot; type=&quot;video/mp4&quot; /&gt;
    &lt;p&gt;This browser does not support the video element.&lt;/p&gt;
  &lt;/video&gt;
&lt;/figure&gt;
&lt;p&gt;To use a media fragment, add &lt;code&gt;#t=[start_time][,end_time]&lt;/code&gt; to the media URL. For
example, to play the video from seconds 5 to 10, specify:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/chrome.webm#t=5,10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You can also specify the times in &lt;code&gt;&amp;lt;hours&amp;gt;:&amp;lt;minutes&amp;gt;:&amp;lt;seconds&amp;gt;&lt;/code&gt;. For example,
&lt;code&gt;#t=00:01:05&lt;/code&gt; starts the video at one minute, five seconds. To play only the
first minute of video, specify &lt;code&gt;#t=,00:01:00&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can use this feature to deliver multiple views on the same video–like
cue points in a DVD–without having to encode and serve multiple files.&lt;/p&gt;
&lt;p&gt;For this feature to work, your server must support range requests and that
capability must be enabled. Most servers enable range requests by default.
Because some hosting services turn them off, you should confirm that range
requests are available for using fragments on your site.&lt;/p&gt;
&lt;p&gt;Fortunately, you can do this in your browser developer tools. In Chrome, for
instance, it&#39;s in the &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/?utm_source=devtools#network&quot; rel=&quot;noopener&quot;&gt;Network
panel&lt;/a&gt;.
Look for the &lt;code&gt;Accept-Ranges&lt;/code&gt; header is and verify that it says &lt;code&gt;bytes&lt;/code&gt;. In a the
image, I&#39;ve drawn a red box  around this header. If you do not see &lt;code&gt;bytes&lt;/code&gt; as
the value, you&#39;ll need to contact your hosting provider.&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Chrome DevTools screenshot: Accept-Ranges: bytes.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;480&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/20DlLyicG5PAo6TXBKh3.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Chrome DevTools screenshot: Accept-Ranges: bytes.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;include-a-poster-image&quot;&gt;Include a poster image &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-and-source-tags/#include-a-poster-image&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Add a poster attribute to the &lt;code&gt;video&lt;/code&gt; element so that viewers have an idea of
the content as soon as the element loads, without needing to download the video
or start playback.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;poster&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;poster.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  …&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;A poster can also be a fallback if the video &lt;code&gt;src&lt;/code&gt; is broken or if none of the
supplied video formats are supported. The only downside to a poster images is an
additional file request, which consumes some bandwidth and requires rendering.
For more information see &lt;a href=&quot;https://web.dev/uses-optimized-images/&quot;&gt;Efficiently encode images&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;w-columns&quot;&gt;
&lt;figure class=&quot;w-compare&quot;&gt;&lt;p class=&quot;w-compare__label w-compare__label--worse&quot;&gt;Don&#39;t&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot; w-figure--inline-left=&quot;&quot;&gt;
  &lt;img alt=&quot;Without a fallback poster, the video just looks broken.&quot; decoding=&quot;async&quot; height=&quot;600&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 360px) 360px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/R8VNeplKwajJhOuVkPDT.png?auto=format&amp;w=720 720w&quot; width=&quot;360&quot; /&gt;
&lt;/figure&gt;
&lt;figcaption class=&quot;w-compare__caption&quot;&gt;
&lt;p&gt;Without a fallback poster, the video just looks broken.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;w-compare&quot;&gt;&lt;p class=&quot;w-compare__label w-compare__label--better&quot;&gt;Do&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot; w-figure--inline-right=&quot;&quot;&gt;
  &lt;img alt=&quot;A fallback poster makes it seem as if the first frame has been captured.&quot; decoding=&quot;async&quot; height=&quot;600&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 360px) 360px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/rNhydHVGeL2P0sQ0je5k.png?auto=format&amp;w=720 720w&quot; width=&quot;360&quot; /&gt;
&lt;/figure&gt;
&lt;figcaption class=&quot;w-compare__caption&quot;&gt;
&lt;p&gt;A fallback poster makes it seem as if the first frame has been captured.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&quot;ensure-videos-don&#39;t-overflow-containers&quot;&gt;Ensure videos don&#39;t overflow containers &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-and-source-tags/#ensure-videos-don&#39;t-overflow-containers&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When video elements are too big for the viewport, they may overflow their
container, making it impossible for the user to see the content or use the
controls.&lt;/p&gt;
&lt;div class=&quot;w-columns&quot;&gt;
  &lt;figure class=&quot;w-figure&quot;&gt;
    &lt;img alt=&quot;Android Chrome screenshot, portrait: unstyled video element overflows viewport.&quot; decoding=&quot;async&quot; height=&quot;600&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 338px) 338px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/cDl2OfCE3hQivhaNvMUh.png?auto=format&amp;w=676 676w&quot; width=&quot;338&quot; /&gt;
    &lt;figcaption class=&quot;w-figcaption&quot;&gt;Android Chrome screenshot, portrait: unstyled video element overflows
    viewport.&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure class=&quot;w-figure&quot;&gt;
    &lt;img alt=&quot;Android Chrome screenshot, landscape: unstyled video element overflows viewport.&quot; decoding=&quot;async&quot; height=&quot;450&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bCiZsNkZNsAhWbOBsLCs.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
    &lt;figcaption class=&quot;w-figcaption&quot;&gt;Android Chrome screenshot, landscape: unstyled video element overflows
    viewport.&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;You can control video dimensions using CSS. If CSS does not meet all of your
needs, JavaScript libraries and plugins such as &lt;a href=&quot;http://fitvidsjs.com/&quot; rel=&quot;noopener&quot;&gt;FitVids&lt;/a&gt;
(outside the scope of this article) can help, even for videos from YouTube and
other sources. Unfortunately, these resources can increase your &lt;a href=&quot;https://web.dev/total-byte-weight/&quot;&gt;network payload
sizes&lt;/a&gt; with negative consequences for your
revenues and your users&#39; wallets.&lt;/p&gt;
&lt;p&gt;For simple uses like the ones I&#39;m describing here, use &lt;a href=&quot;https://developers.google.com/web/fundamentals/design-and-ux/responsive/#css-media-queries&quot; rel=&quot;noopener&quot;&gt;CSS media
queries&lt;/a&gt; to
specify the size of elements depending on the viewport dimensions; &lt;code&gt;max-width: 100%&lt;/code&gt; is your friend.&lt;/p&gt;
&lt;p&gt;For media content in iframes (such as YouTube videos), try a responsive approach
(like the one &lt;a href=&quot;http://avexdesigns.com/responsive-youtube-embed/&quot; rel=&quot;noopener&quot;&gt;proposed by John
Surdakowski&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--caution&quot;&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;:
Don&#39;t force element sizing that results in an &lt;a href=&quot;https://www.google.com/search?q=aspect+ratio&amp;amp;oq=aspect+ratio&amp;amp;aqs=chrome..69i57j35i39j0l6.1896j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&quot; rel=&quot;noopener&quot;&gt;aspect
ratio&lt;/a&gt;
different from the original video. Squashed or stretched videos looks bad.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.video-container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;padding-bottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 56.25%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.video-container iframe,&lt;br /&gt;.video-container object,&lt;br /&gt;.video-container embed&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;//www.youtube.com/embed/l-BA9Ee2XuM&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token attr-name&quot;&gt;frameborder&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;560&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;315&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;iframe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://googlesamples.github.io/web-fundamentals/fundamentals/media/responsive_embed.html&quot; rel=&quot;noopener&quot;&gt;Try it&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Compare the &lt;a href=&quot;https://googlesamples.github.io/web-fundamentals/fundamentals/media/responsive_embed.html&quot; rel=&quot;noopener&quot;&gt;responsive sample&lt;/a&gt;
to the &lt;a href=&quot;https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ux/responsive/unyt.html&quot; rel=&quot;noopener&quot;&gt;unresponsive version&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;device-orientation&quot;&gt;Device orientation &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-and-source-tags/#device-orientation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Device orientation isn&#39;t an issue for desktop monitors or laptops, but it&#39;s
hugely important when considering web page design for mobile devices and
tablets.&lt;/p&gt;
&lt;p&gt;Safari on iPhone does a good job of switching between portrait and landscape
orientation:&lt;/p&gt;
&lt;div class=&quot;w-columns&quot;&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of video playing in Safari on iPhone, portrait.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;600&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 338px) 338px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/AmHneDShMOioWZwYG2kF.png?auto=format&amp;w=676 676w&quot; width=&quot;338&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Screenshot of video playing in Safari on iPhone, portrait.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of video playing in Safari on iPhone, landscape.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;338&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 600px) 600px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/MZwkLJaXVk4g8lruhiKZ.png?auto=format&amp;w=1200 1200w&quot; width=&quot;600&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Screenshot of video playing in Safari on iPhone, landscape.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Device orientation on an iPad and Chrome on Android can be problematic.
For example, without any customization a video playing on an iPad in landscape
orientation looks like this:&lt;/p&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;Screenshot of video playing in Safari on iPad, landscape.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;450&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 600px) 600px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/9FsExgY6cJFfMkxOPNkl.png?auto=format&amp;w=1200 1200w&quot; width=&quot;600&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Screenshot of video playing in Safari on iPad, landscape.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Setting the video &lt;code&gt;width: 100%&lt;/code&gt; or &lt;code&gt;max-width: 100%&lt;/code&gt; with CSS can resolve
many device orientation layout problems.&lt;/p&gt;
&lt;h3 id=&quot;autoplay&quot;&gt;Autoplay &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-and-source-tags/#autoplay&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;autoplay&lt;/code&gt; attribute controls whether the browser downloads and plays a
video immediately. The precise way it works depends on the platform and browser.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Chrome: Depends on multiple factors including but not limited to whether the
viewing is on desktop and whether the a mobile user has added your site or app
to their homescreen. For  details, see &lt;a href=&quot;https://developers.google.com/web/updates/2017/09/autoplay-policy-changes&quot; rel=&quot;noopener&quot;&gt;Autoplay Policy
Changes&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Firefox: Blocks all video and sound, but gives user the ability to relax these
restrictions for either all sites or particular sites. For details, see &lt;a href=&quot;https://web.dev/video-and-source-tags/&quot;&gt;Allow
or block media autoplay in Firefox&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Safari: Has historically required a user gesture, but has been relaxing that
requirement in recent versions. For details, see &lt;a href=&quot;https://webkit.org/blog/6784/new-video-policies-for-ios/&quot; rel=&quot;noopener&quot;&gt;New &amp;lt;video&amp;gt; Policies for
iOS&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even on platforms where autoplay is possible, you need to consider whether
it&#39;s a good idea to enable it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data usage can be expensive.&lt;/li&gt;
&lt;li&gt;Playing media before the user wants it can hog bandwidth and CPU, and thereby
delay page rendering.&lt;/li&gt;
&lt;li&gt;Users may be in a context where playing video or audio is intrusive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;preload&quot;&gt;Preload &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-and-source-tags/#preload&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;preload&lt;/code&gt; attribute provides a hint to the browser as to how much
information or content to preload.&lt;/p&gt;
&lt;table class=&quot;responsive&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Value&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td data-th=&quot;Value&quot;&gt;&lt;code&gt;none&lt;/code&gt;&lt;/td&gt;
      &lt;td data-th=&quot;Description&quot;&gt;The user might chose not to watch the video, so don&#39;t
      preload anything.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td data-th=&quot;Value&quot;&gt;&lt;code&gt;metadata&lt;/code&gt;&lt;/td&gt;
      &lt;td data-th=&quot;Description&quot;&gt;Metadata (duration, dimensions, text tracks) should be
      preloaded, but with minimal video.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td data-th=&quot;Value&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
      &lt;td data-th=&quot;Description&quot;&gt;Downloading the entire video right away is considered
      desirable. An empty string produces the same result.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;preload&lt;/code&gt; attribute has different effects on different platforms.
For example, Chrome buffers 25 seconds of video on desktop but none on iOS or
Android. This means that on mobile, there may be playback startup delays
that don&#39;t happen on desktop. See &lt;a href=&quot;https://www.stevesouders.com/blog/2013/04/12/html5-video-preload/&quot; rel=&quot;noopener&quot;&gt;Steve Souders&#39;
blog&lt;/a&gt; for
full details.&lt;/p&gt;
</content>
    <author>
      <name>Sam Dutton</name>
    </author><author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>Bitrate</title>
    <link href="https://web.dev/bitrate/"/>
    <updated>2017-06-30T00:00:00Z</updated>
    <id>https://web.dev/bitrate/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;In the &lt;a href=&quot;https://web.dev/containers-and-codecs&quot;&gt;previous section&lt;/a&gt;, I showed you how to change
a media file&#39;s container and codec. In this section, I show how to change
bitrate before explaining &lt;a href=&quot;https://web.dev/resolution&quot;&gt;resolution&lt;/a&gt; and, finally, &lt;a href=&quot;https://web.dev/add-media&quot;&gt;how to
embed your file in a page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bitrate and resolution correlate to the amount of data in a media file. It
probably goes without saying, but I&#39;m going to say it anyway. You can always
lower bitrate and resolution, but increasing them is a problem. Without special
software and algorithms, quality is going to take a hit.&lt;/p&gt;
&lt;p&gt;So always start your conversion process with the highest quality source file you
can get your hands on. Before doing anything, even before changing the codec or
container, &lt;a href=&quot;https://web.dev/media-cheat-sheet/#display-characteristics&quot;&gt;check the file
characteristics&lt;/a&gt; and verify that your
source file has a higher bitrate or resolution than your desired result.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bitrate&lt;/em&gt; is the maximum number of bits used to encode one second of a media stream.
The more bits used to encode a second of stream, the higher the fidelity.&lt;/p&gt;
&lt;p&gt;Unsurprisingly, bitrates the web can handle are low. The table below shows you
what bitrate you should target for common network conditions. For the sake of
comparison, I&#39;ve thrown in values for Blu-rays and DVDs.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;The web numbers are approximations. This chart should not be a substitute for
doing your own testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Delivery method&lt;/th&gt;
&lt;th&gt;Bitrate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Blu-ray&lt;/td&gt;
&lt;td&gt;20Mbs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DVD&lt;/td&gt;
&lt;td&gt;6 Mbs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Desktop web&lt;/td&gt;
&lt;td&gt;2 Mbs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4G mobile&lt;/td&gt;
&lt;td&gt;0.7 Mbs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3G mobile&lt;/td&gt;
&lt;td&gt;0.35 Mbs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2G mobile&lt;/td&gt;
&lt;td&gt;Depends on network type.&lt;ul&gt;&lt;li&gt;EDGE: 0.4 Mbs&lt;/li&gt;&lt;li&gt;GPRS: 0.04Mbs&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;p&gt;Which value should I use for video on my web pages? The short answer is at
least: desktop, 4G, and 3G. If you&#39;re serving video in one of the markets
referred to as &amp;quot;the next billion users&amp;quot;, say India, for example, you&#39;ll want to
include 2G as well. For demonstration purposes, I&#39;m going to target 3G.&lt;/p&gt;
&lt;p&gt;In FFmpeg you set the bitrate with the (surprise!) bitrate (&lt;code&gt;-b&lt;/code&gt;) flag.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i glocken.mov -b:v 350k -b:a 64k glocken.mp4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Notice that there are two bitrate flags, &lt;code&gt;-b:a&lt;/code&gt; and &lt;code&gt;-b:v&lt;/code&gt;. One is for audio and the
other is for video.&lt;/p&gt;
&lt;p&gt;Now that your files are prepared, it&#39;s time to &lt;a href=&quot;https://web.dev/resolution&quot;&gt;adjust their resolutions&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>What is a media experience?</title>
    <link href="https://web.dev/media-experience/"/>
    <updated>2017-06-30T00:00:00Z</updated>
    <id>https://web.dev/media-experience/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Users like media, especially videos; they can be fun and informative. On mobile
devices, videos can be an easier way to consume information than text. For a
good user experience, videos should not need more than the available bandwidth.
Users should be able to use them no matter what device they&#39;re viewing them
with. Users should never need to wait for download. Who likes it when they press
play and nothing happens?&lt;/p&gt;
&lt;p&gt;You&#39;ve no doubt consumed video on your own device. Which means that nothing in
that last paragraph surprises you. Now you need to learn how to put a video or
other media file on your own website. The technical requirements of that work
should be in service to the user experience. Those technical requirements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions of a media file in common web-friendly formats containing both audio
and video streams.&lt;/li&gt;
&lt;li&gt;A resolution appropriate for your users&#39; devices.&lt;/li&gt;
&lt;li&gt;A bitrate that doesn&#39;t overload your users&#39; network bandwidth.&lt;/li&gt;
&lt;li&gt;(Optional) Encryption.&lt;/li&gt;
&lt;li&gt;Viewable on all major browsers using appropriate technologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our &lt;a href=&quot;https://web.dev/media&quot;&gt;media&lt;/a&gt; collection will help you achieve these technical
requirements. Don&#39;t worry if you don&#39;t know what these technical requirements
mean. I&#39;ll explain them.&lt;/p&gt;
&lt;p&gt;There are four approaches you can take displaying video on a site.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upload your content to a hosting site such as
&lt;a href=&quot;https://www.youtube.com/&quot; rel=&quot;noopener&quot;&gt;YouTube&lt;/a&gt; or &lt;a href=&quot;https://vimeo.com/&quot; rel=&quot;noopener&quot;&gt;Vimeo&lt;/a&gt;. These
options do not preclude displaying from within your website.&lt;/li&gt;
&lt;li&gt;Basic embedding using the HTML &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; elements.&lt;/li&gt;
&lt;li&gt;More full-featured embedding using a video library such as &lt;a href=&quot;https://github.com/google/shaka-player&quot; rel=&quot;noopener&quot;&gt;Google&#39;s Shaka
Player&lt;/a&gt;, &lt;a href=&quot;https://developer.jwplayer.com/&quot; rel=&quot;noopener&quot;&gt;JW
Player&lt;/a&gt;, or &lt;a href=&quot;http://videojs.com/&quot; rel=&quot;noopener&quot;&gt;Video.js&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Building your own media streaming application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This site only covers the second option, at least for now. The last item,
building a media streaming application is beyond the scope of this site.
Frankly, it requires a team of expert programmers and thousands of human-hours
of work. Unless your goal is to enter that market as a competitor, you&#39;re better
off using one of the other methods.&lt;/p&gt;
&lt;p&gt;This site has three parts. In the first, I&#39;ll provide information prerequisite
to adding media to your site. This includes explaining how media files are put
together and basics about the applications you&#39;ll need to prepare your files for
the web. The second section explains how to prepare your files. In the last, I
show how to embed a media file in a web page and make it accessible.&lt;/p&gt;
</content>
    <author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>Prepare media files for the web</title>
    <link href="https://web.dev/prepare-media/"/>
    <updated>2017-06-30T00:00:00Z</updated>
    <id>https://web.dev/prepare-media/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Now that I&#39;ve introduced you to &lt;a href=&quot;https://web.dev/media-application-basics&quot;&gt;applications used for manipulating media
files&lt;/a&gt;, over the next few pages, I&#39;m going to take a raw
video file off a camera and transform it into a resource that you can
embed in a web page. I&#39;m specifically going to show you how to format your video
for mobile playback, and how to create multiple files to cover a range of
browsers. Specifically, I&#39;ll create a WebM file for use on Chrome and an MP4
file for use on other browsers.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This section provides explanations of file manipulation concepts,
with command lines only to illustrate the concepts. There is a companion &lt;a href=&quot;https://web.dev/media-cheat-sheet&quot;&gt;cheat
sheet&lt;/a&gt; that shows more commands and is designed as a quick reference
for someone who knows the concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The result of this procedure will be media resources with the following
characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions of a media file in common web-friendly formats containing both audio
and video streams.&lt;/li&gt;
&lt;li&gt;A resolution appropriate for your users&#39; devices.&lt;/li&gt;
&lt;li&gt;A bitrate that doesn&#39;t overload your users&#39; network bandwidth.&lt;/li&gt;
&lt;li&gt;Viewable on all major browsers using appropriate technologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By &amp;quot;appropriate technologies&amp;quot; I mean &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/DASH_Adaptive_Streaming_for_HTML_5_Video&quot; rel=&quot;noopener&quot;&gt;Dynamic Adaptive Streaming over HTTP
(DASH)&lt;/a&gt;
or &lt;a href=&quot;https://developer.apple.com/documentation/http_live_streaming&quot; rel=&quot;noopener&quot;&gt;HTTP Live Streaming
(HLS)&lt;/a&gt;, which are
the two primary means of providing video in HTML on the major browsers. What
those terms mean and how to use them is a whole topic itself. I won&#39;t be getting
into those, and you don&#39;t really need to know much about them,
but by the end of this article, you&#39;ll be able to create media files
that are ready for use in DASH and HLS.&lt;/p&gt;
&lt;p&gt;One final note: my selection of the file formats, bitrate, and resolution are
not arbitrary. I&#39;ve selected these values for speedy playback on the mobile web.&lt;/p&gt;
&lt;p&gt;If you want to play along at home, you&#39;ll need a raw video file off a camera,
preferably one that contains both audio and video. If you don&#39;t have one handy,
then here&#39;s &lt;a href=&quot;https://storage.googleapis.com/web-dev-assets/prepare-media/glocken.mov&quot; rel=&quot;noopener&quot;&gt;ten seconds of an &lt;code&gt;.mov&lt;/code&gt;
file&lt;/a&gt;
that I took of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rathaus-Glockenspiel&quot; rel=&quot;noopener&quot;&gt;Rathaus-Glockenspiel&lt;/a&gt;
in Munich&#39;s MarienPlatz.&lt;/p&gt;
&lt;p&gt;Now, let&#39;s create a media file using the correct &lt;a href=&quot;https://web.dev/containers-and-codecs&quot;&gt;containers and
codecs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This section covers four tasks. You will need to do all of them to prepare an
&lt;code&gt;.mov&lt;/code&gt; file for display on the web.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In &lt;a href=&quot;https://web.dev/containers-and-codecs&quot;&gt;Containers and codecs&lt;/a&gt; I show you how to
convert an &lt;code&gt;.mov&lt;/code&gt; file to the formats required for web playback.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;a href=&quot;https://web.dev/bitrate&quot;&gt;Bitrate&lt;/a&gt; and &lt;a href=&quot;https://web.dev/resolution&quot;&gt;Resolution&lt;/a&gt; you&#39;ll learn to make
your files smaller and hence friendlier for low-bandwidth and mobile
download.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After your files are prepared, you&#39;ll &lt;a href=&quot;https://web.dev/add-media&quot;&gt;add them to a web page&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>Resolution</title>
    <link href="https://web.dev/resolution/"/>
    <updated>2017-06-30T00:00:00Z</updated>
    <id>https://web.dev/resolution/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;In previous sections I showed you how to change a media file&#39;s &lt;a href=&quot;https://web.dev/containers-and-codecs&quot;&gt;codec,
containers&lt;/a&gt;, and &lt;a href=&quot;https://web.dev/bitrate&quot;&gt;bitrate&lt;/a&gt;. This page
covers resolution. Then I&#39;ll move on to &lt;a href=&quot;https://web.dev/add-media&quot;&gt;adding them to a web
page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Resolution&lt;/em&gt; is the amount of information in a single frame of video, given as
the number of logical pixels in each dimension. For example, a resolution of
1920 by 1080 works out to 1080 stacked horizontal lines, each of which is one
logical pixel high and 1920 logical pixels wide. This resolution is frequently
abbreviated 1080p because technically the width can vary. The dimensions 1080 by
1920 produce an &lt;a href=&quot;https://en.wikipedia.org/wiki/Aspect_ratio_(image)&quot; rel=&quot;noopener&quot;&gt;aspect
ratio&lt;/a&gt; of 16:9, which is the
ratio of movie screens and modern television sets. By the way this is the
resolution defined as &lt;a href=&quot;https://www.google.com/search?q=what+is+hd+resolution&amp;amp;oq=what+is+hd+resolution&amp;amp;aqs=chrome.0.0l6.3183j0j8&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8#q=full+hd+resolution&quot; rel=&quot;noopener&quot;&gt;full
HD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://support.google.com/youtube/answer/6375112&quot; rel=&quot;noopener&quot;&gt;YouTube recommends&lt;/a&gt; the
following resolutions for video uploads, all in the 16:9 aspect ratio. There&#39;s
nothing specific to YouTube about this list. It&#39;s just a list of common 16:9
video resolutions.&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Abbreviation&lt;/th&gt;
&lt;th&gt;Dimensions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2160p&lt;/td&gt;
&lt;td&gt;3840 x 2160&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1440p&lt;/td&gt;
&lt;td&gt;2560 x 1440&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1080p&lt;/td&gt;
&lt;td&gt;1920 x 1080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;720p&lt;/td&gt;
&lt;td&gt;1280 x 720&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;480p&lt;/td&gt;
&lt;td&gt;854 x 480&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;360p&lt;/td&gt;
&lt;td&gt;640 x 360&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;240p&lt;/td&gt;
&lt;td&gt;426 x 240&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;p&gt;Which one should you use? That depends on your application. For simple embedding
you may chose a single resolution. If you&#39;re preparing files for DASH or HLS,
you may chose one, several, or all. Fortunately, this is one of the simplest
transformations you&#39;ll make with FFmpeg.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -i glocken.webm -s 640x360 glocken_640x360.webm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;It&#39;s worth reiterating that you should start from the highest resolution and
bitrate file you have available. If you&#39;re upgrading an older site, you&#39;ll want
to find your original camera or other high resolution sources and convert from
that rather than from your older web site files (for example, flv or f4v files).&lt;/p&gt;
&lt;p&gt;Now that your files are prepared, it&#39;s time to &lt;a href=&quot;https://web.dev/add-media&quot;&gt;add them to a web
page&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>Add media to a web page</title>
    <link href="https://web.dev/add-media/"/>
    <updated>2020-06-19T00:00:00Z</updated>
    <id>https://web.dev/add-media/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;In this section you&#39;ll learn how to embed a media file in a web page using the
&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; tags, and how to add captions to a video for the
hearing-impaired.&lt;/p&gt;
&lt;p&gt;This section assumes you have an audio or video file that is ready for embedding
in a web page. An mov file straight off a camera will not work. If an mov file
is all you have, see &lt;a href=&quot;https://web.dev/prepare-media&quot;&gt;Prepare media files for the web&lt;/a&gt; then come back.&lt;/p&gt;
&lt;p&gt;This section covers two topics.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;a href=&quot;https://web.dev/video-and-source-tags&quot;&gt;The &amp;lt;video&amp;gt; and &amp;lt;source&amp;gt; tags&lt;/a&gt; you&#39;ll
learn specifically how to embed a media file in a web page.&lt;/li&gt;
&lt;li&gt;In &lt;a href=&quot;https://web.dev/media-accessibility&quot;&gt;Accessibility with the &amp;lt;track&amp;gt; tag&lt;/a&gt; you&#39;ll
learn to add captions to a media file for hearing impaired.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Be sure not to skip the accessibility section. The technical aspects of
supporting accessibility are not that difficult. They are also a regulatory or
legal requirement in many places.&lt;/p&gt;
&lt;/div&gt;
</content>
    <author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>Media file basics</title>
    <link href="https://web.dev/media-file-basics/"/>
    <updated>2020-06-19T00:00:00Z</updated>
    <id>https://web.dev/media-file-basics/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;You might think that you can take a video camera and upload it to the web as is.
Indeed, video streaming sites such as &lt;a href=&quot;https://www.youtube.com/&quot; rel=&quot;noopener&quot;&gt;YouTube&lt;/a&gt; or
&lt;a href=&quot;https://vimeo.com/&quot; rel=&quot;noopener&quot;&gt;Vimeo&lt;/a&gt; let you do this. These sites simplify video
processing and uploading for the sake of customer service. Preparing a video for
serving from your own site is a bit more complicated.&lt;/p&gt;
&lt;p&gt;Video files come in a variety of formats. The format that comes off your camera,
typically a &lt;code&gt;.mov&lt;/code&gt; file, is good for recording and for editing and other early
post-production processes. Its size means it&#39;s not good for streaming over the
web. Because browsers support different file formats, you&#39;ll need to create
multiple files. Before converting files you need to understand a few basics
about them and about their characteristics.&lt;/p&gt;
&lt;p&gt;The file that you see in your operating system shell is a &lt;em&gt;container&lt;/em&gt;,
identified by a file extension (&lt;code&gt;.mp4&lt;/code&gt;, &lt;code&gt;.webm&lt;/code&gt;, etc.). The container houses one or
more &lt;em&gt;streams&lt;/em&gt;. A media file can have any number of streams, of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats&quot; rel=&quot;noopener&quot;&gt;more
types&lt;/a&gt; than I will
go into here.&lt;/p&gt;
&lt;p&gt;The sample files used later in this section contain at most two streams: an
audio stream and a video stream. Among the other types you might encounter are
captions and data, both of which are beyond the scope of this article. There are
instances where audio and video streams are dealt with separately. Most files
you&#39;ll encounter will only contain a single audio stream and a single video
stream.&lt;/p&gt;
&lt;p&gt;Within the audio and video streams, the actual data is compressed using a codec.
A &lt;em&gt;codec&lt;/em&gt;, or coder/decoder, is a compression format for video or audio data. The
distinction between a container and a codec is important because files with the
same container can have their contents encoded with different codecs.&lt;/p&gt;
&lt;p&gt;The image below illustrates this structure. On the left is the basic structure.
On the right are the specifics of that structure for a single WebM file.&lt;/p&gt;
&lt;figure class=&quot;w-figure  w-figure--inline-right&quot;&gt;
  &lt;img alt=&quot;Comparing media file structure with a hypothetical media file.&quot; decoding=&quot;async&quot; height=&quot;250&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 560px) 560px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/QwNEBBa8LEMpedJh5imG.png?auto=format&amp;w=1120 1120w&quot; width=&quot;560&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Parts of a media file.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Not all browsers support up-to-date containers and codecs. For example, WebM is
high-quality and open source. Files in WebM packages can be orders of magnitude
smaller than other formats, making them a good choice for mobile download.
Although WebM was created specifically for the web, its support is not yet
universal. Safari in particular does not, as of this writing,
&lt;a href=&quot;https://caniuse.com/#feat=webm&quot; rel=&quot;noopener&quot;&gt;support&lt;/a&gt; WebM for embedded video.&lt;/p&gt;
&lt;p&gt;All modern browsers support MP4 files, making them a good general choice for a
media container and the best choice as the backup container for WebM.&lt;/p&gt;
&lt;p&gt;Many file formats support multiple codecs for the same container type. A
complete list of available &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs&quot; rel=&quot;noopener&quot;&gt;video
codecs&lt;/a&gt;
and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Audio_codecs&quot; rel=&quot;noopener&quot;&gt;audio
codecs&lt;/a&gt;
would be a whole website itself. The links just provided are for MDN&#39;s practical
lists of what&#39;s usable on the web. Listed below are the currently preferred file
types and the codecs they may use. Follow the links for browser support lists.&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;File type&lt;/th&gt;
&lt;th&gt;Video Codec&lt;/th&gt;
&lt;th&gt;Audio Codec&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://caniuse.com/#search=mp4&quot; rel=&quot;noopener&quot;&gt;MP4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs#AV1&quot; rel=&quot;noopener&quot;&gt;AV1&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs#AVC_H.264&quot; rel=&quot;noopener&quot;&gt;AVC (H.264)&lt;/a&gt;*, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs#VP9&quot; rel=&quot;noopener&quot;&gt;VP9&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Audio_codecs#AAC&quot; rel=&quot;noopener&quot;&gt;aac&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://caniuse.com/#feat=webm&quot; rel=&quot;noopener&quot;&gt;WebM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs#AV1&quot; rel=&quot;noopener&quot;&gt;AV1&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs#VP9&quot; rel=&quot;noopener&quot;&gt;VP9&lt;/a&gt;*&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Audio_codecs#Vorbis&quot; rel=&quot;noopener&quot;&gt;vorbis&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Audio_codecs#Opus&quot; rel=&quot;noopener&quot;&gt;opus&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;p&gt;* Indicates the preferred video codec.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bitrate&lt;/em&gt; is the maximum number of bits used to encode one second of a stream.
The more bits used to encode a second of stream, the higher the potential
detail and fidelity.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Resolution&lt;/em&gt; is the amount of information in a single frame of video, given as
the number of logical pixels in each dimension. I provide more information about this
concept in &lt;a href=&quot;https://web.dev/resolution&quot;&gt;Resolution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://web.dev/media-application-basics/&quot;&gt;Media application basics&lt;/a&gt;, I&#39;ll show you how to examine
these characteristics using two command line tools: Shaka Packager and FFmpeg.&lt;/p&gt;
</content>
    <author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>Media accessibility</title>
    <link href="https://web.dev/media-accessibility/"/>
    <updated>2020-08-20T00:00:00Z</updated>
    <id>https://web.dev/media-accessibility/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Accessibility isn&#39;t like icing on a cake. It&#39;s never anything you put on a
backlog with the hope of introducing it later. Captions and screen reader
descriptions are the only way many users can experience your videos, and in some
jurisdictions, they&#39;re even required by law or regulation.&lt;/p&gt;
&lt;p&gt;To add captions or screen reader descriptions to a web video, add a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt;&lt;/a&gt; tag
to a &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag. In addition to captions and screen reader descriptions, tags
may also be used for subtitles and chapter titles. The can also help search
engines understand what&#39;s in a video. Those capabilities are outside the scope
of this article.&lt;/p&gt;
&lt;figure class=&quot;w-figure  w-figure--inline-right&quot;&gt;
  &lt;img alt=&quot;Screenshot showing captions displayed using the track element in Chrome on Android&quot; decoding=&quot;async&quot; height=&quot;480&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vbNDp5R05MwQmsxZ0RLI.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;w-figcaption&quot;&gt;Screenshot showing captions displayed using the
track element in Chrome on Android&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;An example &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag with two &lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt; tags is shown below. There&#39;s also a
sample you can &lt;a href=&quot;https://track-demonstration.glitch.me/&quot; rel=&quot;noopener&quot;&gt;view on Glitch&lt;/a&gt;
(&lt;a href=&quot;https://glitch.com/edit/#!/track-demonstration&quot; rel=&quot;noopener&quot;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To add captions to your video add a track element as a child of the video
element:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://storage.googleapis.com/webfundamentals-assets/videos/chrome.webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://storage.googleapis.com/webfundamentals-assets/videos/chrome.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;track&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;chrome-subtitles-en.vtt&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;English captions&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token attr-name&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;captions&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srclang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;track&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;chrome-subtitles-zh.vtt&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;中文字幕&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token attr-name&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;captions&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srclang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;zh&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;This browser does not support the video element.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt; tag is similar to the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element in that both have a &lt;code&gt;src&lt;/code&gt;
attribute that points to referenced content. For a &lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt; tag, it points to a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API&quot; rel=&quot;noopener&quot;&gt;WebVTT file&lt;/a&gt;.  The
&lt;code&gt;label&lt;/code&gt; attribute specifies the how a particular track will be identified in the
interface. To provide tracks for multiple languages add a separate &lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt; tag
for each WebVTT file you&#39;re providing and indicate the language using the
&lt;code&gt;srclang&lt;/code&gt; attribute. The &lt;code&gt;default&lt;/code&gt; attribute indicates which language track is
the default.&lt;/p&gt;
&lt;h2 id=&quot;define-captions-in-track-file&quot;&gt;Define captions in track file &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/media-accessibility/#define-captions-in-track-file&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a hypothetical WebVTT file for the demo linked to above. The file is a text file containing a series of &lt;em&gt;cues&lt;/em&gt;. Each cue is a block of text to display on screen and the time range during which it will be displayed.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;WEBVTT&lt;br /&gt;&lt;br /&gt;00:00.000 --&gt; 00:04.999&lt;br /&gt;Man sitting on a tree branch, using a laptop.&lt;br /&gt;&lt;br /&gt;00:05.000 --&gt; 00:08.000&lt;br /&gt;The branch breaks, and he starts to fall.&lt;br /&gt;&lt;br /&gt;...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Each item in a track file is called a cue. Each cue has a start time and end
time separated by an arrow, with cue text in the line below. Cues can optionally
also have IDs: &lt;code&gt;railroad&lt;/code&gt; and &lt;code&gt;manuscript&lt;/code&gt; in the example below. Cues are
separated by an empty line.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;WEBVTT&lt;br /&gt;&lt;br /&gt;railroad&lt;br /&gt;00:00:10.000 --&gt; 00:00:12.500&lt;br /&gt;Left uninspired by the crust of railroad earth&lt;br /&gt;&lt;br /&gt;manuscript&lt;br /&gt;00:00:13.200 --&gt; 00:00:16.900&lt;br /&gt;that touched the lead to the pages of your manuscript.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Cue times are in hours:minutes:seconds:milliseconds format. Parsing is strict.
Numbers must be zero padded if necessary: hours, minutes, and seconds must have
two digits (00 for a zero value) and milliseconds must have three digits (000
for zero). There is an excellent WebVTT validator at &lt;a href=&quot;https://quuz.org/webvtt/&quot; rel=&quot;noopener&quot;&gt;Live WebVTT
Validator&lt;/a&gt;, which checks for errors in time
formatting, and problems such as non-sequential times.&lt;/p&gt;
&lt;p&gt;You can create a VTT file by hand, thought there are &lt;a href=&quot;https://www.google.com/search?q=webvtt+services&quot; rel=&quot;noopener&quot;&gt;services that will create
them for you&lt;/a&gt;.&lt;/p&gt;
</content>
    <author>
      <name>Joe Medley</name>
    </author>
  </entry>
  
  <entry>
    <title>Perform efficient per-video-frame operations on video with `requestVideoFrameCallback()`
</title>
    <link href="https://web.dev/requestvideoframecallback-rvfc/"/>
    <updated>2020-06-29T00:00:00Z</updated>
    <id>https://web.dev/requestvideoframecallback-rvfc/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;There&#39;s a new Web API on the block, defined in the
&lt;a href=&quot;https://wicg.github.io/video-rvfc/&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;HTMLVideoElement.requestVideoFrameCallback()&lt;/code&gt;&lt;/a&gt;
specification.
The &lt;code&gt;requestVideoFrameCallback()&lt;/code&gt; method allows web authors to register a callback
that runs in the rendering steps when a new video frame is sent to the compositor.
This is intended to allow developers to perform efficient per-video-frame operations on video,
such as video processing and painting to a canvas, video analysis,
or synchronization with external audio sources.&lt;/p&gt;
&lt;h2 id=&quot;difference-with-requestanimationframe()&quot;&gt;Difference with requestAnimationFrame() &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/requestvideoframecallback-rvfc/#difference-with-requestanimationframe()&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Operations like drawing a video frame to a canvas via
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;drawImage()&lt;/code&gt;&lt;/a&gt;
made through this API will be synchronized as a best effort
with the frame rate of the video playing on screen.
Different from
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt;,
which usually fires about 60 times per second,
&lt;code&gt;requestVideoFrameCallback()&lt;/code&gt; is bound to the actual video frame rate—with an important
&lt;a href=&quot;https://wicg.github.io/video-rvfc/#ref-for-update-the-rendering%E2%91%A2:~:text=Note%3A%20The%20effective%20rate%20at%20which,browser%20would%20fire%20callbacks%20at%2060hz.&quot; rel=&quot;noopener&quot;&gt;exception&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The effective rate at which callbacks are run is the lesser rate between the video&#39;s rate
and the browser&#39;s rate.
This means a 25fps video playing in a browser that paints at 60Hz
would fire callbacks at 25Hz.
A 120fps video in that same 60Hz browser would fire callbacks at 60Hz.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;what&#39;s-in-a-name&quot;&gt;What&#39;s in a name? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/requestvideoframecallback-rvfc/#what&#39;s-in-a-name&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Due to its similarity with &lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;, the method initially
was &lt;a href=&quot;https://discourse.wicg.io/t/proposal-video-requestanimationframe/3691&quot; rel=&quot;noopener&quot;&gt;proposed as &lt;code&gt;video.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt;,
but I&#39;m happy with the new name,
&lt;code&gt;requestVideoFrameCallback()&lt;/code&gt;, which was agreed on
after a &lt;a href=&quot;https://github.com/WICG/video-rvfc/issues/44&quot; rel=&quot;noopener&quot;&gt;lengthy discussion&lt;/a&gt;.
Yay, &lt;a href=&quot;https://css-tricks.com/what-is-bikeshedding/&quot; rel=&quot;noopener&quot;&gt;bikeshedding&lt;/a&gt; for the win!&lt;/p&gt;
&lt;h2 id=&quot;browser-support-and-feature-detection&quot;&gt;Browser support and feature detection &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/requestvideoframecallback-rvfc/#browser-support-and-feature-detection&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The method is
&lt;a href=&quot;https://chromestatus.com/feature/6335927192387584&quot; rel=&quot;noopener&quot;&gt;implemented in Chromium&lt;/a&gt;
already, and
&lt;a href=&quot;https://mozilla.github.io/standards-positions/#requestVideoFrameCallback&quot; rel=&quot;noopener&quot;&gt;Mozilla folks like it&lt;/a&gt;.
For what it&#39;s worth, I have also filed a
&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=211945&quot; rel=&quot;noopener&quot;&gt;WebKit bug&lt;/a&gt; asking for it.
Feature detection of the API works like this:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;requestVideoFrameCallback&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLVideoElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The API is supported! &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;using-the-requestvideoframecallback()-method&quot;&gt;Using the requestVideoFrameCallback() method &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/requestvideoframecallback-rvfc/#using-the-requestvideoframecallback()-method&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have ever used the &lt;code&gt;requestAnimationFrame()&lt;/code&gt; method, you will immediately feel at home with the &lt;code&gt;requestVideoFrameCallback()&lt;/code&gt; method.
You register an initial callback once, and then re-register whenever the callback fires.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;doSomethingWithTheFrame&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;now&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Do something with the frame.&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;now&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; metadata&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Re-register the callback to be notified about the next frame.&lt;/span&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestVideoFrameCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;doSomethingWithTheFrame&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Initially register the callback to be notified about the first frame.&lt;/span&gt;&lt;br /&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestVideoFrameCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;doSomethingWithTheFrame&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;In the callback, &lt;code&gt;now&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt;
and &lt;code&gt;metadata&lt;/code&gt; is a &lt;a href=&quot;https://wicg.github.io/video-rvfc/#dictdef-videoframemetadata&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;VideoFrameMetadata&lt;/code&gt;&lt;/a&gt;
dictionary with the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;presentationTime&lt;/code&gt;, of type &lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;:
The time at which the user agent submitted the frame for composition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expectedDisplayTime&lt;/code&gt;, of type &lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;:
The time at which the user agent expects the frame to be visible.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;, of type &lt;code&gt;unsigned long&lt;/code&gt;:
The width of the video frame, in media pixels.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;height&lt;/code&gt;, of type &lt;code&gt;unsigned long&lt;/code&gt;:
The height of the video frame, in media pixels.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediaTime&lt;/code&gt;, of type &lt;code&gt;double&lt;/code&gt;:
The media presentation timestamp (PTS) in seconds of the frame presented (e.g., its timestamp on the &lt;code&gt;video.currentTime&lt;/code&gt; timeline).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;presentedFrames&lt;/code&gt;, of type &lt;code&gt;unsigned long&lt;/code&gt;:
A count of the number of frames submitted for composition. Allows clients to determine if frames were missed between instances of &lt;code&gt;VideoFrameRequestCallback&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;processingDuration&lt;/code&gt;, of type &lt;code&gt;double&lt;/code&gt;:
The elapsed duration in seconds from submission of the encoded packet with the same presentation timestamp (PTS) as this frame (e.g., same as the &lt;code&gt;mediaTime&lt;/code&gt;) to the decoder until the decoded frame was ready for presentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For WebRTC applications, additional properties may appear:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;captureTime&lt;/code&gt;, of type &lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;:
For video frames coming from either a local or remote source, this is the time at which the frame was captured by the camera.
For a remote source, the capture time is estimated using clock synchronization and RTCP sender reports
to convert RTP timestamps to capture time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;receiveTime&lt;/code&gt;, of type &lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;:
For video frames coming from a remote source, this is the time the encoded frame was received
by the platform, i.e., the time at which the last packet belonging to this frame was received over the network.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtpTimestamp&lt;/code&gt;, of type &lt;code&gt;unsigned long&lt;/code&gt;:
The RTP timestamp associated with this video frame.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; might differ from &lt;code&gt;videoWidth&lt;/code&gt; and &lt;code&gt;videoHeight&lt;/code&gt; in certain cases
(e.g., an anamorphic video might have rectangular pixels).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Of special interest in this list is &lt;code&gt;mediaTime&lt;/code&gt;.
In Chromium&#39;s implementation, we use the audio clock as the time source that backs &lt;code&gt;video.currentTime&lt;/code&gt;,
whereas the &lt;code&gt;mediaTime&lt;/code&gt; is directly populated by the &lt;code&gt;presentationTimestamp&lt;/code&gt; of the frame.
The &lt;code&gt;mediaTime&lt;/code&gt; is what you should use if you want to exactly identify frames in a reproducible way,
including to identify exactly which frames you missed.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Unfortunately, the video element does not guarantee frame-accurate &lt;em&gt;seeking&lt;/em&gt;.
This has been an ongoing &lt;a href=&quot;https://github.com/w3c/media-and-entertainment/issues/4&quot; rel=&quot;noopener&quot;&gt;subject of discussion&lt;/a&gt;.
&lt;a href=&quot;https://github.com/WICG/web-codecs&quot; rel=&quot;noopener&quot;&gt;WebCodecs&lt;/a&gt; will eventually allow for frame accurate applications.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;if-things-seem-one-frame-off...&quot;&gt;If things seem one frame off… &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/requestvideoframecallback-rvfc/#if-things-seem-one-frame-off...&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Vertical synchronization (or just vsync), is a graphics technology that synchronizes the frame rate of a video and the refresh rate of a monitor.
Since &lt;code&gt;requestVideoFrameCallback()&lt;/code&gt; runs on the main thread, but, under the hood, video compositing happens on the compositor thread,
everything from this API is a best effort, and we do not offer any strict guarantees.
What may be happening is that the API can be one vsync late relative to when a video frame is rendered.
It takes one vsync for changes made to the web page through the API to appear on screen (same as &lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;).
So if you keep updating the &lt;code&gt;mediaTime&lt;/code&gt; or frame number on your web page and compare that
against the numbered video frames, eventually the video will look like it is one frame ahead.&lt;/p&gt;
&lt;p&gt;What is really happening is that the frame is ready at vsync x, the callback is fired and the frame is rendered at vsync x+1,
and changes made in the callback are rendered at vsync x+2.
You can check whether the callback is a vsync late (and the frame is already rendered on screen)
by checking whether the &lt;code&gt;metadata.expectedDisplayTime&lt;/code&gt; is roughly &lt;code&gt;now&lt;/code&gt; or one vsync in the future.
If it is within about five to ten microseconds of &lt;code&gt;now&lt;/code&gt;, the frame is already rendered;
if the &lt;code&gt;expectedDisplayTime&lt;/code&gt; is approximately sixteen milliseconds in the future (assuming your browser/screen is refreshing at 60Hz),
then you are in sync with the frame.&lt;/p&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/requestvideoframecallback-rvfc/#demo&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have created a small
&lt;a href=&quot;https://requestvideoframecallback.glitch.me/&quot; rel=&quot;noopener&quot;&gt;demo on Glitch&lt;/a&gt;
that shows how frames are drawn on a canvas at exactly
the frame rate of the video and
where the frame metadata is logged for debugging purposes.
The core logic is just a couple of lines of JavaScript.&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; paintCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; startTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;updateCanvas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;now&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startTime &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    startTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; now&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;drawImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; canvas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; canvas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; elapsed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;now &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; startTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;paintCount &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; elapsed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  fpsInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;video fps: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;fps&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  metadataInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;metadata&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestVideoFrameCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;updateCanvas&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestVideoFrameCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;updateCanvas&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 1200px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi&quot; loading=&quot;lazy&quot; src=&quot;https://glitch.com/embed/#!/embed/requestvideoframecallback?attributionHidden=true&amp;sidebarCollapsed=true&amp;path=script.js&amp;previewSize=100&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot; title=&quot;requestvideoframecallback on Glitch&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/requestvideoframecallback-rvfc/#conclusions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have done frame-level processing for a long time—without having access to the actual frames,
only based on &lt;code&gt;video.currentTime&lt;/code&gt;.
I implemented video shot segmentation in JavaScript
in a rough-and-ready manner; you can still read the accompanying
&lt;a href=&quot;https://www2012.universite-lyon.fr/proceedings/nocompanion/DevTrack_028.pdf&quot; rel=&quot;noopener&quot;&gt;research paper&lt;/a&gt;.
Had the &lt;code&gt;requestVideoFrameCallback()&lt;/code&gt; existed back then, my life would have been much simpler…&lt;/p&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/requestvideoframecallback-rvfc/#acknowledgements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;requestVideoFrameCallback&lt;/code&gt; API was specified and implemented by
&lt;a href=&quot;https://github.com/tguilbert-google&quot; rel=&quot;noopener&quot;&gt;Thomas Guilbert&lt;/a&gt;.
This article was reviewed by &lt;a href=&quot;https://github.com/jpmedley&quot; rel=&quot;noopener&quot;&gt;Joe Medley&lt;/a&gt;
and &lt;a href=&quot;https://github.com/kaycebasques&quot; rel=&quot;noopener&quot;&gt;Kayce Basques&lt;/a&gt;.
&lt;a href=&quot;https://unsplash.com/photos/tV80374iytg&quot; rel=&quot;noopener&quot;&gt;Hero image&lt;/a&gt; by
&lt;a href=&quot;https://unsplash.com/@dmjdenise&quot; rel=&quot;noopener&quot;&gt;Denise Jans&lt;/a&gt; on Unsplash.&lt;/p&gt;
</content>
    <author>
      <name>Thomas Steiner</name>
    </author>
  </entry>
  
  <entry>
    <title>Profiling Web Audio apps in Chrome</title>
    <link href="https://web.dev/profiling-web-audio-apps-in-chrome/"/>
    <updated>2020-05-04T00:00:00Z</updated>
    <id>https://web.dev/profiling-web-audio-apps-in-chrome/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;You reached this documentation probably because you&#39;re developing an app
that uses the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Web_Audio_API&quot; rel=&quot;noopener&quot;&gt;Web Audio API&lt;/a&gt;
and experienced some unexpected glitches such as popping noises from the
output. You might already be involved in a &lt;a href=&quot;https://crbug.com/&quot; rel=&quot;noopener&quot;&gt;crbug.com&lt;/a&gt;
discussion and a Chrome engineer has asked you to upload &amp;quot;tracing data&amp;quot;. This
guide shows how to obtain the data so you can help engineers triage, and
eventually fix, the issue.&lt;/p&gt;
&lt;h2 id=&quot;web-audio-profiling-tools&quot;&gt;Web Audio profiling tools &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#web-audio-profiling-tools&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are two tools that will help you when profiling Web Audio,
&lt;code&gt;about://tracing&lt;/code&gt; and the &lt;strong&gt;WebAudio&lt;/strong&gt; tab in Chrome DevTools.&lt;/p&gt;
&lt;h3 id=&quot;when-do-you-use-about:tracing&quot;&gt;When do you use &lt;code&gt;about://tracing&lt;/code&gt;? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#when-do-you-use-about:tracing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When mysterious &amp;quot;glitches&amp;quot; happen. Profiling the app with the tracing tools
gives you insights on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Time slices spent by specific function calls&lt;/strong&gt; on different threads&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Audio callback timing&lt;/strong&gt; in the timeline view&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It usually shows the missed deadlines or the big garbage collection stops that
might cause unexpected audio glitches. This information is useful for triaging
a bug. Chromium engineers will ask for tracing data if a local reproduction of the issue
is not feasible. See &lt;a href=&quot;https://www.chromium.org/developers/how-tos/trace-event-profiling-tool&quot; rel=&quot;noopener&quot;&gt;The Trace Event Profiling Tool&lt;/a&gt; for
general instructions on how to trace.&lt;/p&gt;
&lt;h3 id=&quot;when-do-you-use-the-webaudio-tab&quot;&gt;When do you use the &lt;strong&gt;WebAudio&lt;/strong&gt; tab? &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#when-do-you-use-the-webaudio-tab&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you want to get a feel for how the application performs in the real world.
DevTools shows you a running estimate of render capacity, which indicates
how the web audio rendering engine is handling render tasks over a given
render budget (for example, approximately 2.67ms @ 48KHz). If the capacity
goes near 100%, that means your app is likely to produce glitches because the
renderer is failing to finish the work in the render budget.&lt;/p&gt;
&lt;h2 id=&quot;use-about:tracing&quot;&gt;Use &lt;code&gt;about://tracing&lt;/code&gt; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#use-about:tracing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;how-to-capture-tracing-data&quot;&gt;How to capture tracing data &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#how-to-capture-tracing-data&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;The instructions below written are for Chrome 80 and later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For best results, close all other tabs and windows, and disable extensions.
Alternatively you can either &lt;a href=&quot;https://developer.chrome.com/devtools/docs/clean-testing-environment&quot; rel=&quot;noopener&quot;&gt;launch a new instance of Chrome&lt;/a&gt;
or use other builds from &lt;a href=&quot;https://www.chromium.org/getting-involved/dev-channel&quot; rel=&quot;noopener&quot;&gt;different release channels&lt;/a&gt; (e.g.
Beta or Canary). Once you have the browser ready, follow the steps below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open your application (web page) on a tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open another tab and go to &lt;code&gt;about://tracing&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press the &lt;strong&gt;Record&lt;/strong&gt; button and select &lt;strong&gt;Manually select settings&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press the &lt;strong&gt;None&lt;/strong&gt; buttons on both the &lt;strong&gt;Record Categories&lt;/strong&gt; and
&lt;strong&gt;Disabled by Default Categories&lt;/strong&gt; sections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;Record Categories&lt;/strong&gt; section, select the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;audio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blink_gc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;media&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v8.execute&lt;/code&gt; (if you&#39;re interested in &lt;code&gt;AudioWorklet&lt;/code&gt; JS code performance)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webaudio&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;Disabled by Default Categories&lt;/strong&gt; section, select the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;audio-worklet&lt;/code&gt; (if you&#39;re interested in where the &lt;code&gt;AudioWorklet&lt;/code&gt; thread starts)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webaudio.audionode&lt;/code&gt; (if you need the detailed trace for each &lt;code&gt;AudioNode&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press the &lt;strong&gt;Record&lt;/strong&gt; button at the bottom.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go back to your application tab and redo the steps that triggered the issue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you have enough trace data, go back to the tracing tab and press &lt;strong&gt;Stop&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The tracing tab will visualize the result.&lt;/p&gt;
&lt;img alt=&quot;Screen shot after tracing has completed.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;525&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/3GqKLXTP7XzFp6ADztc4.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press &lt;strong&gt;Save&lt;/strong&gt; to save the tracing data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;how-to-analyze-tracing-data&quot;&gt;How to analyze tracing data &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#how-to-analyze-tracing-data&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The tracing data visualizes how Chrome&#39;s web audio engine renders the audio.
The renderer has two different render modes: &lt;strong&gt;Operating system mode&lt;/strong&gt; and
&lt;strong&gt;Worklet mode&lt;/strong&gt;. Each mode uses a different threading model, so the tracing
results also differ.&lt;/p&gt;
&lt;h4 id=&quot;operating-system-mode&quot;&gt;Operating system mode &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#operating-system-mode&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In operating system mode, the &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:media/audio/audio_output_device.h&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;AudioOutputDevice&lt;/code&gt;&lt;/a&gt; thread runs
all the web audio code. The &lt;code&gt;AudioOutputDevice&lt;/code&gt; is a real-time priority thread
originating from the browser&#39;s Audio Service that is driven by the audio
hardware clock. If you see irregularity from the trace data in this lane,
it means the callback timing from the device may be jittery. The combination
of Linux and Pulse Audio is known to have this problem. See the following Chromium issues
for more details: &lt;a href=&quot;https://crbug.com/825823&quot; rel=&quot;noopener&quot;&gt;#825823&lt;/a&gt;,
&lt;a href=&quot;https://crbug.com/864463&quot; rel=&quot;noopener&quot;&gt;#864463&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;Screen shot of operating system mode tracing result.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;398&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/Mf64zHw10phOMhU3gXsJ.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;h4 id=&quot;worklet-mode&quot;&gt;Worklet mode &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#worklet-mode&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In Worklet Mode, which is characterized by one thread jump from
&lt;code&gt;AudioOutputDevice&lt;/code&gt; to the &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/modules/webaudio/audio_worklet_thread.h&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;AudioWorklet&lt;/code&gt; thread&lt;/a&gt;, you
should see well-aligned traces in two thread lanes as shown below.  When the
worklet is activated all the web audio operations are rendered by the
&lt;code&gt;AudioWorklet&lt;/code&gt; thread. This thread is currently not a real-time priority one.
The common irregularity here is a big block caused by the garbage collection
or missed render deadlines. Both cases lead to glitches in the audio stream.&lt;/p&gt;
&lt;img alt=&quot;Screen shot of worklet mode tracing result.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;449&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/2kSG5BoaXZ5CZIlVvIYI.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;In both cases, the ideal tracing data is characterized by well-aligned audio
device callback invocations and render tasks being completed well within the
given render budget. The two screenshots above are great examples of the ideal
tracing data.&lt;/p&gt;
&lt;h3 id=&quot;learning-from-real-world-examples&quot;&gt;Learning from real-world examples &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#learning-from-real-world-examples&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;example-1:-render-tasks-going-beyond-render-budget&quot;&gt;Example 1: Render tasks going beyond render budget &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#example-1:-render-tasks-going-beyond-render-budget&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The screenshot below (&lt;a href=&quot;https://crbug.com/796330&quot; rel=&quot;noopener&quot;&gt;Chromium issue #796330&lt;/a&gt;) is a
typical example of when code in &lt;code&gt;AudioWorkletProcessor&lt;/code&gt; takes too long and
goes beyond a given render budget. The callback timing is well behaved but
the audio processing function call of the Web Audio API failed to complete the
work before the next device callback.&lt;/p&gt;
&lt;img alt=&quot;Diagram showing audio glitch due to render task overflowing budget.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;362&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 734px) 734px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/J3CkP24NupnqB1XDGH6w.png?auto=format&amp;w=1468 1468w&quot; width=&quot;734&quot; /&gt;
&lt;p&gt;&lt;strong&gt;Your options:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce the workload of the audio graph by using fewer &lt;code&gt;AudioNode&lt;/code&gt; instances.&lt;/li&gt;
&lt;li&gt;Reduce the workload of your code in the &lt;code&gt;AudioWorkletProcessor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Increase the base latency of &lt;code&gt;AudioContext&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;example-2:-significant-garbage-collection-on-the-worklet-thread&quot;&gt;Example 2: Significant garbage collection on the worklet thread &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#example-2:-significant-garbage-collection-on-the-worklet-thread&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Unlike on the operating system audio rendering thread, garbage collection is managed
on the worklet thread. That means if your code does memory allocation/deallocation
(e.g. new arrays) it eventually triggers a garbage collection which
synchronously blocks the thread. If the workload of web audio operations and
garbage collection is bigger than a given render budget, it results in
glitches in the audio stream. The following screenshot is an extreme example of this
case.&lt;/p&gt;
&lt;img alt=&quot;Audio glitches caused by garbage collection.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;334&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ckdPwqnRtoHsRQkOVy8J.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;Chrome&#39;s &lt;code&gt;AudioWorkletProcessor&lt;/code&gt; implementation generates &lt;code&gt;Float32Array&lt;/code&gt; instances for
the input and output buffer every audio processing callback. This also
slowly builds up the memory usage over time. The team has a plan to improve
the design once the related specification is finalized.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Your options:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allocate the memory up front and reuse it whenever possible.&lt;/li&gt;
&lt;li&gt;Use different design patterns based on &lt;code&gt;SharedArrayBuffer&lt;/code&gt;. Although this
is not a perfect solution, several web audio apps use a similar pattern with
&lt;code&gt;SharedArrayBuffer&lt;/code&gt; to run the intensive audio code. Examples:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2018/06/audio-worklet-design-pattern#webaudio_powerhouse_audio_worklet_and_sharedarraybuffer&quot; rel=&quot;noopener&quot;&gt;Audio Worklet Design Pattern (Web Audio Power House)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChromeLabs/audio-device-client-prototype&quot; rel=&quot;noopener&quot;&gt;Audio Device Client Prototype&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;example-3:-jittery-audio-device-callback-from-audiooutputdevice&quot;&gt;Example 3: Jittery audio device callback from &lt;code&gt;AudioOutputDevice&lt;/code&gt; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#example-3:-jittery-audio-device-callback-from-audiooutputdevice&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The precise timing of audio callback is the most important thing for web audio.
This should be the most precise clock in your system. If the operating system
or its audio subsystem cannot guarantee a solid callback timing, all the
subsequent operations will be affected. The following image is an example
of jittery audio callback. Compared to the previous two images, the interval
between each callback varies significantly.&lt;/p&gt;
&lt;img alt=&quot;Screen shot comparing unstable vs stable callback timing.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;252&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1UN5udXOW56ooihw5M18.png?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;This is a known issue on Linux, which uses Pulse Audio as an audio
backend. This is still under investigation (&lt;a href=&quot;https://crbug.com/825823&quot; rel=&quot;noopener&quot;&gt;Chromium issue #825823&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;use-the-webaudio-tab-in-chrome-devtools&quot;&gt;Use the &lt;strong&gt;WebAudio&lt;/strong&gt; tab in Chrome DevTools &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#use-the-webaudio-tab-in-chrome-devtools&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You also can use the DevTools tab specifically designed for web audio. This
is less comprehensive compared to the tracing tool, but it is useful if you
want to gauge the running performance of your application.&lt;/p&gt;
&lt;p&gt;Access the panel by opening the &lt;strong&gt;Main Menu&lt;/strong&gt; of
DevTools, then go to &lt;strong&gt;More tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;WebAudio&lt;/strong&gt;.&lt;/p&gt;
&lt;img alt=&quot;Screen shot showing how to open WebAudio panel in Chrome DevTools.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;423&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 800px) 800px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t2eX431PTio5oOFkmOtR.jpg?auto=format&amp;w=1600 1600w&quot; width=&quot;800&quot; /&gt;
&lt;img alt=&quot;Screen shot of WebAudio panel in Chrome DevTools.&quot; class=&quot;w-screenshot w-screenshot--filled&quot; decoding=&quot;async&quot; height=&quot;299&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 595px) 595px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/HBdc8LHEgIRHkHUJdtBq.png?auto=format&amp;w=1190 1190w&quot; width=&quot;595&quot; /&gt;
&lt;p&gt;This tab shows information about running instances of &lt;code&gt;BaseAudioContext&lt;/code&gt;.
Use it to see how the web audio renderer is performing on the page.&lt;/p&gt;
&lt;p&gt;Since a page can have multiple &lt;code&gt;BaseAudioContext&lt;/code&gt; instances, the &lt;strong&gt;Context Selector&lt;/strong&gt;
(which is the drop-down menu that says &lt;code&gt;realtime (4e1073)&lt;/code&gt; in the last screenshot),
allows you to choose what you want to inspect. The inspector
view shows the properties (e.g. sample rate, buffer size, channel count, and
context state) of a &lt;code&gt;BaseAudioContext&lt;/code&gt; instance that you select, and it
dynamically changes when properties change.&lt;/p&gt;
&lt;p&gt;The most useful thing in this view is the status bar at the bottom. It is only
active when the selected &lt;code&gt;BaseAudioContext&lt;/code&gt; is an &lt;code&gt;AudioContext&lt;/code&gt;, which runs
in real-time. This bar shows the instantaneous audio stream quality of a
selected &lt;code&gt;AudioContext&lt;/code&gt; and is updated every second. It provides the following
information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Callback interval&lt;/strong&gt; (ms): Displays the weighted mean/variance of callback
interval. Ideally the mean should be stable and the variance should be
close to zero. Otherwise the operating system&#39;s audio infra might have
problems in deeper layers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Render Capacity&lt;/strong&gt; (percent): Follows this formula: (&lt;em&gt;time spent in actual
rendering / instantaneous callback interval&lt;/em&gt;) × 100. When the capacity
gets close to 100 percent, it means that the renderer is doing too much for a
given render budget, so you should consider doing less in the web audio code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can manually trigger a garbage collector by clicking the trash can icon.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/profiling-web-audio-apps-in-chrome/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Debugging audio is hard. Debugging audio in the browser is even harder.
However, these tools can ease the pain by providing you with useful insights
on how the web audio code performs. In some cases, you may find that web
audio does not behave as it should - then do not be afraid to
&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/entry?components=Blink%3EWebAudio&quot; rel=&quot;noopener&quot;&gt;file a bug on Chromium Bug Tracker&lt;/a&gt;. While filling out the information,
you can follow the guideline above and submit the tracing data you captured
with a reproducible test case. With this data the Chrome engineers will be able
to fix your bug much faster.&lt;/p&gt;
&lt;p&gt;Photo by Jonathan Velasquez on &lt;a href=&quot;https://unsplash.com/photos/c1ZN57GfDB0&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Hongchan Choi</name>
    </author>
  </entry>
  
  <entry>
    <title>Ensure your website is available and usable for everyone during COVID-19</title>
    <link href="https://web.dev/covid19/"/>
    <updated>2020-04-03T00:00:00Z</updated>
    <id>https://web.dev/covid19/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;This page provides guidance to help ensure your website is available,
accessible, secure, and usable for everyone at all times.&lt;/p&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;If you&#39;re building or maintaining a health organization website
that qualifies as a national health ministry or US state-level agency, you can
request to join the COVID-19 Google Search technical support group. Visit
&lt;a href=&quot;https://webmasters.googleblog.com/2020/03/health-organizations-covid19.html&quot; rel=&quot;noopener&quot;&gt;Helping health organizations make COVID-19 information more
accessible&lt;/a&gt;
to learn more. &lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The guidance on this page comes from a cross-functional collection of teams
within Google that are shifting their short-term focus to support websites that are
helping people stay safe during the COVID-19 situation. These Googlers have seen that sites
are facing unprecedented increases in demand from people looking for critical
information, many of whom have rarely or never used the web before. It can be a challenge
to ensure sites are available during this time and accessible to all.&lt;/p&gt;
&lt;h2 id=&quot;guidance&quot;&gt;Guidance &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#guidance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;w-aside w-aside--note&quot;&gt;
&lt;p&gt;This guidance is a work in progress and will be updated frequently.
If you have any suggestions, please &lt;a href=&quot;https://github.com/GoogleChrome/web.dev/issues/new/choose&quot; rel=&quot;noopener&quot;&gt;file an
issue&lt;/a&gt;, or &lt;a href=&quot;https://github.com/GoogleChrome/web.dev/blob/master/src/site/content/en/blog/covid19/index.md&quot; rel=&quot;noopener&quot;&gt;edit
this page&lt;/a&gt;
and then open a pull request.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;availability&quot;&gt;Availability, reliability, resilience, and stability &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#availability&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your site is seeing traffic spikes and it&#39;s failing, or you want to prevent it
from failing, the guidance below can help you quickly fix problems or detect them
before they become major issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read &lt;a href=&quot;https://web.dev/overloaded-server&quot;&gt;Fix an overloaded server&lt;/a&gt; to learn
how to detect, mitigate, and prevent traffic spike issues.&lt;/li&gt;
&lt;li&gt;Remove unnecessary images, videos, scripts, and fonts. Ensure each page focuses
on just delivering the functionality that the people using your site really
need.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/fast/#optimize-your-images&quot;&gt;Optimizing your images&lt;/a&gt; may
significantly reduce your server bandwidth usage because &lt;a href=&quot;https://images.guide/#introduction&quot; rel=&quot;noopener&quot;&gt;images are the
number one source of bloat on the web&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Offload as much of your static content to CDNs as possible.
More details from common providers:
&lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot; rel=&quot;noopener&quot;&gt;AWS&lt;/a&gt;,
&lt;a href=&quot;https://azure.microsoft.com/en-us/services/cdn/&quot; rel=&quot;noopener&quot;&gt;Azure&lt;/a&gt;,
&lt;a href=&quot;https://www.cloudflare.com/cdn/&quot; rel=&quot;noopener&quot;&gt;Cloudflare&lt;/a&gt;,
&lt;a href=&quot;https://cloud.google.com/cdn&quot; rel=&quot;noopener&quot;&gt;Google Cloud&lt;/a&gt;,
&lt;a href=&quot;https://firebase.google.com/docs/hosting&quot; rel=&quot;noopener&quot;&gt;Firebase&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Check if your CDN has any optimizations that are easy to turn on, such as
dynamic image compression, text compression, or automatic minification of JS
and CSS resources.&lt;/li&gt;
&lt;li&gt;Optimizing HTTP caching can significantly reduce demands on your servers with
minimal code change. Check out &lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;The HTTP cache: your first line of
defense&lt;/a&gt; for an overview and &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching&quot; rel=&quot;noopener&quot;&gt;HTTP
caching&lt;/a&gt;
and &lt;a href=&quot;https://jakearchibald.com/2016/caching-best-practices/&quot; rel=&quot;noopener&quot;&gt;Caching best
practices&lt;/a&gt; for
specific recommendations. The &lt;a href=&quot;https://web.dev/uses-long-cache-ttl/&quot;&gt;Serve static assets with an efficient cache
policy&lt;/a&gt; audit in Lighthouse can help you
quickly detect resources that aren&#39;t being cached. Keep in mind that different
types of resources will have different freshness requirements and will
therefore require different caching strategies.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/service-workers-cache-storage/&quot;&gt;Service workers&lt;/a&gt; are another
way to significantly reduce demands on your servers but may require significant technical
investment. They also enable your website to work
&lt;a href=&quot;https://developers.google.com/web/fundamentals/codelabs/offline&quot; rel=&quot;noopener&quot;&gt;offline&lt;/a&gt;,
enabling you to present opening hours, phone numbers, and other information to
returning users without a connection. &lt;a href=&quot;https://web.dev/workbox/&quot;&gt;Workbox&lt;/a&gt; is
the recommended approach for adding service workers to websites because it
automates a lot of boilerplate, makes it easier to follow best practices, and
prevents subtle bugs that are common when using the low-level &lt;code&gt;ServiceWorker&lt;/code&gt;
API directly.&lt;/li&gt;
&lt;li&gt;If your site is seeing major increased usage, check whether you have adequate
protection against &lt;a href=&quot;https://en.wikipedia.org/wiki/Denial-of-service_attack&quot; rel=&quot;noopener&quot;&gt;DDoS
attacks&lt;/a&gt; because your
site may now be a more attractive target. More details from common providers:
&lt;a href=&quot;https://aws.amazon.com/answers/networking/aws-ddos-attack-mitigation/&quot; rel=&quot;noopener&quot;&gt;AWS&lt;/a&gt;,
&lt;a href=&quot;https://azure.microsoft.com/en-us/services/ddos-protection/&quot; rel=&quot;noopener&quot;&gt;Azure&lt;/a&gt;,
&lt;a href=&quot;https://www.cloudflare.com/learning/ddos/ddos-mitigation/&quot; rel=&quot;noopener&quot;&gt;Cloudflare&lt;/a&gt;,
&lt;a href=&quot;https://cloud.google.com/files/GCPDDoSprotection-04122016.pdf&quot; rel=&quot;noopener&quot;&gt;Google Cloud&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&quot;https://web.dev/reliable/&quot;&gt;Network reliability&lt;/a&gt; for more guidance.&lt;/p&gt;
&lt;h3 id=&quot;accessibility&quot;&gt;Accessibility &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#accessibility&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Focusing on accessibility is more important than ever because more people with a
variety of needs are probably accessing your site. Follow the guidelines below
to ensure that the core functionality of your website is accessible for
everyone.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accessibility is a team effort and everyone has a role to play. Start by
reviewing Google&#39;s &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/a11y-for-teams&quot; rel=&quot;noopener&quot;&gt;Accessibility for Teams
guide&lt;/a&gt;
as well as &lt;a href=&quot;https://accessibility.digital.gov/&quot; rel=&quot;noopener&quot;&gt;the team guide from the U.S. Digital
Service&lt;/a&gt;. These guides explain what each
team member (product managers, engineers, designers, QA, and so on) can
contribute.&lt;/li&gt;
&lt;li&gt;Do an &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/how-to-review&quot; rel=&quot;noopener&quot;&gt;Accessibility
Review&lt;/a&gt;
to determine what&#39;s working well, and what needs improvement.
The &lt;a href=&quot;https://wave.webaim.org/extension/&quot; rel=&quot;noopener&quot;&gt;WAVE browser extensions&lt;/a&gt; can help
guide you through a manual accessibility audit of your site.&lt;/li&gt;
&lt;li&gt;Read through the &lt;a href=&quot;https://web.dev/accessible&quot;&gt;Accessibility Guides&lt;/a&gt; to better understand
specific topics like keyboard navigation and screen reader support.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse#devtools&quot; rel=&quot;noopener&quot;&gt;Run a Lighthouse
audit&lt;/a&gt; to catch
common accessibility issues. The report also provides a list of manual checks
that you can perform to improve the operability of your site. Note that an
Accessibility score of 100 does not guarantee that your site is accessible. There
are many important issues that Lighthouse can&#39;t test for in an automated
fashion so it&#39;s still important to do manual reviews. Other automated auditing
tools include the &lt;a href=&quot;https://wave.webaim.org/api/&quot; rel=&quot;noopener&quot;&gt;WAVE API&lt;/a&gt; and the &lt;a href=&quot;https://chrome.google.com/webstore/detail/axe-web-accessibility-tes/lhdoppojpmngadmnindnejefpokejbdd&quot; rel=&quot;noopener&quot;&gt;AXE
extension&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Complete the &lt;a href=&quot;https://egghead.io/courses/start-building-accessible-web-applications-today&quot; rel=&quot;noopener&quot;&gt;Start Building Accessible Web Applications Today course
on
egghead.io&lt;/a&gt;
course or check out the &lt;a href=&quot;https://www.udacity.com/course/web-accessibility--ud891&quot; rel=&quot;noopener&quot;&gt;Web Accessibility course on
Udacity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Watch the &lt;a href=&quot;https://www.youtube.com/playlist?list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g&quot; rel=&quot;noopener&quot;&gt;A11ycast
playlist&lt;/a&gt;
for more quick tips on specific accessibility topics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;PII&quot;&gt;Identity, security, and privacy &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#PII&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It can be tempting to take shortcuts to get critical fixes out the door, but
always be careful that you are not opening up security holes in doing so. People
need to access content on topics that are extremely private. Websites need to
protect this sensitive user data at all costs and convince people that their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Personal_data&quot; rel=&quot;noopener&quot;&gt;personally identifiable
information&lt;/a&gt; (PII) is safe.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand &lt;a href=&quot;https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https&quot; rel=&quot;noopener&quot;&gt;why all websites should be protected with
HTTPS&lt;/a&gt;,
not just those that handle sensitive PII data.&lt;/li&gt;
&lt;li&gt;Switch to a hosting provider that uses HTTPS by default, or use &lt;a href=&quot;https://letsencrypt.org/getting-started/&quot; rel=&quot;noopener&quot;&gt;Let&#39;s
Encrypt&lt;/a&gt; or similar services to
enable HTTPS on your servers.&lt;/li&gt;
&lt;li&gt;Review &lt;a href=&quot;https://web.dev/samesite-cookies-explained/&quot;&gt;SameSite cookies explained&lt;/a&gt; to learn
how to make your use of cookies more secure. Note that
&lt;a href=&quot;https://blog.chromium.org/2020/04/temporarily-rolling-back-samesite.html&quot; rel=&quot;noopener&quot;&gt;the enforcement of SameSite cookie labeling has been temporarily rolled back&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&quot;https://web.dev/secure/&quot;&gt;Safe and secure&lt;/a&gt; for more guidance.&lt;/p&gt;
&lt;h3 id=&quot;usability&quot;&gt;Usability, UI, and UX &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#usability&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;People are relying more heavily on the web to fulfill basic needs. Many of these
people don&#39;t use the web frequently. It&#39;s worthwhile to audit the usability of
your site&#39;s core functionality and make sure it&#39;s as simple and easy to use as
possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consider adding a prominent banner (that can be removed with an &lt;strong&gt;X&lt;/strong&gt; button)
to the top of your website that clearly communicates service updates. Use a
call-to-action in the banner to direct people to more specific resources.
Consider using distinct colors and fonts that stand out from the rest of your
page content. Keep your writing empathetic, focused on people&#39;s needs, and
transparent about what kind of service to expect.&lt;/li&gt;
&lt;li&gt;Look for opportunities to minimize physical interactions in your &lt;a href=&quot;https://www.nngroup.com/articles/journey-mapping-101/&quot; rel=&quot;noopener&quot;&gt;critical
user journeys&lt;/a&gt; (CUJs)
and suggest those changes to your product team. For example, if your delivery
service usually requires a signature, see if there&#39;s any way to work around
that.&lt;/li&gt;
&lt;li&gt;Double-check that your CUJs are as simple and intuitive as possible and
suggest changes to your product team if you see any opportunities to improve.&lt;/li&gt;
&lt;li&gt;Review the &lt;a href=&quot;https://developers.google.com/web/fundamentals/design-and-ux/principles&quot; rel=&quot;noopener&quot;&gt;principles of good mobile
design&lt;/a&gt;
and try out your CUJs on various mobile devices to make sure there aren&#39;t any
glaring issues. The people who don&#39;t use the web often and are suddenly finding
themselves having to rely on the web more are probably accessing your site from
mobile devices.&lt;/li&gt;
&lt;li&gt;Refactor your site to use &lt;a href=&quot;https://developers.google.com/web/fundamentals/design-and-ux/responsive&quot; rel=&quot;noopener&quot;&gt;responsive design
patterns&lt;/a&gt;
as much as possible.&lt;/li&gt;
&lt;li&gt;Ensure that your forms are
&lt;a href=&quot;https://www.smashingmagazine.com/2017/06/designing-efficient-web-forms/&quot; rel=&quot;noopener&quot;&gt;efficient&lt;/a&gt;
and
&lt;a href=&quot;https://developers.google.com/web/fundamentals/design-and-ux/input/forms&quot; rel=&quot;noopener&quot;&gt;well-designed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;seo&quot;&gt;SEO &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#seo&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;People are looking for critical health- and job-related information. It&#39;s
important to ensure that your sites are discoverable by all search engines.
The &lt;a href=&quot;https://web.dev/lighthouse-seo/&quot;&gt;Lighthouse SEO audits&lt;/a&gt; can help you detect basic problems.
Follow the official blogs of search engines for the latest guidance and updates:
&lt;a href=&quot;https://webmasters.googleblog.com/&quot; rel=&quot;noopener&quot;&gt;Google&lt;/a&gt;,
&lt;a href=&quot;https://blogs.bing.com/webmaster/&quot; rel=&quot;noopener&quot;&gt;Bing&lt;/a&gt;,
&lt;a href=&quot;http://research.baidu.com/Blog&quot; rel=&quot;noopener&quot;&gt;Baidu&lt;/a&gt;,
&lt;a href=&quot;https://spreadprivacy.com/tag/duckduckgo/&quot; rel=&quot;noopener&quot;&gt;DuckDuckGo&lt;/a&gt;,
&lt;a href=&quot;https://yandex.com/blog/yacompany-com&quot; rel=&quot;noopener&quot;&gt;Yandex&lt;/a&gt;.
Recent COVID-19-related posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webmasters.googleblog.com/2020/03/how-to-pause-your-business-online-in.html&quot; rel=&quot;noopener&quot;&gt;How to change your online activities while minimizing impact on your Google
Search
presence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webmasters.googleblog.com/2020/03/new-properties-virtual-or-canceled-events.html&quot; rel=&quot;noopener&quot;&gt;New properties for virtual, postponed, and canceled
events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.bing.com/webmaster/march-2020/Bing-adopts-schema-org-mark-up-for-Special-Announcements-about-COVID-19&quot; rel=&quot;noopener&quot;&gt;Bing adopts schema.org markup for special announcements for
COVID-19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/search/docs/data-types/special-announcements&quot; rel=&quot;noopener&quot;&gt;Add structured data to COVID-19 announcements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webmasters.googleblog.com/2020/03/health-organizations-covid19.html&quot; rel=&quot;noopener&quot;&gt;Helping health organizations make COVID-19 information more
accessible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://support.google.com/webmasters/answer/9781983&quot; rel=&quot;noopener&quot;&gt;General best practices for Search for health &amp;amp; government
sites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&quot;https://web.dev/discoverable/&quot;&gt;Discoverable&lt;/a&gt; for more guidance.&lt;/p&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/covid19/#performance&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some ISPs (&lt;a href=&quot;https://economictimes.indiatimes.com/tech/internet/brace-yourself-for-slower-data-speeds/articleshow/74702264.cms&quot; rel=&quot;noopener&quot;&gt;in India for
example&lt;/a&gt;)
are seeing a &lt;a href=&quot;https://www.npr.org/2020/03/17/817154787/internet-traffic-surges-as-companies-and-schools-send-people-home&quot; rel=&quot;noopener&quot;&gt;sharp increase in home internet
usage&lt;/a&gt;
and don&#39;t have the infrastructure to meet the increased demand. In situations
like this your website speed may be getting slower through no fault of your own.
Optimizing your load performance could be a way to offset the headwind of
reduced bandwidth. In other words, by reducing the number of bytes that need to
be sent over the network in order to load your pages, you can offset the
performance impact of reduced bandwidth.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Images are the &lt;a href=&quot;https://images.guide/#introduction&quot; rel=&quot;noopener&quot;&gt;number one cause of bloat on the
web&lt;/a&gt;. You might be able to significantly
reduce your website&#39;s bandwidth usage by &lt;a href=&quot;https://web.dev/fast/#optimize-your-images&quot;&gt;optimizing your
images&lt;/a&gt;.
&lt;a href=&quot;https://squoosh.app/&quot; rel=&quot;noopener&quot;&gt;Squoosh&lt;/a&gt; is a simple open source image compression tool
that can help you quickly compress your images.&lt;/li&gt;
&lt;li&gt;Run &lt;a href=&quot;https://webpagetest.org/easy&quot; rel=&quot;noopener&quot;&gt;WebPageTest&lt;/a&gt; or
&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/#get-started&quot; rel=&quot;noopener&quot;&gt;Lighthouse&lt;/a&gt;
to discover your top performance improvement opportunities.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/uses-text-compression/&quot;&gt;Enable text compression&lt;/a&gt; to reduce
the network size of text resources. This is often an easy performance win that
requires minimal technical investment.&lt;/li&gt;
&lt;li&gt;Read &lt;a href=&quot;https://web.dev/fixing-website-speed-cross-functionally/&quot;&gt;Fixing website speed
cross-functionally&lt;/a&gt;
to learn how to collaborate with and get buy-in from other departments.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/browser-level-image-lazy-loading/&quot;&gt;Use standardized lazy-loading for images&lt;/a&gt; to
minimize requests for images that people may never actually see. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Browser_compatibility&quot; rel=&quot;noopener&quot;&gt;Browser
compatibility&lt;/a&gt;
is not 100% but the feature can be treated as a progressive enhancement. In
other words, if a certain browser doesn&#39;t support standardized lazy-loading, the
image should load as it normally does.&lt;/li&gt;
&lt;li&gt;Check if your site has any A/B testing or personalization scripts that can be
loaded more asynchronously or if there&#39;s any non-critical functionality in the
scripts that can be disabled. A/B testing and personalization scripts usually
can&#39;t be loaded &lt;em&gt;completely&lt;/em&gt; asynchronously because they need to run before
the page content loads, but there may be some opportunity to load parts of the
scripts more asynchronously. See &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path&quot; rel=&quot;noopener&quot;&gt;Critical Rendering Path&lt;/a&gt; to understand
the fundamental tradeoff between synchronous scripts (also known as
render-blocking scripts) in general and page load time, and then decide
whether you need to prioritize the render-blocking scripts over page load
time, or vice versa.&lt;/li&gt;
&lt;li&gt;Third-party code constitutes &lt;a href=&quot;https://almanac.httparchive.org/en/2019/third-parties&quot; rel=&quot;noopener&quot;&gt;around half of all
requests&lt;/a&gt; for most
websites. Consider
&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/loading-third-party-javascript&quot; rel=&quot;noopener&quot;&gt;optimizing&lt;/a&gt;
or temporarily removing or disabling third-party code that isn&#39;t fundamental
to running your site.&lt;/li&gt;
&lt;li&gt;If feature releases are deprioritized, this might be the perfect time to clean
up. Remove tags from your tag managers, clean up bloated CSS and JS, and
remove deprecated features or code. The
&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/coverage&quot; rel=&quot;noopener&quot;&gt;Coverage tab&lt;/a&gt;
in Chrome DevTools and the
&lt;a href=&quot;https://pptr.dev/#?product=Puppeteer&amp;amp;version=v2.1.1&amp;amp;show=api-class-coverage&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Coverage&lt;/code&gt;&lt;/a&gt; class
in Puppeteer can help you detect unused code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&quot;https://web.dev/fast/&quot;&gt;Fast load times&lt;/a&gt; for more guidance.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://unsplash.com/photos/Q1p7bh3SHj8&quot; rel=&quot;noopener&quot;&gt;Hero image&lt;/a&gt; by
&lt;a href=&quot;https://unsplash.com/@nasa&quot; rel=&quot;noopener&quot;&gt;NASA&lt;/a&gt; on
&lt;a href=&quot;https://unsplash.com/s/photos/earth&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</content>
    
  </entry>
  
  <entry>
    <title>Going beyond images with basic video for the web</title>
    <link href="https://web.dev/video-basics/"/>
    <updated>2019-09-03T00:00:00Z</updated>
    <id>https://web.dev/video-basics/</id>
    <content type="text/html" mode="escaped">&lt;p&gt;Are you thinking about adding video to your website? As devices and network
connections have become faster and more powerful, you can move beyond images and
add video to your toolchest of techniques to build the web.
&lt;a href=&quot;https://www.foodbloggerpro.com/blog/how-we-improved-our-landing-page-conversion-rate-by-138/&quot; rel=&quot;noopener&quot;&gt;Research
shows&lt;/a&gt;
that websites with video lead to higher engagement and sales. So even if you
haven&#39;t added video to your sites yet, it&#39;s probably just a matter of time
until you do.&lt;/p&gt;
&lt;p&gt;In all likelihood, the video files you add to your site will be the largest
files that are downloaded. For that reason, it&#39;s extremely important to ensure
that the files are built for fast and steady playback to all of your customers.
Even though video can increase engagement and customer satisfaction, a video
that doesn&#39;t play or stalls during playback can lead to customer frustration.
This post focuses on using the HTML5 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag for delivering video, and
therefore will not cover streaming video.&lt;/p&gt;
&lt;p&gt;So let&#39;s get started!&lt;/p&gt;
&lt;h2 id=&quot;the-lessvideogreater-tag&quot;&gt;The &amp;lt;video&amp;gt; tag &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#the-lessvideogreater-tag&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It seems obvious, right? To add video, you have to add the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag, point to a
source, and then you&#39;re off to the races!&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myVideo.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;And, you&#39;re right. At the highest level, this is all you need to add a video to
the web. But there are a lot of attributes that you can add to the video tag to
improve the layout and delivery of the video.&lt;/p&gt;
&lt;h2 id=&quot;the-lesssourcegreater-tag&quot;&gt;The &amp;lt;source&amp;gt; tag &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#the-lesssourcegreater-tag&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Perhaps the best way to improve the delivery of video on the web is to optimize
the files that are delivered to the browser. The way to do this is using the
&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myWebmVideo.webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myh265Video.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myh264Video.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This references three separate source files. The browser starts at the top, and
picks the first format and codec that it can use. In the video world, the file
format, usually called the container, can be saved with different codecs, each
with different attributes. (&lt;a href=&quot;https://developers.google.com/web/fundamentals/media/manipulating/applications&quot; rel=&quot;noopener&quot;&gt;More on this
here&lt;/a&gt;.)
In the example above, the first choice is the WebM format (&lt;a href=&quot;https://www.webmproject.org/about/&quot; rel=&quot;noopener&quot;&gt;which can be encoded
with VP8 or VP9 codecs&lt;/a&gt;), and is supported
(at the time of writing) by 78% of &lt;a href=&quot;https://caniuse.com/#search=webm&quot; rel=&quot;noopener&quot;&gt;global
users&lt;/a&gt;. The second choice is the H.265
codec of mp4, which is supported on &lt;a href=&quot;https://caniuse.com/#search=h265&quot; rel=&quot;noopener&quot;&gt;iOS and newer
Macs&lt;/a&gt;. These codecs are newer and have
improved data compression, while delivering the same quality video as older
video formats.&lt;/p&gt;
&lt;p&gt;The final choice in our list is H.264 mp4, which boasts support on 92% of all
&lt;a href=&quot;https://caniuse.com/#search=h264&quot; rel=&quot;noopener&quot;&gt;global
users&lt;/a&gt;,
but is an older format, and as such, is generally a lot larger than WebM or H.265
videos. In one example, you can see the difference for a two minute movie:&lt;/p&gt;
&lt;div class=&quot;w-table-wrapper&quot;&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Codec&lt;/th&gt;
        &lt;th&gt;File size&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;th&gt;VP8&lt;/th&gt;
        &lt;th&gt;5.5 MB&lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;VP9&lt;/th&gt;
        &lt;th&gt;4.2 MB&lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;H.265&lt;/th&gt;
        &lt;th&gt;5.4 MB&lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;H.264&lt;/th&gt;
        &lt;th&gt;16.1 MB&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Delivering files that are smaller is the best performance optimization you can
make to better deliver your videos. When a smaller video is downloaded, video
playback occurs sooner, and the video buffer fills up faster. This leads to
fewer stalls during video playback. Additionally, server load is
decreased, which makes up for the increased storage requirements of multiple
video files.&lt;/p&gt;
&lt;h2 id=&quot;the-preload-attribute&quot;&gt;The preload attribute &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#the-preload-attribute&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Videos cannot begin playback until there is some video downloaded and stored
locally. Using the preload attribute, you can control how much video is
downloaded on page load. There are three values for the preload attribute:
&lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;metadata&lt;/code&gt;, and &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;preload&#39;auto&#39;&quot;&gt;preload=&#39;auto&#39; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#preload&#39;auto&#39;&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;&#39;auto&#39;&lt;/code&gt; is used, the entire video will be downloaded, no matter if
the user presses play or not. This enables fast video playback as the video is
downloaded locally before the user presses play. From a data usage (and server
load perspective) this should only be used when it is highly probable that the
video is to be watched. Otherwise all the data of a full video download will be
wasted.&lt;/p&gt;
&lt;h3 id=&quot;preload&#39;metadata&#39;&quot;&gt;preload=&#39;metadata&#39; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#preload&#39;metadata&#39;&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the default setting for preload on Chrome and Safari. When &lt;code&gt;&#39;metadata&#39;&lt;/code&gt;
is used, the first 3% of the video is downloaded. Though this shares caveats
with &lt;code&gt;&#39;auto&#39;&lt;/code&gt;, downloading just 3% of the video holds a much smaller server/data
usage cost than the entire video, while still ensuring a portion of the video is
stored locally for fast video startup.&lt;/p&gt;
&lt;h3 id=&quot;preload&#39;none&#39;&quot;&gt;preload=&#39;none&#39; &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#preload&#39;none&#39;&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This saves the most data, but will lead to slower video startup when play is
pressed, because as the setting states, zero kilobytes of the video is
preloaded locally on the device. For videos that are present, but unlikely to
be played, this is the appropriate setting. This might also be used if the user
has enabled &lt;a href=&quot;https://blog.chromium.org/2019/04/data-saver-is-now-lite-mode.html&quot; rel=&quot;noopener&quot;&gt;Lite mode&lt;/a&gt; in their browser.&lt;/p&gt;
&lt;h2 id=&quot;poster&quot;&gt;poster &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#poster&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You may want to have a poster image that displays over the video
window before the video starts playing:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myVideo.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;poster&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/image/myVideoImage.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A video without a poster shows a black screen before it starts.&quot; decoding=&quot;async&quot; height=&quot;269&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 478px) 478px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/g25bdsYqmAWM39KhjGTj.png?auto=format&amp;w=956 956w&quot; width=&quot;478&quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;w-compare&quot;&gt;&lt;p class=&quot;w-compare__label w-compare__label--worse&quot;&gt;No poster image&lt;/p&gt;
&lt;p&gt;A video without a poster shows a black screen before it starts.&lt;/p&gt;
&lt;/figure&gt;
&lt;figure class=&quot;w-figure&quot;&gt;
  &lt;img alt=&quot;A video with a poster is much more engaging.&quot; decoding=&quot;async&quot; height=&quot;269&quot; loading=&quot;lazy&quot; sizes=&quot;(min-width: 478px) 478px, calc(100vw - 48px)&quot; src=&quot;https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&quot; srcset=&quot;https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/admin/QVLwk1zEOzqllD8eY3pc.png?auto=format&amp;w=956 956w&quot; width=&quot;478&quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;w-compare&quot;&gt;&lt;p class=&quot;w-compare__label w-compare__label--better&quot;&gt;With a poster image&lt;/p&gt;
&lt;p&gt;A video with a poster is much more engaging.&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;By adding a photo instead of a black box on the page, you make your website more
engaging and interactive. However, using the &lt;code&gt;poster&lt;/code&gt; attribute adds an image
download before the video download begins. For that reason, you might consider
avoiding adding a poster for videos that autoplay (as the additional download
will delay the video download).&lt;/p&gt;
&lt;h2 id=&quot;playback-controls&quot;&gt;Playback controls &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#playback-controls&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Adding a &lt;code&gt;controls&lt;/code&gt; attribute adds playback controls. Without these, your
customers cannot start or stop your video. You should add this for videos so
that users can stop and pause, change the volume, and so on. For background or
looping videos, you may wish to omit this attribute.&lt;/p&gt;
&lt;h2 id=&quot;muted&quot;&gt;muted &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#muted&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;muted&lt;/code&gt; attribute causes playback to begin in a muted state. If no controls
are supplied, it will remain muted for the entirety of playback. If that is
intended it might make sense to remove the audio track from the video. This
further reduces the size of the video file being delivered to the customer.&lt;/p&gt;
&lt;p&gt;As with containers and codecs, removing the audio file, also called demuxing, is
also beyond the scope of this article. You can find instructions in the &lt;a href=&quot;https://developers.google.com/web/fundamentals/media/manipulating/cheatsheet#demux_split_audio_and_video&quot; rel=&quot;noopener&quot;&gt;Media
Manipulation Cheat
Sheet&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;loop&quot;&gt;loop &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#loop&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To deliver a video that loops the content (like an animated GIF), add the &lt;code&gt;loop&lt;/code&gt;
attribute. As video files are typically much smaller than animated GIFs, this
mechanism allows you to &lt;a href=&quot;https://dougsillars.com/2017/04/12/animated-gifs-vs-video-files/&quot; rel=&quot;noopener&quot;&gt;replace your GIFs with video
files&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;autoplaying-video&quot;&gt;Autoplaying video &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#autoplaying-video&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want your video to play immediately (for example as a background video, or a
video that loops like an animated GIF) you can add the &lt;code&gt;autoplay&lt;/code&gt; attribute:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myVideo.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;autoplay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;That said, in order for a video to autoplay on mobile browsers, the &lt;code&gt;muted&lt;/code&gt;
attribute must also be added:&lt;/p&gt;
&lt;div&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myVideo.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;autoplay&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;muted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/video-basics/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Simply adding a video to your website will add a new realm of engagement for
your customers, but it is important that you deliver the content
properly—ensuring that the playback of the video is seamless and without
stalls. Using the built in attributes of the &amp;lt;video&amp;gt; tag can greatly help you
deliver flawless video to everyone who visits your website.&lt;/p&gt;
</content>
    <author>
      <name>Doug Sillars</name>
    </author>
  </entry>
</feed>
